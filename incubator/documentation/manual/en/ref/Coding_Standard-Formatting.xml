<sect1 id="coding-standard.php-file-formatting">
    <title>PHP File Formatting</title>

    <sect2 id="coding-standard.php-file-formatting.general">
        <title>General</title>

        <para>
            For files that contain only PHP code, the closing tag ("?>") is never permitted.  It is
        	not required by PHP.  Not including it prevents trailing whitespace from being accidentally
			injected into the output.
        </para>

        <para>
            <emphasis>IMPORTANT:</emphasis> Inclusion of arbitrary binary data as permitted by <code>__HALT_COMPILER()</code>
            is prohibited from any Zend framework PHP file or files derived from them. Use of
            this feature is only permitted for special installation scripts.
        </para>
    </sect2>

    <sect2 id="coding-standard.php-file-formatting.indentation">
        <title>Indentation</title>

        <para>Use an indent of 4 spaces, with no tabs.</para>
    </sect2>

    <sect2 id="coding-standard.php-file-formatting.max-line-length">
        <title>Maximum Line Length</title>

        <para>
            The target line length is 80 characters, i.e. developers should aim keep code
            as close to the 80-column boundary as is practical. However, longer lines are
            acceptable. The maximum length of any line of PHP code is 120 characters.
        </para>
    </sect2>

    <sect2 id="coding-standard.php-file-formatting.line-termination">
        <title>Line Termination</title>

        <para>
            Line termination is the standard way for Unix text files. Lines must end only
            with a linefeed (LF). Linefeeds are represented as ordinal 10, or hexadecimal 0x0A.
        </para>

        <para>Do not use carriage returns (CR) like Macintosh computers (0x0D).</para>

        <para>
            Do not use the carriage return/linefeed combination (CRLF) as Windows computers
            (0x0D, 0x0A).
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
