<sect1 id="zend.locale.functions">

    <title>Using Zend_Locale</title>

    <para>
        <code>Zend_Locale</code> also provides localized information about locales for each locale, including localized
        names for other locales, days of the week, month names, etc.
    </para>

    <sect2 id="zend.locale.copying">

        <title>Copying, Cloning, and Serializing Locale Objects</title>

        <para>
            Use
            <ulink url="http://php.net/language.oop5.cloning">object cloning</ulink>
            to duplicate a locale object exactly and efficiently. Most locale-aware methods also accept string
            representations of locales, such as the result of <code>$locale->toString()</code>.
        </para>

        <example>
            <title>clone</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('ar');

// Save the $locale object as a serialization
$serializedLocale = $locale->serialize();
// re-create the original object
$localeObject = unserialize($serializedLocale);

// Obtain a string identification of the locale
$stringLocale = $locale->toString();

// Make a cloned copy of the $local object
$copiedLocale = clone $locale;

print "copied: ", $copiedLocale->toString();
print "copied: ", $copiedLocale; // PHP automatically calls toString() via __toString();
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.equals">

        <title>Equality</title>

        <para>
            <code>Zend_Locale</code> also provides a convenience function to compare two locales. All locale-aware
            classes should provide a similar equality check.
        </para>

        <example>
            <title>Check for equal locales</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();
$mylocale = new Zend_Locale('en_US');

// Check if locales are equal
if ($locale->equals($mylocale)) {
    print "Locales are equal";
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getdefault">

        <title>Default locales</title>

        <para>
            The method <code>getDefault()</code> returns an array of relevant locales using information from the user's
            web browser (if available), information from the environment of the host server, and ZF settings. As with
            the constructor for <code>Zend_Locale</code>, the first parameter selects a preference of which information
            to consider
            <link linkend="zend.locale.selection">(<code>BROWSER</code>, <code>ENVIRONMENT</code>, or <code>FRAMEWORK)</code>
            </link>
            first. The second parameter toggles between returning all matching locales or only the first/best match.
            Locale-aware components normally use only the first locale. A quality rating is included, when avaiable.
        </para>

        <example>
            <title>Get default locales</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// Return all default locales
$found = $locale->getDefault();
print_r($found);

// Return only browser locales
$found2 = $locale->getDefault(Zend_Locale::BROWSER,TRUE);
print_r($found2);
?>]]></programlisting>
        </example>

        <para>
            To obtain only the default locales relevent to the
            <link linkend="zend.locale.selection"><code>BROWSER</code>, <code>ENVIRONMENT</code>, or <code>FRAMEWORK</code>
            </link>
            , use the corresponding method:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>getEnvironment()</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getBrowser()</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getLocale()</code>
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.locale.setlocale">

        <title>Set a new locale</title>

        <para>
            A new locale can be set with the function <code>setLocale()</code>. This function takes a locale string as
            parameter. If no locale is given, a locale is
            <link linkend="zend.locale.selection">automatically selected</link>
            . Since Zend_Locale objects are "light", this method exists primarily to cause side-effects for code that
            have references to the existing instance object.
        </para>

        <example>
            <title>setLocale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// Actual locale
print $locale->toString();

// new locale
$locale->setLocale('aa_DJ');
print $locale->toString();
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getlocale">

        <title>Getting the language and region</title>

        <para>
            Use <code>getLanguage()</code> to obtain a string containing the two character language code from the string
            locale identifier. Use <code>getRegion()</code> to obtain a string containing the two character region code
            from the string locale identifier.
        </para>

    </sect2>

    <sect2 id="zend.locale.getdata">

        <title>Obtaining localized strings</title>

        <para>
            <code>getTranslationList()</code> gives you access to localized informations of several types. These
            information are usefull if you want to display localized data to a customer without the need of translating
            it. They are already avaiable for your useage.
        </para>

        <para>
            You can receive this informations for all languages. But not all of the informations are completly avaiable
            for all languages. Some of these types are also avaiable through an own function for simplicity. See this
            list for detailed informations.
        </para>

        <table>
            <title>Details for getTranslationList($type = null, $locale = null)</title>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Type</entry>
                        <entry>Additional Function</entry>
                        <entry>Description</entry>
                        <entry>Complete</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Language</entry>
                        <entry>getLanguageTranslationList</entry>
                        <entry>Localized list of all languages</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Script</entry>
                        <entry>getScriptTranslationList</entry>
                        <entry>Localized list of all scripts</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Country</entry>
                        <entry>getCountryTranslationList</entry>
                        <entry>Localized list of all countries</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Territory</entry>
                        <entry>getTerritoryTranslationList</entry>
                        <entry>Localized list of all territories</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Calendar</entry>
                        <entry />
                        <entry>Localized list of all calendar names</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Month</entry>
                        <entry />
                        <entry>Localized list of all month names</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Month_short</entry>
                        <entry />
                        <entry>Localized list of all abbreviated month names (commonly only 2-4 chars)</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Month_narrow</entry>
                        <entry />
                        <entry>Localized list of all narrowed month names (commonly only one char)</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Day</entry>
                        <entry />
                        <entry>Localized list of all day names</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Day_short</entry>
                        <entry />
                        <entry>Localized list of all abbreviated day names (commonly only 2-4 chars)</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Day_narrow</entry>
                        <entry />
                        <entry>Localized list of all narrowed day names (commonly only one char)</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Dateformat</entry>
                        <entry />
                        <entry>Localized list of all formats for dates</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Timeformat</entry>
                        <entry />
                        <entry>Localized list of all formats for times</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Timezone</entry>
                        <entry />
                        <entry>Localized list of all known timezones</entry>
                        <entry>Incomplete, they differ between languages</entry>
                    </row>
                    <row>
                        <entry>Currency</entry>
                        <entry />
                        <entry>Localized list of all known currencies</entry>
                        <entry>Incomplete, they differ between languages</entry>
                    </row>
                    <row>
                        <entry>Currency_sign</entry>
                        <entry />
                        <entry>Localized list of all known symbols for currencies</entry>
                        <entry>Incomplete, they differ between languages</entry>
                    </row>
                    <row>
                        <entry>Currency_detail</entry>
                        <entry />
                        <entry>List of all countries and the actually used currency within that country</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Territory_detail</entry>
                        <entry />
                        <entry>List of all territories and the countries which are included within that territory</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Language_detail</entry>
                        <entry />
                        <entry>List of all countries and the known spoken language within these countries</entry>
                        <entry>Complete</entry>
                    </row>
                    <row>
                        <entry>Characters</entry>
                        <entry />
                        <entry>List of known characters for this locale, regex syntax.</entry>
                        <entry>Complete</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            If you are in need of a single translated value, then you can use <code>getTranslation()</code> instead of
            <code>getTranslationList()</code>. It returns a single string or an array depending on if the result can
            have multiple values (f.e. language_detail because a language is spoken in more than one country), or only
            one value (f.e. language because a language always has only one translated name for it). Both functions
            accept a type from the list above. As a convenience functions, the following have simple equivalents using
            the two functions above:
        </para>

        <example>
            <title>Convenience functions for getTranslation()</title>
<programlisting role="php"><![CDATA[<?php
getCountryTranslation($what, $locale = null)
getCountryTranslationList($locale = null)
getLanguageTranslation($what, $locale = null)
getLanguageTranslationList($locale = null)
getScriptTranslation($what, $locale = null)
getScriptTranslationList($locale = null)
getTerritoryTranslation($what, $locale = null)
getTerritoryTranslationList($locale = null)
?>]]></programlisting>
        </example>

        <para>
            The example below demonstrates how to obtain the names of things in different languages.
        </para>

        <example>
            <title>getTranslationList</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('en_US');
// prints the names of all countries in German language
print_r($locale->getTranslationList('country', 'de'));
?>]]></programlisting>
        </example>

        <para>
            The next example shows how to find the name of a language in another language, when the two letter CLDR
            country code is not known.
        </para>

        <example>
            <title>Converting country name in one language to another</title>
<programlisting role="php"><![CDATA[<?php
require 'Zend/Locale.php';
$locale = new Zend_Locale('en_US');
$code2name = $locale->getLanguageTranslationList();
$name2code = array_flip($code2name);
$frenchCode = $name2code['French'];
echo $locale->getLanguageTranslation($frenchCode, 'de_AT');
// output is the German name of the French language
?>]]></programlisting>
        </example>

        <para>
            To gain some familiarity with what is available, try the example and examine the output.
        </para>

        <example>
            <title>All available translations</title>
<programlisting role="php"><![CDATA[<?php
// obtain a list of all the translation lists
$lists = $locale->getTranslationList();

// show all translation lists available (lots of output, all in English language)
foreach ($lists as $list) {
    echo "List $list = ";
    print_r($locale->getTranslationList($list));
}
?>]]></programlisting>
        </example>

        <para>
            To generate a list of all languages known by Zend_Locale, with each language name shown in its own language,
            try the example below in a web page. Similarly, <code>getCountryTranslationList()</code> and
            <code>getRegionDisplay()</code> could be used to create a table mapping your native language names for
            regions to the names of the regions shown in another language. Likewise,
            <code>getCalendarTranslationList()</code> and <code>getCalendarDisplay()</code> work identically. Use a
            <code>try .. catch</code> block to handle exceptions that occur when using a locale that does not exist. Not
            all languages are also locales. In the example, below exceptions are ignored to prevent early termination.
        </para>

        <example>
            <title>All Languages written in their native language</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$sourceLanguage = null; // set to your native language code
$locale = new Zend_Locale($sourceLanguage);
$list = $locale->getLanguageTranslationList();

foreach($list as $language => $content) {
    try {
        $output = $locale->getLanguageDisplay($language, $language);
        if (is_string($output)) {
            print "\n<br>[".$language."] ".$output;
        }
    } catch (Exception $e) {
        continue;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getquestion">

        <title>Obtaining translations for "yes" and "no"</title>

        <para>
            Frequently, programs need to solicit a "yes" or "no" response from the user. Use <code>getQuestion()</code>
            to obtain an array containing the correct word(s) or regex strings to use for prompting the user in a
            particular $locale (defaults to the current object's locale). The array will contain six key-value pairs,
            for "yes", "no", their abbreviations, and regex string for proper parsing as shown in the example below.
        </para>

        <example>
            <title>getQuestion()</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// Question strings
print_r($locale->getQuestion('de'));

- - - Output - - -

Array
(
    [yes]ja[/yes]
    [no]nein[/no]
    [yesabbr]j[/yesabbr]
    [noabbr]n[/noabbr]
    [yesexpr]^([yY]([eE][sS])?)|([jJ][aA]?)[/yesexpr]
    [noexpr]^([nN]([oO]|([eE][iI][nN]))?)[/noexpr]
)
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
