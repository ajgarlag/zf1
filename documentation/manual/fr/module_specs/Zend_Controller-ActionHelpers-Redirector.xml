<sect3 id="zend.controller.actionhelpers.redirector">
    <title>Redirector</title>

    <sect4 id="zend.controller.actionhelper.redirector.introduction">
        <title>Introduction</title>

        <para>
            L'aide <code>Redirector</code> vous permet d'utiliser un objet de redirection qui remplit tous les besoins de votre application nécessaire à une redirection vers un nouvel URL. Il fournit de nombreux avantages par rapport à la méthode <code>_redirect()</code>, comme la capacité de préconfigurer le comportement du site dans l'objet redirector ou d'utiliser l'interface intégrée <code>goto($action, $controller, $module, $params)</code> similaire à <code>Zend_Controller_Action::_forward()</code>.
        </para>

        <para>
            <code>Redirector</code> possède une certain nombre de méthodes qui peuvent être utilisée pour affecter le comportemet de la redirection :
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setCode()</code> peut être utilisé pour paramètrer le code HTTP de la réponse à utiliser pendant la redirection.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setExit()</code> peut être utilisé pour forcer un <code>exit()</code> juste après la redirection. Par défaut ceci vaut <code>true</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setGoto()</code> peut être utilisé pour paramètrer l'URL par défautà utiliser si aucun n'est fourni à <code>goto()</code>. Il utilise les API de <code>Zend_Controller_Action::_forward()</code> : setgoto($action, $controller = null, $module = null, array $params = array());
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setGotoRoute()</code> peut être utilisé pour paramètrer un URL basé sur une route enregistrée. Fournissez un tableau de paires clé/valeur et une route nommée, et elle assemblera un URL suivant le type de la route et sa définition.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setGotoUrl()</code> peut être utilisé pour paramètrer l'URL par défautà utiliser si aucun n'est fourni à <code>gotoUrl()</code>. Accepte une chaîne unique correspondant à un URL.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setPrependBase()</code> peut être utilisé pour ajouter une chaîne au début de l'URL de base de l'objet requête pour les URLs spécifiés avec <code>setGotoUrl()</code>, <code>gotoUrl()</code>, ou <code>gotoUrlAndExit()</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setUseAbsoluteUri()</code> peut être utilisé pour forcer le  <code>Redirector</code> à utiliser des URIs absolus pour la redirection. Quand cette option est choisi, elle utilise les valeurs de <code>$_SERVER['HTTP_HOST']</code>, <code>$_SERVER['SERVER_PORT']</code>, et <code>$_SERVER['HTTPS']</code> pour former un URI complet à partir de l'URL spécifié par une des méthodes de redirection. Cette option est inactive par défaut, mais pourra être activé par défaut dans les prochaines releases.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            De plus, il y a une variété de méthodes dans le redirector pour réaliser les redirections actuelles :
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>goto()</code> utilise <code>setGoto()</code> (<code>API de type _forward()</code>) pour construire un URL et réaliser une redirection.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>gotoRoute()</code> utilise <code>setGotoRoute()</code> (<code>assemblage de route</code>) pour construire un URL et réaliser une redirection.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>gotoUrl()</code> utilise <code>setGotoUrl()</code> (<code>URL sous forme de chaîne</code>) pour construire un URL et réaliser une redirection.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Enfin, vous pouvez déterminer l'URL de la redirection courante à tout moment en utilisant <code>getRedirectUrl()</code>.
        </para>
    </sect4>

    <sect4 id="zend.controller.actionhelper.redirector.basicusage">
        <title>Exemples d'utilisation basique</title>

        <example id="zend.controller.actionhelper.redirector.basicusage.example-1">
            <title>Options de réglage</title>

            <para>
                Cet exemple surcharge de multiples options,incluant le réglage du code de statut HTTP à utiliser dans la redirection ("303"), le retrait du exit par défaut après la redirection, et la définition d'un URL par défaut à utiliser lors d'une redirection.
            </para>

            <programlisting role="php"><![CDATA[<?php
class SomeController extends Zend_Controller_Action
{
    /**
     * Redirector - défini pour l'auto-complétion
     *
     * @var Zend_Controller_Action_Helper_Redirector
     */
    protected $_redirector = null;

    public function init()
    {
        $this->_redirector = $this->_helper->getHelper('Redirector');

        // Régle les options par défaut pour le redirector
        // Puisque l'objet est enregistré dans le gestionnaire d'aide, ceci sera effectif
        // pour toutes les actions réalisées après ce point
        $this->_redirector->setCode('303')
                          ->setExit(false)
                          ->setGoto("this-action", "some-controller");
    }

    public function myAction()
    {
        /* Faire quelquechose */

        // Redirige vers une URL enregistré précédemment, et force une sortie pour finir
        $this->_redirector->redirectAndExit();
        return; // jamais atteint
    }
}]]>
            </programlisting>
        </example>

        <example id="zend.controller.actionhelper.redirector.basicusage.example-2">
            <title>Utiliser les valeurs par défaut</title>

            <para>
                Cet exemple suppose que vous utilisez les paramètres par défaut, ce qui inclue que toute redirection résultera d'un <code>exit()</code> immédiat.
            </para>

            <programlisting role="php"><![CDATA[<?php
// EXEMPLE ALTERNATIF
class AlternativeController extends Zend_Controller_Action
{
    /**
     * Redirector - défini pour l'auto-complétion
     *
     * @var Zend_Controller_Action_Helper_Redirector
     */
    protected $_redirector = null;

    public function init()
    {
        $this->_redirector = $this->_helper->getHelper('Redirector');
    }

    public function myAction()
    {
        /* Faire quelquechose */

        $this->_redirector->gotoUrl('/my-controller/my-action/param1/test/param2/test2');
        return; // jamais atteint puisque les paramètres par défaut sont à goto et exit
    }
}]]>
            </programlisting>
        </example>

        <example id="zend.controller.actionhelper.redirector.basicusage.example-3">
            <title>Utilisation de l'API _forward() de goto()</title>

            <para>
                L'API de <code>goto()</code> imite celle de <code>Zend_Controller_Action::_forward()</code>. La différence principale est qu'elle construit un URL à partir des paramètres fournis, et du format de route par défaut <code>:module/:controller/:action/*</code> du routeur. Il réalise alors une redirection au lieu d'enchaîner l'action.
            </para>

            <programlisting role="php"><![CDATA[<?php
class ForwardController extends Zend_Controller_Action
{
    /**
     * Redirector - défini pour l'auto-complétion
     *
     * @var Zend_Controller_Action_Helper_Redirector
     */
    protected $_redirector = null;

    public function init()
    {
        $this->_redirector = $this->_helper->getHelper('Redirector');
    }

    public function myAction()
    {
        /* Faire quelquechose */

        // Redirige vers 'my-action' de 'my-controller' dans le module courant
        // en utilisant les paramètres param1 => test et param2 => test2
        $this->_redirector->goto('my-action', 'my-controller', null, array('param1' => 'test', 'param2' => 'test2'));
    }
}]]>
            </programlisting>
        </example>

        <example id="zend.controller.actionhelper.redirector.basicusage.example-4">
            <title>Utilisation de l'assemblage de la route avec gotoRoute()</title>

            <para>
                L'exemple suivant utilise la méthode <code>assemble()</code> du <link linkend="zend.controller.router">router</link> pour créer une URL basé sur un tableau associatif de paramètres fournis. Il suppose que la route suivante a été enregistrée :
            </para>

            <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'blog/:year/:month/:day/:id',
    array('controller' => 'archive', 'module' => 'blog', 'action' => 'view')
);
$router->addRoute('blogArchive', $route);]]>
            </programlisting>

            <para>
                En donnant un tableau avec l'année règlée à 2006, le mois à 4, le jour à 24 et l'id à 42, il construira l'URL <code>/blog/2006/4/24/42</code>.
            </para>

            <programlisting role="php"><![CDATA[<?php
class BlogAdminController extends Zend_Controller_Action
{
    /**
     * Redirector - défini pour l'auto-complétion
     *
     * @var Zend_Controller_Action_Helper_Redirector
     */
    protected $_redirector = null;

    public function init()
    {
        $this->_redirector = $this->_helper->getHelper('Redirector');
    }

    public function returnAction()
    {
        /* Faire quelquechose */

        // Redirige vers les archives de blog. Construit l'URL suivant
        // /blog/2006/4/24/42
        $this->_redirector->gotoRoute(
            array('year' => 2006, 'month' => 4, 'day' => 24, 'id' => 42),
            'blogArchive'
        );
    }
}]]>
            </programlisting>
        </example>
    </sect4>
</sect3>
