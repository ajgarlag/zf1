<sect1 id="zend.session.basicusage">

    <title>Usage basique</title>

    <para>
        Les instances <code>Zend_Session_Namespace</code> fournissent l'API primaire pour manipuler les données de session dans le Zend Framework. Les espaces de nommage sont utilisés pour isoler toutes les données de session, bien qu'un espace de nommage par défaut existe pour ceux qui veulent juste un endroit pour stocker toutes leurs données de session. <code>Zend_Session</code> utilise ext/session et sa superglobale spéciale <code>$_SESSION</code> comme méchanisme de stockage pour les données d'état de session. Bien que <code>$_SESSION</code> est toujours disponible dans l'espace global de PHP, les développeurs devraient s'abstenir d'accéder directement à lui, alors que <code>Zend_Session</code> et <code>Zend_Session_Namespace</code> fournissent le plus efficacement et solidement leur suite de fonctionnalités liées à session.
    </para>

    <sect2 id="zend.session.basicexamples">

        <title>Tutoriel d'exemples</title>

        <para>
            Si aucun espaces de nommage n'est spécifié lors de l'instanciation de Zend_Session, toutes les données sont stockées de manière transparente dans un espace de nommage appelé "<code>Default</code>". <code>Zend_Session</code> n'est pas prévu pour fonctionner directement sur le contenu des conteneurs des espaces de nommage. Au lieu de cela, nous utilisons <code>Zend_Session_Namespace</code>. L'exemple ci-dessous montre l'utilisation de cet espace de nommage par défaut, en montrant comment compter le nombre de fois qu'un utilisateur a vu une page sur le site web. Pour tester cet exemple, ajouter le code suivant à votre fichier d'amorçage ZF :
        </para>

        <example>
            <title>Compter le nombre de pages vues</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';

    $defaultNamespace = new Zend_Session_Namespace('Default');

    // Utiliser la méthode magique __isset() dans Zend_Session_Namespace:
    if (isset($defaultNamespace->numberOfPageRequests)) {
        $defaultNamespace->numberOfPageRequests++; // ceci s'incrémente à chaque chargement de page.
    } else {
        $defaultNamespace->numberOfPageRequests = 1; // première page
    }

    echo "Page demandée lors de cette session : ", $defaultNamespace->numberOfPageRequests;
?>]]></programlisting>
        </example>

        <para>
            L'un des nombreux avantages de Zend_Session_Namespace apparaît quand de multiples modules utilisent Zend_Session_Namespace et obtiennent une encapsulation pour leurs propres données de session. Zend_Session peut recevoir un paramètre facultatif $namespace dans son constructeur, ce qui permet aux autres composants, modules, et code spécifique d'être assuré que leurs données sont protégées par une cloison entre les zones de données utilisées par les autres composants, modules et code spécifique. Les espaces de nommage fournissent une manière efficace et populaire de protéger un sous-ensemble de données de session contre un changement accidentel. Les noms des espaces de nommage sont limités à des chaînes de caractères PHP non-vides qui ne commencent par un tiret-bas ("_"). De plus, seuls les composants coeur du Zend Framework devraient employer un nom d'espage de nommage commençant par "Zend_".
        </para>

        <example>
            <title>Nouvelle méthode : les espaces de nommage évitent les collisions</title>
<programlisting role="php">
<![CDATA[<?php
    // Dans le composant Zend_Auth
    require_once 'Zend/Session.php';
    $authNamespace = new Zend_Session_Namespace('Zend_Auth');
    $authNamespace->user = "monusername";

    // Dans un composant service web
    $webServiceNamespace = new Zend_Session_Namespace('Un_Service_Web');
    $webServiceNamespace->user = "monwebusername";
?>]]></programlisting>
        </example>

        <para>
            L'exemple ci-dessus réalise la même chose que celui ci-dessous, excepté que les objets de session ci-dessus préserve l'encapsulation des données de session dans leur espace de nommage respectif.
        </para>

        <example>
            <title>Ancienne méthode : accès aux sessions PHP</title>
<programlisting role="php">
<![CDATA[<?php
    $_SESSION['Zend_Auth']['user'] = "monusername";
    $_SESSION['Un_Service_Web']['user'] = "monebusername";
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.iteration">

        <title>Enumérer les espaces de nommage de session</title>

        <para>
            <code>Zend_Session_Namespace</code> fournit une <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">interface IteratorAggregate</ulink> complète, incluant le support de l'instruction <code>foreach</code> :
        </para>

        <example>
            <title>Enumeration des sessions</title>
<programlisting role="php">
<![CDATA[<?php
    // Zend_Session est énumérable
    require_once 'Zend/Session.php';
    $aNamespace = new Zend_Session_Namespace('un_namespace_avec_des_donnes_presentes');
    foreach ($aNamespace as $index => $valeur) {
        echo "aNamespace->$index = '$valeur';\n";
    }
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.accessors">

        <title>Accesseurs pour les espaces de nommage de session</title>

        <para>
            Les accesseurs usuels sont disponibles avec les méthodes magiques __set(), __unset(), __isset(), et __get(). Les méthodes magiques ne devraient pas être utilisées directement, excepté à l'intérieur d'une sous-classe de Zend_Session. Au lieu de cela, utilisez les opérateurs normaux pour appeler ces méthodes magiques, comme :
        </para>

        <example>
            <title>Accéder aux données de session</title>
<programlisting role="php">
<![CDATA[<?php
            $object->property = $valeur;
            echo (isset($object->property) ? 'set' : 'unset');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
