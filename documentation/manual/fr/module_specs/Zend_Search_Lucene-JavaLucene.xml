<sect1 id="zend.search.lucene.java-lucene">
    <title>Interopération avec Java Lucene</title>

    <sect2 id="zend.search.lucene.index-creation.file-formats">
        <title>Formats de fichier</title>
        <para>
           les fichiers d'index Zend_Search_Lucene sont compatible binairement avec une
           Lucene 1.4 et supérieur.
        </para>

        <para>
          Une description détaillée de ce format est disponible ici :
          <ulink url="http://lucene.apache.org/java/docs/fileformats.html"/>.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.index-directory">
        <title>Répertoire d'index</title>

        <para>
        Après la création de l'index, le dossier index contiendra plusieurs fichiers :
        </para>

        <itemizedlist>
            <listitem>
                <para>
                Le fichier <filename>segments</filename> est une liste des segments d'index.
                </para>
            </listitem>
            <listitem>
                <para>
                Les fichiers <filename>*.cfs</filename> contiennent les segments d'index.
                Note! Les index optimisés n'ont toujours qu'un seul segment.
                </para>
            </listitem>
            <listitem>
                <para>
                Le fichier <filename>deletable</filename> est une liste des fichiers qui ne sont
                plus utilisés par l'index, mais qui ne peuvent pas être supprimés.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.search.lucene.java-lucene.source-code">
        <title>Code source Java</title>
        <para>
            Le code Java ci dessous fournis un exemple de comment indexer un fichier en utilisant Java Lucene:
        </para>

        <programlisting role="java"><![CDATA[
/**
* Création d'un index :
*/
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.document.*;

import java.io.*

...

IndexWriter indexWriter = new IndexWriter("/donnees/mon_index",
                                          new SimpleAnalyzer(), true);

...

String filename = "/path/to/file-to-index.txt"
File f = new File(filename);

Document doc = new Document();
doc.add(Field.Text("path", filename));
doc.add(Field.Keyword("modified",DateField.timeToString(f.lastModified())));
doc.add(Field.Text("author", "unknown"));
FileInputStream is = new FileInputStream(f);
Reader reader = new BufferedReader(new InputStreamReader(is));
doc.add(Field.Text("contents", reader));

indexWriter.addDocument(doc);]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.java-lucene.jar">
        <title>Utiliser LuceneIndexCreation.jar</title>

        <para>
            Pour démarrer rapidement avec Zend_Search_Lucene, un fichier JAR (Java)
            a été crée pour générer un index depuis la ligne de commande.
            Pour plus d'informations sur les fichiers JAR, visitez:
            <ulink url="http://java.sun.com/docs/books/tutorial/jar/basics/index.html"/>.
        </para>

        <para>
            LuceneIndexCreation.jar lit les fichier texte et construit un index à partir d'eux. Utilisation:
        <programlisting role="java"><![CDATA[
    java -jar LuceneIndexCreation.jar [-c] [-s] <document_dir> <index_dir>
    -c   - force l'index à sensible à être sensible àla case
    -s   - stocke le contenu dans l'index
    ]]></programlisting>
            Cette commande analyse le répertoire <code>&lt;document_dir&gt;</code>, ainsi que tous ces sous répertoires, et génère un index Lucene.
            L'index est un jeu de fichiers qui seront stokés dans un répertoire séparé <code>&lt;index_dir&gt;</code>.
        </para>

        <para>
            Pour chaque document à indexer, LuceneIndexCreation crée un objet document avec trois champs:
            un champ <emphasis>contents</emphasis> qui contient le contenu (corps) du document,
            un champs <emphasis>modified</emphasis> qui contient la date de la dernière modification et
            le chemin complet ainsi que le nom du fichier dans le champ <emphasis>path</emphasis>.
        </para>

        <para>
            Si <option>-c</option> est specifié, alors l'index est sensible à la case.
            Sinon tous les termes sont convertit en miniscule avant d'être ajouté à l'index.
        </para>

        <para>
            Si <option>-s</option> est specifié, alors le contenu du document est stocké dans l'index
            et peut-être récupéré avec les champs <code>path</code> et <code>modified</code>.
        </para>

        <para>
            Sinon seul les champs <code>path</code> et <code>modified</code> sont stockés, et seul le champ <code>contents</code> est indexé.
            Dans ce cas le contenu du document peut-être récupéré dans sa source original en utlisant son path.
        </para>

        <para>
            Soyez prudent, utiliser l'option <option>-s</option> augmente la taille de l'index de presque 5 fois.
        </para>
    </sect2>

</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
