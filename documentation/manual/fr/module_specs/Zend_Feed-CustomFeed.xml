<sect1 id="zend.feed.custom-feed">
    <title>Classes personnalisées pour les flux et entrées</title>

    <para>
                Pour finir, vous pouvez étendre les classes de <code>Zend_Feed</code> si
vous souhaitez créer votre propre format ou implémenter des gâteries
comme par exemple la gestion automatique des éléments situés dans un
espace de noms personnalisé.
    </para>

    <para>
         Voici un exemple d'entrée Atom personnalisée qui gère son propre espace
        de noms <code>monen</code>. Notez aussi que la classe se charge
        d'appeler la méthode <code>registerNamespace()</code> pour que
        l'utilisateur n'ait au final pas du tout à se soucier des espaces de
        noms.
    </para>

    <example id="zend.feed.custom-feed.example.extending">
        <title>Étendre la classe représentant les entrées Atom pour ajouter la gestion d'un espace de noms personnalisé</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * La classe personnalisée connaît automatiquement l'URI du flux (qui est
 * optionnelle) et elle peut ajouter automatiquement des espaces de noms
 * supplémentaires.
 */
class MonEntree extends Zend_Feed_Entry_Atom
{

    public function __construct($uri = 'http://www.exemple.com/monflux/', $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('monen', 'http://www.exemple.com/monen/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'monPrenom':
                // On traduit monPrenom en monen:prenom
                return parent::__get('monen:prenom');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $valeur)
    {
        switch ($var) {
            case 'monPrenom':
                // On traduit monPrenom en monen:prenom
                parent::__set('monen:prenom', $valeur);
                break;

            default:
                parent::__set($var, $valeur);
        }
    }

}

?>]]>   </programlisting>
        <para>
            Puis pour utiliser cette classe, instanciez-la directement et définissez la propriété <code>monPrenom</code> :
            <programlisting role="php"><![CDATA[
<?php

$entree = new MonEntree();
$entree->monPrenom = 'Martin';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->