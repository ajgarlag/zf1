<sect1 id="zend.search.lucene.advanced">
    <title>Utilisation avancée</title>

    <sect2 id="zend.search.lucene.advanced.static">
        <title>Utiliser l'index en tant que propriété statique</title>

        <para>
            L'objet <code>Zend_Search_Lucene</code> utilise un destructeur d'objet pour valider les changements et vider les ressources.
        </para>

        <para>
            Il stocke les documents ajoutés dans la mémoire et décharge le nouveau segment d'index sur le disque selon le paramètre <code>MaxBufferedDocs</code>.
        </para>

        <para>
            Si la limite <code>MaxBufferedDocs</code> n'est pas atteinte alors il y a quelques documents "unsaved" (non-sauvegardé) qui sont sauvegardés en tant que nouveau segment dans le destructeur d'objet. Le procédé d'auto-optimisation de l'index est appelé si besoin selon des paramètres de <code>MaxBufferedDocs</code>, <code>MaxMergeDocs</code> et <code>MergeFactor</code> parameters.
        </para>

        <para>
            Les propriétés statiques de l'objet (voir ci-dessous) sont détruites <emphasis>après</emphasis> la "dernière ligne du script exécuté".

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('chemin/vers/index');
    }
}

Searcher::initIndex();
?>]]></programlisting>
        </para>

        <para>
            Néanmoins, le destructeur d'objet pour les propriétés statiques est correctement appelé et a la possibilité de faire tout ce qu'il doit faire.
        </para>

        <para>
            Le problème potentiel est le traitement d'exceptions. Les exceptions levées par les destructeurs d'objets statiques n'ont pas de contexte, parce que l'exécution est réalisée "après la fin de script".
        </para>

        <para>
             Vous obtiendrez le message d'erreur "Fatal error: Exception thrown without a stack frame in Unknown on line 0" au lieu de la description d'exception pour de tels cas.
        </para>

        <para>
            <code>Zend_Search_Lucene</code> donne la possibilité d'apréhender ce problème avec la méthode <code>commit()</code>. Elle sauve tous les changements non-sauvegardés et libère la mémoire utilisée pour stocker de nouveaux segments. Vous êtes libre d'employer la méthode <code>commit()</code> n'importe quand ou plusieurs fois pendant l'exécution de script. Vous pouvez encore employer l'objet <code>Zend_Search_Lucene</code> pour rechercher, ajouter ou supprimer un document après l'opération <code>commit()</code>. Mais <code>commit()</code> donne la garantie, que s'il n'y a aucun document s'ajoutant ou supprimant après que l'appel <code>commit()</code>, alors le destructeur de <code>Zend_Search_Lucene</code> n'a rien à faire et ne lève aucune exception :

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }

    ...

    public static function commit() {
        self::$_index->commit();
    }
}

Searcher::initIndex();

...

// Script shutdown routine
...
Searcher::commit();
...
?>]]></programlisting>
        </para>
    </sect2>

</sect1>
