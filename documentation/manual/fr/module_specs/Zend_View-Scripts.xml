<sect1 id="zend.view.scripts">

    <title>Scripts de vue</title>

    <para>
        une fois que le contrôleur a assigné les variables et appelé <code>render()</code>, <code>Zend_View</code> inclus le script de vue requis, et l'exécute &quot;à l'intérieur&quot; de la portée de l'instance <code>Zend_View</code>. Donc dans vos scripts de vue, les références à $this-> pointent en fait sur l'instance <code>Zend_View</code> elle-même.
    </para>

    <para>
        Les variables assignées à la vue depuis le contrôleur lui sont référées comme des propriétés de l'instance. Par exemple, si le contrôleur a assigné une variable &quot;quelque-chose&quot;, vous vous référerez à cette variable par <code>$this->quelque-chose</code> dans le script de vue. (Cela vous permet de garder une trace pour savoir quelles valeurs ont été assignées au script, et lesquelles sont internes au script lui même.)
    </para>

    <para>
        Pour rappel, voici l'exemple de script issu de l'introduction de ce chapitre sur <code>Zend_View</code>.
    </para>

    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>

    <!-- La table des livres -->
    <table>
        <tr>
            <th>Auteur</th>
            <th>Titre</th>
        </tr>

        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['auteur']) ?></td>
            <td><?php echo $this->escape($val['titre']) ?></td>
        </tr>
        <?php endforeach; ?>

    </table>

<?php else: ?>

    <p>Aucun livre à afficher</p>

<?php endif; ?>]]>
    </programlisting>

    <sect2 id="zend.view.scripts.escaping">

        <title>Echapper la sortie</title>

        <para>
            Une des tâches les plus importantes à effectuer dans un script de vue est de s'assurer que la sortie est correctement échappé ; de plus ceci permet d'éviter les attaques de type cross-site scripting (XSS). A moins que vous n'utilisiez une fonction, une méthode , ou une aide qui gère l'échappement, vous devriez toujours échapper les variables lors de l'affichage.
        </para>

        <para>
            <code>Zend_View</code> a une méthode appelée <code>escape()</code> qui se charge de l'échappement.
        </para>

        <programlisting role="php"><![CDATA[<?php
// mauvaise pratique d'affichage
echo $this->variable;

// bonne pratique d'affichage
echo $this->escape($this->variable);]]>
	    </programlisting>

        <para>
            Par défaut, la méthode <code>escape()</code> utilise la fonction PHP htmlspecialchar() pour l'échappement. Cependant, en fonction de votre environnement, vous souhaitez peut-être un échappement différent. Utilisez la méthode <code>setEscape()</code> au niveau du contrôleur pour dire à <code>Zend_View</code> quelle méthode de rappel elle doit utiliser.
        </para>

        <programlisting role="php"><![CDATA[<?php
// créé une instance Zend_View
$view = new Zend_View();

// spécifie qu'il faut utiliser htmlentities comme rappel d'échappement
$view->setEscape('htmlentities');

// ou spécifie qu'il faut utiliser une méthode statique comme rappel d'échapement
$view->setEscape(array('SomeClass', 'methodName'));

// ou alors une méthode d'instance
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// et ensuite effectue le rendu de la vue
echo $view->render(...);]]>
	    </programlisting>

        <para>
            La fonction ou méthode de rappel doit prendre la valeur à échapper dans le premier paramètre, et tout les autres paramètres devraient être optionnels.
        </para>

    </sect2>

    <sect2 id="zend.view.scripts.templates">

        <title>Utiliser des systèmes de gabarit (template) alternatifs</title>


        <para>
            Bien que PHP lui-même un moteur de gabarit puissant, beaucoup de développeurs pensent que c'est beaucoup trop puissant ou complexe pour les graphistes/intégrateurs et veulenbt utiliser un moteur de template alternatif. Zend_View fournit deux méchanismes pour faire cela, le premier au travers les scripts de vues, le second en implémentant Zend_View_Interface.
        </para>

        <sect3 id="zend.view.scripts.templates.scripts">
            <title>Système de gabarit utilisant les scripts de vues</title>

            <para>
                Un script de vue peut être utilisé pour instancier et manipuler un objet de gabarit séparé, comme un gabarit de type PHPLIB. Le script de vue pour ce type d'activité pourrait ressembler à ceci :
            </para>

        <para>
        </para>

        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));

    foreach ($this->books as $key => $val) {
        $tpl->set_var('auteur', $this->escape($val['auteur']);
        $tpl->set_var('titre', $this->escape($val['titre']);
        $tpl->parse("livre", "eachbook", true);
    }

    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}]]>
	    </programlisting>

        <para>
            Et ceci pourrait être les fichiers de gabarits correspondants :
        </para>

        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Auteur</th>
        <th>Titre</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{auteur}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Aucun livre à afficher</p>]]>
		    </programlisting>

        </sect3>

        <sect3 id="zend.view.scripts.templates.interface">
            <title>Système de gabarit utilisant Zend_View_Interface</title>

            <para>
                Certains peuvent trouver plus facile de simplement fournir un moteur de gabarit compatible avec Zend_View. <code>Zend_View_Interface</code> définit l'interface de compatibilité minimale nécessaire :
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Retourne l'objet moteur de gabarit actuel
 */
public function getEngine();

/**
 * Affecte le dossier des scripts de gabarits
 */
public function setScriptPath($path);

/**
 * Méthode à surcharger pour affecter les variables des gabarits en tant que propriétés de l'objet
 */
public function __set($key, $value);
public function __get($key);
public function __isset($key);
public function __unset($key);

/**
 * Affectation manuelle de variable de gabarit, ou possibilité d'affecter des
 * variables en masse.
 */
public function assign($spec, $value = null);

/**
 * Efface toutes les variables du gabarit déjà affectées
 */
public function clearVars();

/**
 * Effectue le rendu du gabarit nommé $name
 */
public function render($name);]]>
		    </programlisting>

            <para>
                En utilisant cette interface, il devient relativement facile d'encapsuler un moteur de gabarit tiers comme une classe compatible Zend_View. Comme par exemple, le code suivant est une encapsulation potentielle de Smarty :
            </para>

            <programlisting role="php"><![CDATA[
require_once 'Zend/View/Interface.php';
require_once 'Smarty.class.php';

class Zend_View_Smarty implements Zend_View_Interface
{
    /**
     * Objet Smarty
     * @var Smarty
     */
    protected $_smarty;

    /**
     * Constructeur
     *
     * @param string $tmplPath
     * @param array $extraParams
     * @return void
     */
    public function __construct($tmplPath = null, $extraParams = array())
    {
        $this->_smarty = new Smarty;

        if (null !== $tmplPath) {
            $this->setScriptPath($tmplPath);
        }

        foreach ($extraParams as $key => $value) {
            $this->_smarty->$key = $value;
        }
    }

    /**
     * Retourne l'objet moteur de gabarit
     *
     * @return Smarty
     */
    public function getEngine()
    {
        return $this->_smarty;
    }

    /**
     * Affecte le dossier des scripts de gabarits
     *
     * @param string $path Le répertoire à affecter au path
     * @return void
     */
    public function setScriptPath($path)
    {
        if (is_readable($path)) {
            $this->_smarty->template_dir = $path;
            return;
        }

        throw new Exception('Répertoire fourni invalide');
    }

    /**
     * Affectation une variable au gabarit
     *
     * @param string $key Le nom de la variable
     * @param mixed $val La valeur de la variable
     * @return void
     */
    public function __set($key, $val)
    {
        $this->_smarty->assign($key, $val);
    }

    /**
     * Recherche une variable au gabarit
     *
     * @param string $key Le nom de la variable
     * @return mixed La valeur de la variable
     */
    public function __get($key)
    {
        return $this->_smarty->get_template_vars($key);
    }

    /**
     * Autorise le fonctionnement du test avec empty() and isset()
     *
     * @param string $key
     * @return boolean
     */
    public function __isset($key)
    {
        return (null !== $this->_smarty->get_template_vars($key));
    }

    /**
     * Autorise l'effacement de toutes les variables du gabarit
     *
     * @param string $key
     * @return void
     */
    public function __unset($key)
    {
        $this->_smarty->clear_assign($key);
    }

    /**
     * Affectation de variables au gabarit
     *
     * Autorise une affectation simple (une clé => une valeur) OU le passage d'un tableau (paire de clé => valeur) à affecter en masse
     *
     * @voir __set()
     * @param string|array $spec Le type d'affectation à utiliser (clé ou tableau de paires clé => valeur)
     * @param mixed $value (Optionel) Si vous assignez une variable nommée, utilisé ceci comme valeur
     * @return void
     */
    public function assign($spec, $value = null)
    {
        if (is_array($spec)) {
            $this->_smarty->assign($spec);
            return;
        }

        $this->_smarty->assign($spec, $value);
    }

    /**
     * Effacement de toutes les variables affectées
     *
     * Efface toutes les variables affectées à Zend_View via {@link assign()} ou
     * surcharge de propriété ({@link __get()}/{@link __set()}).
     *
     * @return void
     */
    public function clearVars()
    {
        $this->_smarty->clear_all_assign();
    }

    /**
     * Exécute le gabarit et retourne l'affichage
     *
     * @param string $name Le gabarit à éxécuter
     * @return string L'affichage
     */
    public function render($name)
    {
        return $this->_smarty->fetch($name);
    }
}]]>
		    </programlisting>

            <para>
                Dans cet exemple, vous instanciez la classe <code>Zend_View_Smarty</code> au lieu de <code>Zend_View</code>, et vous l'utilisez de la même façon :
            </para>

            <programlisting role="php"><![CDATA[
$view = new Zend_View_Smarty();
$view->setScriptPath('/chemin/vers/gabarits');
$view->book = 'Zend PHP 5 Certification Study Guide';
$view->author = 'Davey Shafik and Ben Ramsey'
$rendered = $view->render('bookinfo.tpl');]]>
		    </programlisting>

        </sect3>

    </sect2>

</sect1>