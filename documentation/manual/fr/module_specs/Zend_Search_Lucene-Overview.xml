<sect1 id="zend.search.lucene.overview">
    <title>Vue d'ensemble</title>

    <sect2 id="zend.search.lucene.introduction">
        <title>Introduction</title>
        <para>
            Zend_Search_Lucene est un moteur de recherche textuel général totalement écrit en PHP 5.
            Bien qu'il stocke ses index dans le système de fichiers, et ne nécessite pas de base de données,
            il peut ajouter des capacités de recherche sur presque tous les sites PHP utilisant une base de données.

            Zend_Search_Lucene supporte les fonctionnalités suivantes :
            <itemizedlist>
                <listitem>
                    <para>Recherche par pertinence - les meilleurs résultats sont retournés en premier</para>
                </listitem>
                <listitem>
                    <para>
                       Beaucoup de type de puissantes recherche :
                         recherche sur des phrases,
                         recherche joker,
                         recherche de proximité,
                         recherche par intervalle
                         et bien plus
                        <footnote>
                           <para>
                             Seules les recherches par mots ou groupes de mots sont supportées pour le moment.
                           </para>
                        </footnote>
                    </para>
                </listitem>
                <listitem>
                    <para>Recherche par champs spécifiques (e.i., titre, auteur, contenu)</para>
                </listitem>
            </itemizedlist>

            Zend_Search_Lucene est dérivé du projet Apache Lucene.
            Pour plus d'informations vous pouvez visiter <ulink url="http://lucene.apache.org/java/docs/"/>.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.documents-and-fields">
        <title>Objets document et champ</title>
            <para>
                ZSearch considère les documents comme des sujets atomiques pour l'indexation.
                Un document est divisé en champs nommés, et les champs ont du contenu dans lequel on peut rechercher.
            </para>

            <para>
                Un document est representé par l'objet Zend_Search_Lucene_Document,
                et cet objet contient des objets Zend_Search_Lucene_Field qui représentent les champs.
            </para>

            <para>
                Il est important de noter qu'aucune sorte d'information peut être ajoutée à l'index.
                Les informations spécifiques à l'application, ou les métadonnées peuvent être stockées
                dans les champs du document, et retrouvées ensuite pendant la recherche.
            </para>

            <para>
                Il est de votre responsabilité de contrôler l'indexeur.
                Cela signifie que les données peuvent-être indexées à partir de n'importe
                quelle source accessible par votre application.
                Cela peut-être aussi bien le système de fichiers, qu'une base de données,
                qu'un formulaire HTML, etc.
            </para>

            <para>
                La classe <code>Zend_Search_Lucene_Field</code> fournit plusieurs méthodes statiques pour créer
                des champs de différentes caractéristiques :
            </para>

            <programlisting role="php"><![CDATA[
            <?php
            $doc = new Zend_Search_Lucene_Document();

            // Field is not tokenized, but is indexed and stored within the index.
            // Stored fields can be retrived from the index.
            $doc->addField(Zend_Search_Lucene_Field::Keyword('doctype',
                                                             'autogenerated'));

            // Field is not tokenized nor indexed, but is stored in the index.
            $doc->addField(Zend_Search_Lucene_Field::UnIndexed('created',
                                                               time()));

            // Binary String valued Field that is not tokenized nor indexed,
            // but is stored in the index.
            $doc->addField(Zend_Search_Lucene_Field::Binary('icon',
                                                            $iconData));

            // Field is tokenized and indexed, and is stored in the index.
            $doc->addField(Zend_Search_Lucene_Field::Text('annotation',
                                                          'Document annotation text'));

            // Field is tokenized and indexed, but that is not stored in the index.
            $doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                              'My document content'));

            ?>
            ]]></programlisting>

            <para>
                Vous pouvez donner le nom que vous voulez aux champs.
                Le nom &quot;contents&quot; est utilisé par défaut.
                C'est une bonne idée de placer les principales données de votre document dans le champ ainsi nommé.
            </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.understanding-field-types">
        <title>Comprendre les types de champs</title>
        <itemizedlist>
            <listitem>
                <para>
                    Les champs <code>Keyword</code> sont stockés et indexés, c'est à dire qu'il est possible de rechercher
                    dedans, aussi bien que les afficher dans les résultats de recherche.
                    Ils ne sont pas séparés en mots par un processus de tokenization.
                    Les champs énumérés d'une base de données se traduisent bien en champs <code>Keyword</code>
                    pour Zend_Search_Lucene.
                </para>
            </listitem>
            <listitem>
                <para>
                    Les champs <code>UnIndexed</code> n'offrent pas de possibilité de recherche, mais sont retournés
                    avec les résultats de recherche.
                    Les timestamps et clés primaires de base de données, chemins du système de fichiers, et tout autre
                    identifiant externe sont de bons candidats pour des champs <code>UnIndexed</code>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Les champs <code>Binary</code> ne sont ni tokenizés, ni indexés, mais sont stockés pour être récupérés
                    avec les résultats de recherche.
                    Ils peuvent être utilisés pour stocker toute donnée encodée comme chaine binaire, comme par exemple
                    des icônes.
                </para>
            </listitem>
            <listitem>
                <para>
                    Les champs <code>Text</code> sont stockés, indexés et tokenizés. Les champs <code>Text</code> sont
                    bien appropriés pour stocker des informations comme des sujets et titres qui doivent être recherchables
                    aussi bien que retournés avec les résultats de recherche.
                </para>
            </listitem>
            <listitem>
                <para>
                    Les champs <code>UnStored</code> sont tokenizés et indexés, mais pas stockés dans l'index.
                    Les grandes quantités de texte sont mieux indexées en utilisant ce type de champ. Stocker
                    de données crée un index plus grand sur le disque, donc si vous avez besoin d'effectuer une
                    recherche, mais de ne pas ré-afficher les données, utiliser le champ <code>UnStored</code>.
                    Les champs <code>UnStored</code> sont pratiques lorsque l'on souhaite utiliser un index Zend_Search_Lucene
                    en combinaison avec une base de données relationnelle. Vous pouvez indexer de gros champs de fichiers dédiés
                    à la recherche avec les champs <code>UnStored</code>, et les récupérer depuis votre base de données en utilisant
                    un champ séparé comme identifiant.
               </para>

                <table>
                    <title>Types de Zend_Search_Lucene_Field</title>
                    <tgroup cols="4">
                        <thead>
                            <row>
                                <entry>Type de champ</entry>
                                <entry>Stocké</entry>
                                <entry>Indexé</entry>
                                <entry>Tokenizé</entry>
                                <entry>Binaire</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>Keyword</entry>
                                <entry>Oui</entry>
                                <entry>Oui</entry>
                                <entry>Non</entry>
                                <entry>Non</entry>
                            </row>
                            <row>
                                <entry>UnIndexed</entry>
                                <entry>Oui</entry>
                                <entry>Non</entry>
                                <entry>Non</entry>
                                <entry>Non</entry>
                            </row>
                            <row>
                                <entry>Binary</entry>
                                <entry>Oui</entry>
                                <entry>Non</entry>
                                <entry>Non</entry>
                                <entry>Oui</entry>
                            </row>
                            <row>
                                <entry>Text</entry>
                                <entry>Oui</entry>
                                <entry>Oui</entry>
                                <entry>Oui</entry>
                                <entry>Non</entry>
                            </row>
                            <row>
                                <entry>UnStored</entry>
                                <entry>Non</entry>
                                <entry>Oui</entry>
                                <entry>Oui</entry>
                                <entry>Non</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
           </listitem>
       </itemizedlist>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
