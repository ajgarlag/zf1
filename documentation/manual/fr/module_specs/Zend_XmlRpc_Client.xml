<sect1 id="zend.xmlrpc.client">
    <title>Zend_XmlRpc_Client</title>
    <sect2 id="zend.xmlrpc.client.introduction">
        <title>Introduction</title>
        <para>
            L'utilisation de <code>Zend_XmlRpc_Client</code> est très similaire à celle de l'objet <code>SoapClient</code> (<ulink url="http://www.php.net/soap">extention SOAP</ulink>).
            Vous pouvez simplement appeler les preocédures du service XML-RPC comme méthodes de <code>Zend_XmlRpc_Client</code>.
            Spécifiez l'adresse complète du service dans le constructeur de <code>Zend_XmlRpc_Client</code>.
        </para>
        <example>
            <title>Une requête XML-RPC de base</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connexion au serveur framework.zend.com, et affichage d'un tableau
 * décrivant les méthodes disponibles.
 */
require_once 'Zend/XmlRpc/Client.php';

$server = new Zend_XmlRpc_Client('http://framework.zend.com/xmlrpc');

print_r( $server->system->listMethods() );]]>
		    </programlisting>
        </example>
        <para>
            <note>
                <title>Object chaining</title>
                <para>
                    <code>Zend_XmlRpc_Client</code> tente de rendre les méthodes distantes le plus ressemblantes possible aux méthode natives.
                    Si une méthode contient des espaces de noms, comme <code>system.listMethods()</code> ci-dessus, l'appel est fait en utilisant
                    une chaîne d'objet dans PHP : <code>$server->system->listMethods()</code>.
                </para>
            </note>
        </para>
    </sect2>
    <sect2 id="zend.xmlrpc.client.parameters">
        <title>Utiliser des paramètres</title>
        <para>
            Des procédures du service XML-RPC requiert des paramètres, les paramètres nécessaires sont passés comme des paramètres de la méthode <code>Zend_XmlRpc_Client</code>.
            Les paramètres d'une procédure XML-RPC doit être spécifique à un type XML-RPC.
            Les paramètres peuvent être passés par 2 façons : en tant que natifs PHP ou en tant qu'objet <code>Zend_XmlRpc_Value</code> représentants des types
            XML-RPC.
        </para>
        <sect3 id='zend.xmlrpc.client.parameters.php_native'>
            <title>Passer des variables natives PHP en paramètre</title>
            <para>
                Les paramètres passés comme des variables PHP natives, c'est à dire une chaîne, un flottan, un bouléen, un tableau ou un objet.
                Dans ce cas, chaque natif PHP, sera auto-déclaré et convertit dans un des types XML-RPC conformément à cette table :
            </para>
            <table>
                <title>Convertion des valeurs PHP natives en types XML-RPC</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Type natif PHP</entry>
                            <entry>XML-RPC type</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>entier</entry>
                            <entry>int</entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry>double</entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry>boolean</entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>tableau</entry>
                            <entry>tableau</entry>
                        </row>
                        <row>
                            <entry>tableau associatif</entry>
                            <entry>structure</entry>
                        </row>
                        <row>
                            <entry>objet</entry>
                            <entry>tableau</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 paramètres sont passés dans cette procédure
 *  Le premier paramètre est une chaîne qui va être convertie automatiquement dans un type XML-RPC
 *  Le second paramètres et un tableau associatif qui va être converti dans une structure XML-RPC
 */

$p1 = 'parameter 1';
$p2 = array('name' => 'Joe', 'age' => 30);

$service->serviceProcedure($p1, $p2);
...]]>
		    </programlisting>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.xmlrpc_value'>
            <title>Passer des objets <code>Zend_XmlRpc_Value</code> comme paramètres</title>
            <para>
                Les paramètres passés en tant qu'objet <code>Zend_XmlRpc_Value</code>.
                Vous pouvez créer une des instances <code>Zend_XmlRpc_Value</code> pour spécifier le type XML-RPC exact de vos paramètres.
                Les principales raisons pour spécifier explicitement les types XML-RPC peuvent être :
                <itemizedlist>
                    <listitem>
                        <para>
                            Lorsque vous voulez être certain que le type correct de paramètre est passé à la procédure
                            (i.e la procédure requiert un entier et vous souhaitez recevoir le paramètres comme une chaîne issue de $_GET).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Lorsque la procédure requiert un type base64 ou dateTime.iso8601 (ce qui n'existe pas en tant que type PHP natif).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Lorsque l'auto convetion peut échouer
                            (i.e vous voulez passer une structure XML-RPC vide comme paramètre, une structure vide est représentée comme un tableau PHP vide, mais
                            si vous lui donnez un tableau vide comme paramètre, il sera automatiquement converti en un tableau XMl-RPC, vu que ce n'est pas
                            un tableau associatif).
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Il y a 2 façons de créer un objet <code>Zend_XmlRpc_Value</code> :
                la façon explicite (appel de son constructeur) ou l'utilisation de la fonction statique <code>Zend_XmlRpc_Value::getXmlRpcValue()</code>
                avec la constante de type XML-RPC voulue.
            </para>
            <table>
                <title>L'objet Zend_XmlRpc_Value représentant les types XML-RPC</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>type XML-RPC</entry>
                            <entry>Constancte <code>Zend_XmlRpc_Value</code> correspondante</entry>
                            <entry>objet <code>Zend_XmlRpc_Value</code></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>int</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_INTEGER</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Integer</code></entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DOUBLE</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Double</code></entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BOOLEAN</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Boolean</code></entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRING</code></entry>
                            <entry><code>Zend_XmlRpc_Value_String</code></entry>
                        </row>
                        <row>
                            <entry>base64</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Base64</code></entry>
                        </row>
                        <row>
                            <entry>dateTime.iso8601</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DATETIME</code></entry>
                            <entry><code>Zend_XmlRpc_Value_DateTime</code></entry>
                        </row>
                        <row>
                            <entry>array</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_ARRAY</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Array</code></entry>
                        </row>
                        <row>
                            <entry>struct</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRUCT</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Struct</code></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 paramètres sont passés dans cette procédure
 *  Le premier paramètre est un type XML-RPC base64, créé en utilisant la fonction statique Zend_XmlRpc_Value::getXmlRpcValue().
 *  Le second paramètre est une structure XML-RPC créée explicitement
 */

$p1 = ZXmlRpcValue::getXmlRpcValue('chaîne encodée', Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64);
$p2 = new Zend_XmlRpc_Value_Struct(array('name' => 'Joe', 'age' => 30));

$service->serviceProcedure($p1, $p2);
...]]>
		    </programlisting>
            <para>
                <note>
                    <title>Automatic conversion</title>
                    <para>
                        La valeur du paramètre est quand même donnée dans une variable PHP, mais sera convertie dans le type spécifié, en utilisant les techniques de convertion de PHP.
                        (i.e si une chaine est donnée en tant que valeur à l'objet <code>Zend_XmlRpc_Value_Integer</code>, elle sera convertie en utilisant <code>(int)$value</code>).
                    </para>
                </note>
            </para>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.as_xml'>
            <title>Parser une chaîne XML dans un paramètre XML-RPC</title>
            <para>
                Cette méthode de passage de paramètre est utilisée dans le paquet <code>Zend_XmlRpc</code> et n'est pas recommendée.
            </para>
            <para>
                Si vous avez quand même besoin de cette méthode, vous devriez utiliser la fonction statique <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> pour
                parser une chaîne XML dans un objet <code>Zend_XmlRpc_Value</code> qui représent le type XML-RPC correspondant.
                La fonction <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> devrait recevoir 2 paramètres : la chaîne XML et la constante
                <code>Zend_XmlRpc_Value::XML_STRING</code>.
            </para>
        </sect3>
    </sect2>
    <sect2 id="zend.xmlrpc.client.wsdl">
        <title>Typage objet implicite des paramètres (Type hinting)</title>
        <para>
            La principale différence entre les services web XML-RPC et SOAP est le fichier WSDL. Le protocole SOAP has habituellement un fichier WSDL qui décrit
            l'interface du service web, conformément à cette interface, les clients SOAP savent quel est le type nécessaire du paramètre qui doit être envoyé
            au serveur, et quelle est sa valeur de retour.
            Sans le fichier WSDL, l'utilisateur risque d'avoir un problème pour connaitre ces types.
        </para>
        <para>
            La façon dont cela a été résolu dans le protocole XML-RPC est avec une procédure spéciale du service appelée <code>system.methodSignature</code>.
            Cette procédure prend un nom de procédure en paramètre, et retourne sa signature, la signature est le type de paramètre nécéssaire, et le
            type de la valeur de retour de cette procédure.
        </para>
        <note>
            <title>Support of methodSignature</title>
            <para>
                Tout les serveurs XML-PRC ne supportenant pas la procédure spéciale <code>system.methodSignature</code>, les serveurs qui ne le supporte pas ne peuvent
                pas supporter le type hinting.
            </para>
        </note>
        <para>
            <code>Zend_XmlRpc_Client</code> implémente une sorte de fichier 'WSDL' pour un serveur XML-RPC en utilisant la procédure <code>system.methodSignature</code>.
            Si besoin est, <code>Zend_XmlRpc_Client</code> va demander une liste de toutes les procédures d'un serveur XML-RPC, toutes leurs signatures, et va conserver
            ses données dans un fichier XML (similaire au fichier WSDL de SOAP).
            Lorsque vous utiliser de nouveau ce serveur XMl-RPC, l'utilisateur peut fournir ce fichier XML et <code>Zend_XmlRpc_Client</code> va typer implicitement
            les paramètres pour la procédure nécessaire, conformément à leurs signatures.
        </para>
        <para>
            Le fichier des signatures des procédure XML est créé en appelant la fonction <code>Zend_XmlRpc_Client::__getMethodsXml()</code>
            (la fonction retourne une chaîne XML contenant toutes les données des signatures)
            Pour définir un fichier XML de signature existant, l'utilisateur peut passer les données XML dans un paramètre du constructeur <code>Zend_XmlRpc_Client</code>
            ou en appelant la fonction <code>Zend_XmlRpc_Client::__setMethodsXml()</code>.
        </para>
        <example>
            <title>Appeler un service XML-RPC avec le typage objet implicite (Type hinting)</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connexion à un serveur XML-RPC, et enregistrement du fichier de ses signatures (l'équivalent du fichier WSDL de SOAP)
 */
require_once 'Zend/XmlRpc/Client.php';

$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc');

file_put_contents('/tmp/xmlrpc-signatures/example.xml', $service->__getMethodsXml());

/*
  L'objet $service contient toutes les signatures du server XML-RPC,
  lorsque serviceProcedure est appelé, son paramètre ($param) est converti
  dans le type nécessaire, conformément à la signature de la procédure.
*/
$service->serviceProcedure($param);]]>
            </programlisting>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connexion à un serveur XML-RPC, en utilisant un fichier de signature existant,
 * vérification que le type des paramètres passés à la procédure sont bien du type nécessaire.
 */
require_once 'Zend/XmlRpc/Client.php';

$signature_file_xml = file_get_contents('/tmp/xmlrpc-signatures/example.xml');
$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc', 'namespace', $signature_file_xml);

/*
  L'objet $service contient toutes les signatures du server XML-RPC,
  lorsque serviceProcedure est appelé, son paramètre ($param) est converti
  dans le type nécessaire, conformément à la signature de la procédure.
*/
$service->serviceProcedure($param);]]>
		    </programlisting>
        </example>
    </sect2>
    <sect2 id="zend.xmlrpc.client.response">
        <title>Récupérer la réponse</title>
        <para>
            La préocédure XMl-RPC retourne une valeur dans un type XMl-RPC.
            La méthode <code>Zend_XmlRpc_Client</code> qui apelle cette procédure XMl-RPC retourne un type natif PHP, qui a été converti à partir
            du type XML-RPC retourné.
        </para>
        <para>
            Vous pouvez utiliser la fonction <code>Zend_XmlRpc_Client::__getResponse()</code>  pour récupérer la valeur de retour de la procédure voulue.
            La fonction <code>__getResponse()</code> reçoit un paramètre qui indique le type de la valeur de retour.
            Les options sont :
            <itemizedlist>
                <listitem>
                    <para>
                        <code>Zend_XmlRpc_Client::RESPONSE_PHP_NATIVE</code> - Retourne la valeur de retour de la procédure en tant que type natif PHP
                        (convertion d'un type XML-RPC dans un type PHP).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_XmlRpc_Client::RESPONSE_XML_STRING</code> - Retourne la représentation sous forme de chaîne XML de la réponse XMl-RPC.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_XmlRpc_Client::RESPONSE_ZXMLRPC_OBJECT</code> - Retourne un objet <code>Zend_XmlRpc_Value</code> qui représente le type
                        XML-RPC retourné.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <programlisting role="php"><![CDATA[...
$service->serviceProcedure();

$response = $service->__getResponse();
// $response est la variable PHP convertie depuis la valeur de retour XML-RPC

$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_XML_STRING);
// $response est une chaîne XML représentant la valeur de retour de la procédure

$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_ZXMLRPC_OBJECT);
// $response est une instance Zend_XmlRpc_Value représentant le type XML-RPC de la valeur retournée
...]]>
        </programlisting>
    </sect2>
</sect1>