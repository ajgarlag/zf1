<sect1 id="zend.session.advancedusage">

    <title>Usage avancée</title>

    <para>
        Même si les exemples de l'usage basique sont une manière parfaitement acceptable d'utiliser les sessions dans le Zend Framework, il existe de bonnes pratiques à considérer. Prenons <link linkend="zend.auth.introduction.using">l'exemple de <code>Zend_Auth</code></link> qui utilise de manière transparente Zend_Session_Namespace pour rendre des informations d'authentification persistantes. Cet exemple montre une approche rapide et facile pour intégrer Zend_Session_Namespace et Zend_Auth.
    </para>

    <sect2 id="zend.session.startingasession">

        <title>Démarrer une session</title>

        <para>
            Si vous voulez que toutes les requêtes aient une session et utilise les sessions du Zend Framework, alors démarrez la session dans votre fichier d'amorçage :
        </para>

        <example>
            <title>Démarrer la session globale</title>
<programlisting role="php">
<![CDATA[<?php
...
require_once 'Zend/Session.php';
Zend_Session::start();
...
?>]]></programlisting>
        </example>

        <para>
            En démarrant la session dans votre fichier d'amorçage, vous empêcher la possibilité de démarrer votre session après l'envoi d'entêtes à votre navigateur, ce qui entraîne la levée d'une exception, et peut être une page cassée pour les visiteurs de votre site. Divers usages avancés nécessitent premièrement <code>Zend_Session::start()</code>. (D'autant plus sur les utilisations avancées suivantes).
        </para>

        <para>
            Il existe quatre manières différentes pour démarrer une session, quand on utilise Zend_Session. Deux sont mauvaises.
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    1. Mauvaise : ne pas régler session.auto_start de PHP dans le php.ini ou dans un .htaccess (http://www.php.net/manual/fr/ref.session.php#ini.session.auto-start). Si vous n'avez pas la possibilité de désactiver ce réglage dans le php.ini, ou que vous utilisez mod_php (ou équivalent), et que le réglage est déjà activé dans le php.ini, alors ajoutez <code>php_value session.auto_start 0</code> à votrefichier .htaccess (habituellement votre dossier de démarrage HTML).
                </para>
            </listitem>
            <listitem>
                <para>
                    2. Mauvaise : n'utilisez pas la fonction <code><ulink url="http://www.php.net/session_start">session_start()</ulink></code> directement. Si vous utilisez directement <code>session_start()</code>, et que vous démarrez en utilisant Zend_Session_Namespace, une exception sera levée par <code>Zend_Session::start()</code> ("session has already been started"). Si vous appelez <code>session_start()</code>, après avoir utilisé Zend_Session_Namespace ou démarré explicitement <code>Zend_Session::start()</code>, une erreur de niveau E_NOTICE sera générée, et l'appel sera ingoré.
                </para>
            </listitem>
            <listitem>
                <para>
                    3. Correcte : utilisez <code>Zend_Session::start()</code>. Si vous voulez que toutes vos requêtes aient et utilisent les sessions, alors placez cette fonction le plus tôt et sans condtion dans votre fichier d'amorçage. Les sessions ont un coût. Si certaines requêtes nécessitent les sessions, mais que les autres n'en ont pas besoin, alors :
                </para>
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            Sans conditions, réglez l'option <code>strict</code> à true (voir <link linkend="zend.session.startingasession"><code>Zend_Session::setOptions()</code></link>) dans votre fichier d'amorçage universel.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Appelez <code>Zend_Session::start()</code>, uniquement pour les requêtes qui nécessitent l'usage des sessions, avant le premier appel de <code>new Zend_Session_Namespace()</code>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Utilisez <code>new Zend_Session_Namespace()</code> normalement, quand nécessaire, mais faites attention que <code>Zend_Session::start()</code> soit appelée auparavant.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    L'option <code>strict</code> empêche <code>new Zend_Session_Namespace()</code> d'automatiquement démarrer une session en utilisant <code>Zend_Session::start()</code>. Ainsi, cette option aide les développeurs d'application ZF universelles à imposer une décision de conception afin d'empêcher l'utilisation de sessions pour certaines requêtes, puisqu'une erreur sera levée en utilisant cette option et en instanciant Zend_Session_Namespace, avant un appel explicite de <code>Zend_Session::start()</code>. N'employez pas cette option dans le code de la librairie coeur du ZF, car seuls les développeurs universels peuvent faire ce choix de design. De la même manière, les développeurs de "librairies" doivent considérer avec précaution l'impact de l'utilisation de <code>Zend_Session::setOptions()</code> sur les utilisateurs de leur librairie de code, puisque cette option a des effets secondaires (de même que les options d'ext/session).
                </para>
            </listitem>
            <listitem>
                <para>
                    4. Correcte : utilisez simplement <code>new Zend_Session_Namespace()</code> quand nécessaire, et la session sera automatiquement démarrée avec Zend_Session. Ceci permet un usage extrêmement simple qui fonctionne dans la plupart des cas. Cependant, vous êtes responsable de vous assurer que le premier <code>new Zend_Session_Namespace()</code> intervient <emphasis role="strong">avant</emphasis> que toute sortie (c'est-à-dire <ulink url="http://www.php.net/headers_sent">entêtes HTTP</ulink>) ait été envoyée par PHP au client, si vous utilisez le réglage par défaut, sessions basées sur les cookies (fortement recommandé). Voir <xref linkend="zend.session.errors.headerssent" /> pour plus d'informations.
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.session.locking">

        <title>Vérrouiller les espaces de nommage de session</title>

        <para>
            Les espaces de nommage de session peuvent être vérrouillés, pour éviter tout risque d'altération des données dans cet espace. Utilisez <code>Zend_Session_Namespace's lock()</code> pour attribuer à un espace de nommage spécifique le mode lecture seule,<code>unLock()</code> pour attribuer le mode lecture / écriture, et <code>isLocked()</code> pour tester si un espace de nommage a été auparavant vérrouillé. Les vérrouillages sont transitoires et ne persistent pas d'une requête à l'autre. Vérrouiller un espace de nommage n'a pas d'effet sur les méthodes de réglages des objets stockés dans cet espace, mais empêche l'utilisation des méthodes de réglage de l'espace de nommage destiné à détruire ou à déplacer les objets stockés dans l'espace. De la même manière, vérrouiller les espaces de nommage Zend_Session_Namespace n'empêche pas l'accès direct au tableau de stockage <code>$_SESSION</code> (voir <ulink url="http://www.php.net/references">PHP references</ulink>).
        </para>

        <example>
            <title>Vérrouillage des espaces de nommage de session</title>
<programlisting role="php">
<![CDATA[<?php
    // supposons :
    $userProfileNamespace = new Zend_Session_Namespace('userProfileNamespace');

    // vérrouillons une session en lecture seule
    $userProfileNamespace->lock();

    // dévérrouillage si déjà vérrouillé
    if ($userProfileNamespace->isLocked()) {
        $userProfileNamespace->unLock();
    }
?>]]></programlisting>
        </example>

        <para>
            Il y a de nombreuses idées concernant la manière de gérer les Modèles dans l'architecture MVC pour le Web, incluant la création de modèles de présentation utilisés par les Vues. Parfois des données existantes, sous-parties de votre modèle de domaine ou pas, sont adéquates pour réaliser cette tâche. Pour empêcher les vues d'appliquer un quelconque processus logique qui altérerait ces données, il faut considérer un vérrouillage des espaces de nommage de session avant de permettre aux vues d'accéder à cette partie de votre modèle de "présentation".
        </para>

        <example>
            <title>Vérrouillage de session dans les vues</title>
<programlisting role="php">
<![CDATA[<?php
class FooModule_View extends Zend_View
{
    public function show($name)
    {
        if (!isset($this->mySessionNamespace)) {
            $this->mySessionNamespace = Zend::registry('FooModule');
        }

        if ($this->mySessionNamespace->isLocked()) {
            return parent::render($name);
        }

        $this->mySessionNamespace->lock();
        $return = parent::render($name);
        $this->mySessionNamespace->unLock();

        return $return;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.expiration">

        <title>Expiration d'un espace de nommage</title>

        <para>
            Des limites peuvent être affectées sur la durée de vie soit des espaces de nommage soit de clés individuelles dans cet espace. Les cas d'utilisation habituels incluent le passage d'une information temporaire entre requêtes, et la diminution de l'exposition à un potientiel risque de sécurité par la suppression de l'accès à des informations sensibles potentielles à une certaine heure après que l'authentification ait eu lieu. L'expiration peut être basée sur les secondes écoulées, ou basées sur le concept de "hops", où un "hop" apparaît à chaque requête successive qui active l'espace de nommage via au moins un <code>$space = new Zend_Session_Namespace('myspace');</code>.
        </para>

        <example>
            <title>Exemple d'expiration</title>
<programlisting role="php">
<![CDATA[<?php
$s = new Zend_Session_Namespace('expireAll');
$s->a = 'apple';
$s->p = 'pear';
$s->o = 'orange';

$s->setExpirationSeconds(5, 'a'); // expire seulement pour la clé "a" dans 5 secondes

// expiration de tout l'espace de nommage dans 5 "hops"
$s->setExpirationHops(5);

$s->setExpirationSeconds(60);
// L'espace de nommage "expireAll" sera marqué "expired"
// soit à la première requête reçue après 60 secondes,
// soit dans 5 hops,
// en fonction de ce qui arrivera en premier.
?>]]></programlisting>
        </example>

        <para>
            Quand vous travaillez avec des données de session expirées dans la requête courante, des précautions doivent être prises concernant leur utilisation. Bien que les données soient retournées par référence, modifier les données expirées ne les rendra pas persistantes dans la requête courante. Dans le but de remettre à zéro leur temps d'expiration, transférez les données dans des variables temporaires, utilisez l'espace de nommage pour les effacer, et ensuite réaffectez les clés appropriées de nouveau.
        </para>

    </sect2>

    <sect2 id="zend.session.controllers">

        <title>Encapsulation de session et Contrôleurs</title>

        <para>
            Les espaces de nommage peuvent aussi être utilisés pour séparer l'accès aux sessions par contrôleur afin de protéger les variables d'une quelconque contamination. Par exemple, le contrôleur "Zend_Auth" pourrait garder ces données de session séparé de tous les autres contrôleurs.
        </para>

        <example>
            <title>Sessions nommées par contrôleur avec expiration automatique</title>
<programlisting role="php">
<![CDATA[<?php
require_once 'Zend/Session.php';
// question view controller
$testSpace = new Zend_Session_Namespace('testSpace');
$testSpace->setExpirationSeconds(300, "accept_answer"); // expire seulement cette variable
$testSpace->accept_answer = true;

--

// answer processing controller
$testSpace = new Zend_Session_Namespace('testSpace');

if ($testSpace->accept_answer === true) {
    // dans le temps autorisé
}
else {
    // pas dans le temps autorisé
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.limitinginstances">

        <title>Limiter les instances de Zend_Session_Namespace à une par espace de nommage</title>

        <para>
            Nous recommendons l'utilisation du vérrouillage de session (voir ci-dessus) plutôt que la fonctionnalité suivante, qui place entre les mains du développeur le fardeau supplémentaire de gestion du transfert d'une quelconque instance de Zend_Session_Namespace vers toute fonction ou objet qui nécessite l'accès à cet espace de nommage.
        </para>

        <para>
            En construisant la première instance de Zend_Session_Namespace attaché à un espace de nommage spécifique, vous pouvez aussi demander à Zend_Session_Namespace de refuser toute autre instance pour cet espace. Ainsi, chaque tentative future de construction d'instance Zend_Session_Namespace ayant le même espace de nommage entrainera une erreur. Ce comportement est optionel, et n'est pas celui par défaut, mais reste disponible pour ceux qui préfèrent fournir une instance d'objet unique pour chaque espace de nommage. Ceci accroit la protection contre les changements par des composants qui ne peuvent pas modifier un espace de nommage particulier, car il n'y ont pas accès. Cependant la limitation d'un espace de nommage à une instance unique peut mener à plus de code ou à un code plus complexe, car il empêche l'accès facile à <code>$aNamespace = new Zend_Session_Namespace('aNamespace');</code>, après que la première instance ait été crée, comme montré dans l'exemple suivant :
        </para>

        <example>
            <title>Limitation à une instance unique</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $authSpaceAccessor1 = new Zend_Session_Namespace('Zend_Auth');
    $authSpaceAccessor2 = new Zend_Session_Namespace('Zend_Auth', Zend_Session_Namespace::SINGLE_INSTANCE);
    $authSpaceAccessor1->foo = 'bar';
    assert($authSpaceAccessor2->foo, 'bar'); // réussi
    doSomething($options, $authSpaceAccessor2); // fournit l'accesseur quand il est nécessaire
    .
    .
    .
    $aNamespaceObject = new Zend_Session_Namespace('Zend_Auth'); // ceci entraîne une erreur
?>]]></programlisting>
        </example>

        <para>
            Le second paramètre dans le constructeur ci-dessus informe Zend_Session_Namespace que toute future Zend_Session qui sera instanciée dans l'espace de nommage "Zend_Auth" sera refusée, et entrainera une exception. Puisqu'on ne permettra pas <code>new Zend_Session_Namespace('Zend_Auth')</code>, le développeur devient responsable du stockage de l'instance d'objet (<code>$authSpaceAccessor2</code> dans l'exemple ci-dessus) quelquepart, si l'accès à cet espace de noammge de session est nécessaire plus loin dans la même requête. Par exemple, un développeur peut stocker l'instance dans une variable statique, ou la fournir aux autres méthodes qui nécessiteraient un accès à cet espace de nommage. Le vérrouillage de session (voir ci-dessus) fournit une approche plus facile et moins onéreuse pour limiter l'accès aux espaces de nommage.
        </para>

    </sect2>

    <sect2 id="zend.session.modifyingarray">

        <title>Travailler avec des tableaux dans les espaces de nommage</title>

        <para>
            Modifier un tableau à l'intérieur d'un espace de nommage ne fonctionne pas. La solution la plus simple est de stocker les tableaux après que toutes les valeurs aient été réglées. <ulink url="http://framework.zend.com/issues/browse/ZF-800">ZF-800</ulink> documente un problème connu affectant de nombreuses applications PHP utilisant les méthodes magiques et les tableaux.
        </para>

        <example>
            <title>Problème connu avec les tableaux</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array();
    $sessionNamespace->array['testKey'] = 1; // ne fonctionne pas avant PHP 5.2.1
?>]]></programlisting>
        </example>

        <para>
            Si vous devez modifier un tableau après l'avoir affecté à une clé de l'espace de nommage de session, extrayez le tableau, modifiez le et sauvegardez le tableau de nouveau dans l'espace de stockage.
        </para>

        <example>
            <title>Tour d'horizon : extraire, modifier, sauvegarder</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array('arbre' => 'pomme');
    $tmp = $sessionNamespace->array;
    $tmp['fruit'] = 'peche';
    $sessionNamespace->array = $tmp;
?>]]></programlisting>
        </example>

        <para>
            Alternativement, stockez un tableau contenant une référence au tableau désiré, et ensuite accédez y indirectement.
        </para>

        <example>
            <title>Tour d'horizon : stocker un tableau contenant une réference</title>
<programlisting role="php">
<![CDATA[<?php
    $myNamespace = new Zend_Session_Namespace('monEspace');

    // fonctionne, même pour des version "cassées" de PHP
    $a = array(1,2,3);
    $myNamespace->someArray = array( & $a ) ;
    $a['foo'] = 'bar';
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.auth">

        <title>Utiliser les sessions avec l'authentification</title>

        <para>
            Si votre adaptateur d'authentification pour <code>Zend_Auth</code> retourne un résultat où votre identité autorisée est un objet (non recommandé), au lieu d'un tableau, alors assurez vous de charger votre définition de classe d'autorisation avant de démarrer la session. Au lieu de cela, nous recommandons de stocker les identificateurs d'autorisation calculés avec un adaptateur d'authentification dans un clé bien connue d'un espace de nommage de session. Par exemple, le comportement par défaut de <code>Zend_Auth</code> les place dans une clé "storage" de l'espace de nommage "Zend_Auth".
        </para>

        <para>
            Si vous demendez à <code>Zend_Auth</code> de ne pas faire persister les marques d'authentification dans les sessions, alors vous pouvez stocker manuellement l'identificateur d'autorisation dans un espace de nommage de session, à une position bien connue dans un espace de votre choix. Souvent, les applications ont des besoins spécifiques concernant l'endroit où stocker les crédits utilisés (si c'est le cas) et l'identité "autorisée". Les applications font souvent correspondre les identités d'authentification (par exemple username) au identités d'autorisation (par exemple un nombre entier) au moment de l'authentification, qui apparait dans la méthode <code>authenticate()</code> de l'adaptateur d'authentification Zend_Auth.
        </para>

        <example>
            <title>Exemple: accès simplifié aux identificateurs d'autorisation</title>
<programlisting role="php">
<![CDATA[<?php
    // requête de pré-authentification
    require_once 'Zend/Auth/Adapter/Digest.php';
    $adapter = new Zend_Auth_Adapter_Digest($filename, $realm, $username, $password);
    $result = $adapter->authenticate();
    require_once 'Zend/Session/Namespace.php';
    $namespace = new Zend_Session_Namespace('Zend_Auth');
    if ($result->isValid()) {
        $namespace->authorizationId = $result->getIdentity();
        $namespace->date = time();
    } else {
        $namespace->attempts++;
    }

    // requêtes suivantes
    require_once 'Zend/Session.php';
    Zend_Session::start();
    $namespace = new Zend_Session_Namespace('Zend_Auth');

    echo "Valide : ", (empty($namespace->authorizationId) ? 'Non' : 'Oui'), "\n"';
    echo "Autorisation / utilisateur Id: ", (empty($namespace->authorizationId)
        ? 'aucune' : print_r($namespace->authorizationId, true)), "\n"';
    echo "Essai d'authentification : ", (empty($namespace->attempts)
        ? '0' : $namespace->attempts), "\n"';
    echo "Authentifié le : ",
        (empty($namespace->date) ? 'Non' : date(DATE_ATOM, $namespace->date), "\n"';
?>]]></programlisting>
        </example>

        <para>
            Les identificateurs d'autorisation stockés côté client sont sujets à des vulnérabilités d'escalade de privilèges, si le serveur utilise et fait confiance à ces identificateurs, à moins que, par exemple, les identificateurs soient dupliqués côté serveur (par exemple dans la session) et contre vérifiés avec les identificateurs annoncés par le client pour la session en cours. Nous différencions les "identificateurs d'authentification" (par exemple username) et les "identificateurs d'autorisation" (par exemple utilisateur numéro 101 dans la table utilisateurs de la base de données).
        </para>

        <para>
            Le dernier n'est pas rare pour des raisons de performance, comme pour l'aide au choix dans un pool de serveurs de cache des informations de session, afin de résoudre les problèmes de poule-et-d'oeuf. Souvent les discussions s'ensuivent pour savoir s'il faut stocker les identificateurs d'autorisations réels dans un cookie, ou quelquechose de substitution qui permet la correspondance avec les identificateurs d'autorisation réels (ou session ou serveur(s) conservant la session utilisateur ou le profil, etc.), comme certains architectes de sécurité système qui ne souhaitent pas que les "vraies clés primaires de la base de données" s'échappent dans la nature. Ces architectes essayent et obtiennent un certain niveau de protection par cryptage dans le cas d'une vulnérabilité par injection SQL de leur système. Tout le monde n'utilise pas une stratégie d'auto-incrémentation pour les identificateurs d'autorisations.
        </para>

    </sect2>

    <sect2 id="zend.session.testing">

        <title>Utiliser les sessions avec les tests unitaires</title>

        <para>
            Le Zend Framework s'appuie sur PHPUnit pour faciliter ses propres tests. Beaucoup de développeurs étendent la suite des tests unitaires pour couvrir le code de leurs applications. L'exception "<emphasis role="strong">Zend_Session is currently marked as read-only</emphasis>" (NDT. : "Zend_Session est atuellement marquée en lecture seule") est levée lors de l'éxécution des tests unitaires, si un méthode d'écriture est utilisée après la clôture de la session. Cependant les tests unitaires employant Zend_Session requièrent une attention particulière, car la fermeture (<code>Zend_Session::writeClose()</code>), ou la destruction d'une session (<code>Zend_Session::destroy()</code>) empêche tout futur changement ou suppression de clés dans un Zend_Session_Namespace. Ce comportement est un résultat direct du méchanisme fondamental de l'extension session et des fonctions PHP <code>session_destroy()</code> et <code>session_write_close()</code>, qui n'a pas de méchanisme de marche arrière ("undo") pour faciliter le réglage/démontage avec les tests unitaires.
        </para>

        <para>
            Pour contourner ceci, regardez le test unitaire <code>testSetExpirationSeconds()</code> dans <code>tests/Zend/Session/SessionTest.php</code> et <code>SessionTestHelper.php</code>, qui utilise le code PHP <code>exec()</code> pour charger un processus séparé. Le nouveau processus simule plus précisement une seconde requête succesive du navigateur. Le processus séparé démarre avec une session "propre", comme n'importe quelle éxécution de PHP pour une requête web. Ainsi, tout changement fait à <code>$_SESSION[]</code> dans le processus appelant devient disponible dans le processus enfant, pourvu que le parent ait fermé la session avant d'utiliser <code>exec()</code>.
        </para>

        <example>
            <title>Utilisation de PHPUnit pour tester le code écrit avec Zend_Session*</title>
<programlisting role="php">
<![CDATA[<?php
        // tester setExpirationSeconds()
        require 'tests/Zend/Session/SessionTestHelper.php'; // voir aussi SessionTest.php dans trunk/
        $script = 'SessionTestHelper.php';
        $s = new Zend_Session_Namespace('espace');
        $s->a = 'abricot';
        $s->o = 'orange';
        $s->setExpirationSeconds(5);

        Zend_Session::regenerateId();
        $id = Zend_Session::getId();
        session_write_close(); // relâche la session donc le processus suivant peut l'utiliser
        sleep(4); // pas assez long pour les éléments expirent
        exec($script . "expireAll $id expireAll", $result);
        $result = $this->sortResult($result);
        $expect = ';a === abricot;o === orange;p === pear';
        $this->assertTrue($result === $expect,
            "iteration over default Zend_Session namespace failed; expecting result === '$expect', but got '$result'");

        sleep(2); // assez long pour que les éléments expirent (total de 6 secondes écoulées, avec une expiration de 5)
        exec($script . "expireAll $id expireAll", $result);
        $result = array_pop($result);
        $this->assertTrue($result === '',
            "iteration over default Zend_Session namespace failed; expecting result === '', but got '$result')");
        session_start(); // redémarre artificiellement une session suspendue

        // Ceci peut être découpé dans un test séparé, mais en réalité, si quoi que ce soit reste de la partie précédente
        // et contamine les tests suivants, alors c'est un bug dont nous voulons avoir des informations
        $s = new Zend_Session_Namespace('expireGuava');
        $s->setExpirationSeconds(5, 'g'); // maitenant essayons d'expirer seulement une clé dans l'espace
        $s->g = 'guava';
        $s->p = 'peach';
        $s->p = 'plum';

        session_write_close(); // relâche la session donc le processus suivant peut l'utiliser
        sleep(6); // pas assez long pour les éléments expirent
        exec($script . "expireAll $id expireGuava", $result);
        $result = $this->sortResult($result);
        session_start(); // redémarre artificiellement la session suspendue
        $this->assertTrue($result === ';p === plum',
            "iteration over named Zend_Session namespace failed (result=$result)");
?>]]></programlisting>
        </example>

    </sect2>

</sect1>