<sect1 id="zend.validate.introduction">

    <title>Introduction</title>

    <para>
        Le composant Zend_Validate fournit un ensemble de validateurs fréquemment utiles. Il fournit également un mécanisme simple de chaînage permettant d'appliquer de multiples validateurs à une donnée dans un ordre défini par l'utilisateur.
    </para>

    <sect2 id="zend.validate.introduction.definition">

        <title>Qu'est-ce qu'un validateur ?</title>

        <para>
            Un validateur examine ce qui lui est soumis suivant certaines règles et retourne un résultat booléen, si la donnée est conforme aux exigences. Si ce n'est pas le cas, un validateur peut de manière optionnelle fournir des informations concernant la ou les règle(s) non remplie(s).
        </para>

        <para>
            Par exemple, une application web peut réclamer qu'un identifiant comprennent entre six et douze caractères et ne contiennent que des caractères alphanumériques. Un validateur peut être utilisé pour s'assurer que les identifiants remplissent ces règles. Si un identifiant donné ne respecte pas l'une ou plusieurs de ces règles, il sera utile de savoir laquelle ou lesquelles en particulier.
        </para>

    </sect2>

    <sect2 id="zend.validate.introduction.using">

        <title>Utilisation basique des validateurs</title>

        <para>
            Avoir défini la validation de cette manière fournit la fondation de <code>Zend_Validate_Interface</code>, qui définit deux méthodes, <code>isValid()</code> et <code>getMessages()</code>. La méthode <code>isValid()</code> réalise la validation sur la valeur founie, en retournant <code>true</code> si et seulement si la valeur passe les critères de validation.
        </para>

        <para>
            Si <code>isValid()</code> retourne <code>false</code>, <code>getMessages()</code> retourne un tableau de messages expliquant la(es) raison(s) de l'échec de la validation.
        </para>

        <para>
            La méthode <code>getErrors()</code> retourne un tableau d'informations courtes qui identifient la(es) raison(s) de l'échec de la validation. Ces chaînes sont fournies pour identifier les erreurs. Elles sont destinées à votre code d'application, et non à être affichées pour l'utilisateur. Ces chaînes sont dépendantes de la classe ; chaque classe de validation définit ces propres chaînes pour identifier la cause des erreurs. Chaque classe fournit de plus des constantes (<code>const</code>) qui correspondent aux identificateurs d'erreur.
        </para>

        <note>
            <para>
                Les méthodes <code>getMessages()</code> et <code>getErrors()</code> retournent des informations sur l'échec de validation seulement pour l'appel le plus récent de <code>isValid()</code>. Chaque appel de <code>isValid()</code> efface les messages et les erreurs déclenchés par l'appel précédent, car il est probable que chaque appel de <code>isValid()</code> est réalisé pour des données d'entrée différentes.
            </para>
        </note>

        <para>
            L'exemple suivant illustre la validation d'une adresse email :

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/EmailAddress.php';

$validator = new Zend_Validate_EmailAddress();

if ($validator->isValid($email)) {
    //
    // l'email est valide
    //
} else {
    //
    // l'email est invalide ; affichons pourquoi
    //
    foreach ($validator->getMessages() as $message) {
        echo "$message\n";
    }
}
?>]]></programlisting>

        </para>

    </sect2>

    <sect2 id="zend.validate.introduction.messages">

        <title>Messages personnalisés</title>

        <para>
            Les classes de validation fournissent une méthode <code>setMessage()</code> avec laquelle vous pouvez spécifier le format du message retourné par <code>getMessages()</code> dans le cas d'un échec de validation. Le premier argument de cette méthode est une chaîne contenant le message d'erreur. Vous pouvez inclure des marques dans cette chaîne qui seront substituées avec les données appropriées du validateur. La marque <code>%value%</code> est supportée par tous les validateurs ; elle est substituée par la valeur fournie à <code>isValid()</code>. D'autres marques peuvent être supportées aux cas par cas par chaque classe de validation. Par exemple, <code>%max%</code> est une marque supportée par Zend_Validate_LessThan. La méthode <code>getMessageVariables()</code> retourne un tableau des marques de variables supportés par le validateur.
        </para>

        <para>
            Le second paramètre optionel est une chaîne qui correspond aux identificateurs d'erreurs retournés par la méthode <code>getErrors()</code>. Si vous omettez ce second argument, <code>setMessage()</code> considère que le message que vous spécifiez s'applique au premier message déclaré dans la classe de validation. La plupart des classes de validation n'ayant qu'un seul message d'erreur, il n'est pas nécessaire de spécifier distinctement dans ce cas quel message vous affectez.
        </para>

        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/StringLength.php';

$validator = new Zend_Validate_StringLength(8);

$validator->setMessage(
    'La chaîne \'%value%\' est trop courte ; elle doit être au moins de %min% caractères',
    Zend_Validate_StringLength::TOO_SHORT);

if (!$validator->isValid('word')) {
    $m = $validator->getMessages();
    echo $m[0];

    // affiche "La chaîne 'word' est trop courte ; elle doit être au moins de 8 caractères"
}
?>]]></programlisting>
        </para>

        <para>
            Vous pouvez régler des messages multiples en utilsant la méthode <code>setMessages()</code>. Son argument est ce cas est un tableau de paires clé/message.

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/StringLength.php';

$validator = new Zend_Validate_StringLength(8, 12);

$validator->setMessages( array(
    Zend_Validate_StringLength::TOO_SHORT => 'La chaîne \'%value%\' est trop courte',
    Zend_Validate_StringLength::TOO_LONG  => 'La chaîne \'%value%\' est trop longue'
));
?>]]></programlisting>

        </para>

        <para>
            Si votre application exige une flexibilité encore plus grande avec laquelle il rapporte des erreurs, vous pouvez accéder aux propriétés par le même nom que les marques de message supportées par une classe de validation donnée. La propriété <code>value</code> est toujour accessible dans un validateur ; il s'agit de la valeur fourni comme argument à <code>isValid()</code>. D'autres propriétés peuvent supportées au cas par cas par les chaque classe de validation.

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/StringLength.php';

$validator = new Zend_Validate_StringLength(8, 12);

if (!validator->isValid('word')) {
    echo 'Echec du mot : '
        . $validator->value
        . ' ; sa longueur n\'est pas compris entre '
        . $validator->min
        . ' et '
        . $validator->max
        . "\n";
}
?>]]></programlisting>
        </para>

    </sect2>

    <sect2 id="zend.validate.introduction.static">

        <title>Utilisation de la méthode statique <code>is()</code></title>

        <para>
            S'il est incommode de charger une classe de validation donnée et créer une instance de validateur, vous pouvez utiliser la méthode statique <code>Zend_Validate::is()</code> comme appel alternatif. Le premier argument de cette méthode est la donnée d'entrée, que vous passeriez à la méthode <code>isValid()</code>. Le deuxième argument est une chaîne, qui correspond au nom de base de la classe de validation, relativement dans l'espace de nommage Zend_Validate. La méthode <code>is()</code> charge automatiquement la classe, crée une instance et applique la méthode <code>isValid()</code> à la donnée d'entrée.

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate.php';

if (Zend_Validate::is($email, 'EmailAddress')) {
    //
    // l'email es valide
    //
}
?>]]></programlisting>

        </para>

        <para>
            Vous pouvez aussi fournir un tableau destiné au constructeur de la classe, s'ils sont nécessaires pour votre classe de validation.

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate.php';

if (Zend_Validate::is($value, 'Between', array(1, 12))) {
    //
    // $value est compirs entre 1 et 12
    //
}
?>]]></programlisting>

        </para>

        <para>
            La méthode <code>is()</code> retourne une valeur booléenne, la meme que la méthode <code>isValid()</code>. Lors de l'utilisation de la méthode statique <code>is()</code>, les erreurs et messages ne sont pas disponibles.
        </para>

        <para>
            L'utilisation statique peut être commode pour invoquer un validateur ad hoc, mais si vous avez besoin d'exécuter un validateur pour des données multiples, il est plus efficace de suivre le premier exemple ci-dessus, créant une instance de l'objet de validation et appelant sa méthode <code>isValid()</code>.
        </para>

        <para>
            De plus, la classe <code>Zend_Filter_Input</code> vous permet d'instancier et d'éxécuter des filtres multiples et des classes de validateurs sur demande pour traiter l'ensemble de données saisies. Voir <xref linkend="zend.filter.input" />.
        </para>

    </sect2>

</sect1>