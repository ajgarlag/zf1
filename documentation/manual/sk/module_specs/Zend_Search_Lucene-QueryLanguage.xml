<sect1 id="zend.search.lucene.query-language">
    <title>Query Language</title>

    <para>
        Java Lucene and Zend_Search_Lucene provide quite powerful query language.
    </para>

    <para>
        It mostly the same, but has some differences, which are mentioned below.
    </para>

    <para>
        Full Java Lucene query language syntax documentation can be found
        <ulink url="http://lucene.apache.org/java/2_0_0/queryparsersyntax.html">here</ulink>.
    </para>

    <sect2 id="zend.search.lucene.query-language.terms">
        <title>Terms</title>

        <para>
            A query is broken up into terms and operators. There are three types of terms: Single Terms, Phrases,
            and Subqueries.
        </para>
        <para>
            A Single Term is a single word such as "test" or "hello".
        </para>
        <para>
            A Phrase is a group of words surrounded by double quotes such as "hello dolly".
        </para>
        <para>
            A Subquery is a query surrounded by parentheses such as "(hello dolly)".
        </para>
        <para>
            Multiple terms can be combined together with Boolean operators to form a more complex query (see below).
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.fields">
        <title>Fields</title>

        <para>
            Lucene supports fielded data. When performing a search you can either specify a field, or use
            the default field. The field names depend on indexed data and default field is defined
            by current settings.
        </para>
        <para>
            The first and major difference from Java Lucene is that terms are searched through
            <emphasis>all fields</emphasis> by default.
        </para>
        <para>
            There are two static methods in Zend_Search_Lucene class, which allow to operate with this settings:
        </para>
        <programlisting role="php"><![CDATA[<?php
$defaultSearchField = Zend_Search_Lucene::getDefaultSearchField();
...
Zend_Search_Lucene::setDefaultSearchField('contents');]]></programlisting>

        <para>
            <code>null</code> value means, that search is performed through all field. It's a default setting.
        </para>
        <para>
            You can specify field by typing the field name followed by a colon ":" and then the term you
            are looking for.
        </para>
        <para>
            As an example, let's assume a Lucene index contains two fields, title and text and text is the default field.
            If you want to find the document entitled "The Right Way" which contains the text "don't go this way",
            you can enter:
        </para>
        <programlisting role="querystring"><![CDATA[title:"The Right Way" AND text:go]]></programlisting>
        <para>
            or
        </para>
        <programlisting role="querystring"><![CDATA[title:"Do it right" AND go]]></programlisting>
        <para>
            If "text" is the default field, the field indicator is not required.
        </para>

        <para>
            Note: The field is only valid for the term, phrase or subquery that it directly precedes,
            so the query
            <programlisting role="querystring"><![CDATA[title:Do it right]]></programlisting>
            Will only find "Do" in the title field. It will find "it" and "right" in the default field,
            if default field is set, or in the all indexed fields, if default field is set to <code>null</code>.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.modifiers">
        <title>Term Modifiers</title>

        <para>
            Lucene supports modifying query terms to provide a wide range of searching options.
        </para>
        <para>
            Zend_Search_Lucene supports "~" modifier only for phrases now
            <footnote>
                <para>
                    "~" for terms is used for fuzzy search, but fuzzy search queries are not supported yet.
                </para>
            </footnote>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.proximity-search">
        <title>Proximity Searches</title>

        <para>
            Lucene supports finding words are a within a specific distance away. To do a proximity search
            use the tilde, "~", symbol at the end of a Phrase. For example to search for a "Zend" and
            "Framework" within 10 words of each other in a document use the search:
            <programlisting role="querystring"><![CDATA["Zend Framework"~10]]></programlisting>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boosting">
        <title>Boosting a Term</title>

        <para>
            Java Lucene and Zend_Search_Lucene provide the relevance level of matching documents based
            on the terms found. To boost a term use the caret, "^", symbol with a boost factor (a number)
            at the end of the term you are searching. The higher the boost factor, the more relevant
            the term will be.
        </para>
        <para>
            Boosting allows you to control the relevance of a document by boosting its term. For example,
            if you are searching for
            <programlisting role="querystring"><![CDATA[PHP framework]]></programlisting>
            and you want the term "PHP" to be more relevant boost it using the ^ symbol along with the
            boost factor next to the term. You would type:
            <programlisting role="querystring"><![CDATA[PHP^4 framework]]></programlisting>
            This will make documents with the term PHP appear more relevant. You can also boost Phrase
            Terms  and subqueries as in the example:
            <programlisting role="querystring"><![CDATA["PHP framework"^4 "Zend Framework"]]></programlisting>
            By default, the boost factor is 1. Although the boost factor must be positive,
            it can be less than 1 (e.g. 0.2)
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boolean">
        <title>Boolean Operators</title>

        <para>
            Boolean operators allow terms to be combined through logic operators.
            Lucene supports AND, "+", OR, NOT and "-" as Boolean operators.
            Java Lucene needs boolean operators t obe ALL CAPS. Zend_Search_Lucene doesn't.
        </para>

        <para>
            Boolean operators allow terms to be combined through logic operators.
            Lucene supports AND, "+", OR, NOT and "-" as Boolean operators.
        </para>

        <para>
            AND, OR, and NOT operators and "+", "-" defines two styles to construct boolean queries.
            As opposed to Java Lucene Zend_Search_Lucene doesn't allow to mix these two styles.
        </para>
        <para>
            If AND/OR/NOT style is used, then AND/OR operator must be present between all query terms.
            Each term may also be preceded by NOT operator. AND operator has higher precedence than OR.
            It differs from Java Lucene behavior.
        </para>

        <sect3 id="zend.search.lucene.query-language.boolean.and">
            <title>AND</title>
            <para>
                The AND operator means, that all terms in "AND group" must match document.
            </para>
            <para>
                To search for documents that contain "PHP framework" and "Zend Framework" use the query:
                <programlisting role="querystring"><![CDATA["PHP framework" AND "Zend Framework"]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.or">
            <title>OR</title>
            <para>
                The OR operator divides query into several optional parts.
            </para>
            <para>
                To search for documents that contain "PHP framework" or "Zend Framework" use the query:
                <programlisting role="querystring"><![CDATA["PHP framework" OR "Zend Framework"]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.not">
            <title>NOT</title>
            <para>
                The NOT operator excludes documents that contain the term after NOT. But "AND group", which contains
                only terms with NOT operator, gives empty result instead of full set indexed documents.
            </para>
            <para>
                To search for documents that contain "PHP framework" but not "Zend Framework" use the query:
                <programlisting role="querystring"><![CDATA["PHP framework" AND NOT "Zend Framework"]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.other-form">
            <title>&amp;&amp;, ||, and ! operators</title>
            <para>
                &amp;&amp;, ||, and ! may be used instead of AND, OR, and NOT operators.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.plus">
            <title>+</title>
            <para>
                The "+" or required operator requires that the term after the "+" symbol must match the document.
            </para>
            <para>
                To search for documents that must contain "Zend" and may contain "Framework" use the query:
                <programlisting role="querystring"><![CDATA[+Zend Framework]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.minus">
            <title>-</title>
            <para>
                The "-" or prohibit operator excludes documents that matches the term after the "-" symbol.
            </para>
            <para>
                To search for documents that contain "PHP framework" but not "Zend Framework" use the query:
                <programlisting role="querystring"><![CDATA["PHP framework" -"Zend Framework"]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.no-operator">
            <title>no operator</title>
            <para>
                If no operator is used, then behavior is defined by "default boolean operator".
            </para>
            <para>
                It's <code>OR</code> by default.
            </para>
            <para>
                That means, that term is optional. It may be or may not be presented within document, but documents with this term
                will have higher score.
            </para>
            <para>
                To search for documents that requires "PHP framework" and may contain "Zend Framework" use the query:
                <programlisting role="querystring"><![CDATA[+"PHP framework" "Zend Framework"]]></programlisting>
            </para>

            <para>
                Default boolean operator may be set or retrieved with
                <code>Zend_Search_Lucene_Search_QueryParser::setDefaultOperator($operator)</code> and
                <code>Zend_Search_Lucene_Search_QueryParser::getDefaultOperator()</code> methods.
            </para>
            <para>
                These methods operate with
                <code>Zend_Search_Lucene_Search_QueryParser::B_AND</code> and
                <code>Zend_Search_Lucene_Search_QueryParser::B_OR</code> constants.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.grouping">
        <title>Grouping</title>

        <para>
            Java Lucene and Zend_Search_Lucene support using parentheses to group clauses to form sub queries. This can be
            useful if you want to control the boolean logic for a query or mix different boolean query styles:
            <programlisting role="querystring"><![CDATA[+(framework OR library) +php]]></programlisting>
            Zend_Search_Lucene supports subqueries of any level.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.field-grouping">
        <title>Field Grouping</title>

        <para>
            Lucene supports using parentheses to group multiple clauses to a single field.
        </para>
        <para>
            To search for a title that contains both the word "return" and the phrase "pink panther" use the query:
            <programlisting role="querystring"><![CDATA[title:(+return +"pink panther")]]></programlisting>
            Zend_Search_Lucene supports subqueries of any level.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.escaping">
        <title>Escaping Special Characters</title>

        <para>
            Lucene supports escaping special characters that are part of the query syntax. The current list special
            characters are:
        </para>
        <para>
            + - &amp;&amp; || ! ( ) { } [ ] ^ " ~ * ? : \
        </para>
        <para>
            + and - inside single terms are treated as common characters.
        </para>
        <para>
            To escape these character use the \ before the character. For example to search for (1+1):2 use the query:
            <programlisting role="querystring"><![CDATA[\(1\+1\)\:2]]></programlisting>
        </para>
    </sect2>

</sect1>
