<sect1 id="zend.config.adapters.ini">
    <title>Zend_Config_Ini</title>
    <para>
        <code>Zend_Config_Ini</code> ermöglicht es Entwicklern, Konfigurations-Daten in einem
        vertrauten INI-Format zu speichern und sie mit einer Syntax auszulesen, die dem Zugriff auf
        die Eigenschaften verschachtelter Objekte entspricht. Das verwendete INI-Format bietet
        einerseits die Möglichkeit, Konfigurations-Daten hierarchisch abzulegen und andererseits
        Vererbung zwischen Sektionen zu spezifizieren. Konfigurations-Daten-Hierarchien werden
        durch das Trennen der Schlüsselwörter durch einen Punkt (<code>.</code>). Eine Sektion kann
        eine andere Sektion erweitern oder beerben indem man nach dem Sektionsname einen
        Doppelpunkt (<code>:</code>) notiert, gefolgt vom Namen der zu beerbenden Sektion.
    </para>
    <note>
        <title>parse_ini_file</title>
        <para>
            <code>Zend_Config_Ini</code> verwendet die PHP-Funktion
            <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink>. Deren
            Dokumentation klärt über spezielle Verhaltensweisen auf, die sich auch auf
            <code>Zend_Config_Ini</code> auswirken, z. B. wie die besonderen Werte
            <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code> und
            <code>null</code> gehandhabt werden.
        </para>
    </note>
    <note>
        <title>Schlüssel Trenner</title>
        <para>
            Standardmäßig ist das Schlüssel Trennzeichen der Punkt (<code>.</code>). Dies kann
            geändert werden, indem der <code>$config</code> Schlüssel <code>'nestSeparator'</code>
            geändert wird, wenn das <code>Zend_Config_Ini</code> Objekt instanziert wird. Zum
            Beispiel:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config/Ini.php';
$config['nestSeparator'] = ':';
$config = new Zend_Config_Ini('/path/to/config.ini', 'staging', $config);]]></programlisting>
        </para>
    </note>
    <example id="zend.config.adapters.ini.example.using">
        <title>Zend_Config_Ini benutzen</title>
        <para>
            Dieses Beispiel zeigt die grundlegende Nutzung von <code>Zend_Config_Ini</code> um
            Konfigurations-Daten aus einem XML-File zu laden. In diesem Beispiel gibt es
            Konfigurations-Daten für ein Produktiv- und ein Staging-System. Da sich die Daten für
            das Staging-System nur unwesentlich von denen für das Produktiv-System unterscheiden,
            erbt das Staging-System vom Produktiv-System. In diesem Fall ist die Entscheidung
            darüber, welche Sektion von welcher erben soll, willkürlich und es könnte auch anders
            herum gemacht werden. In komplexeren Fällen ist das möglicherweise nicht der Fall.
            Nehmen wir also an, dass sich die folgenden Konfigurations-Daten in der Datei
            <code>/path/to/config.ini</code> befinden:
        </para>
        <programlisting role="ini"><![CDATA[; Konfigurations-Daten für die Produktiv-Site
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Konfigurations-Daten für die Staging-Site, erbt von der Produktion
; und überschreibt Werte, wo nötig
[staging : production]
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]></programlisting>
        <para>
            Nehmen wir weiterhin an, dass der Anwendungs-Entwickler die Staging-Konfiguration aus
            diesem INI-File benötigt. Es ist ein Leichtes, diese Daten zu laden, es muss nur das
            INI-File und die Staging-Sektion spezifiziert werden:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config_Ini('/path/to/config.ini', 'staging');

echo $config->database->host; // gibt "dev.example.com" aus
echo $config->database->name; // gibt "dbname" aus]]></programlisting>
    </example>
    <note>
    <table>
        <title>Zend_Config_Ini Constructor parameters</title>
        <tgroup cols="2">
            <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Notes</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><code>$filename</code></entry>
                    <entry>The INI file to load.</entry>
                </row>
                <row>
                    <entry><code>$section</code></entry>
                    <entry>The [section] within the ini file that is to be loaded. Setting
                        this parameter to null will load all sections. Alternatively, an
                        array of section names may be supplied to load multiple sections.</entry>
                </row>
                <row>
                    <entry><code>$config = false</code></entry>
                    <entry>Configuration array. The following keys are supported:
                        <itemizedlist>
                            <listitem><para><emphasis>allowModifications</emphasis>: Set to true to allow subsequent modification of loaded file. Defaults to false</para></listitem>
                            <listitem><para><emphasis>nestSeparator</emphasis>: Set to the character to be used as the nest separator. Defaults to "."</para></listitem>
                        </itemizedlist>
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>
    </note>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
