<sect1 id="zend.db.profiler">

    <title>Zend_Db_Profiler</title>

    <sect2 id="zend.db.profiler.introduction">

        <title>Einführung</title>

        <para>
            <code>Zend_Db_Profiler</code> kann aktiviert werden, um das Erstellen von Profilen für
            Abfragen zu erlauben. Die Profile enthalten die Abfragen, die durch den Adapter
            verarbeitet worden sind, sowie die Laufzeit der Abfragen, um die Kontrolle der
            verarbeiteten Abfragen zu ermöglichen, ohne das extra Code für das Debugging zu den
            Klassen hinzugefügt werden muß. Die erweiterte Verwendung ermöglicht den Entwickler
            sogar zu filtern, welche Abfragen aufgezeichnet werden sollen.
        </para>

        <para>
            Der Profiler wird entweder durch die Übergabe eines Parameters an den Konstruktor des
            Adapters oder zu einem späteren Zeitpunkt direkt an den Adapter aktiviert.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Db.php';

$params = array (
    'host'     => '127.0.0.1',
    'username' => 'malory',
    'password' => '******',
    'dbname'   => 'camelot',
    'profiler' => true  // aktiviere den Profiler; false, um ihn zu deaktivieren (Standard)
);

$db = Zend_Db::factory('PDO_MYSQL', $params);

// deaktiviere Profiler
$db->getProfiler()->setEnabled(false);

// aktiviere Profiler
$db->getProfiler()->setEnabled(true);]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.db.profiler.using">

        <title>Den Profiler verwenden</title>

        <para>
            Der Profiler kann jederzeit über die Adapter Methode <code>getProfiler()</code> geholt
            werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$profiler = $db->getProfiler();]]>
        </programlisting>

        <para>
            Dies gibt eine <code>Zend_Db_Profiler</code> Objektinstanz zurück. Mit dieser Instanz
            kann der Entwickler seine Abfragen mit Hilfe von verschiedenen Methoden untersuchen:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>getTotalNumQueries()</code> gibt die Gesamtzeit aller aufgezeichneten
                    Abfragen zurück.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>getTotalElapsedSecs()</code> gibt die gesamte Anzahl an Sekunden
                    für alle aufgezeichneten Abfragen zurück.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>getQueryProfiles()</code> gibt ein Array mit allen aufgezeichneten
                    Abfragen zurück.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>getLastQueryProfile()</code> gibt das Profil der letzten (neuesten)
                    Abfrage zurück, gleichgültig ob die Abfrage beendet werden konnte oder nicht (wenn
                    nicht, wird die Endzeit null sein)
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>clear()</code> löscht jedes vorherige Abfrageprofile vom Stapel.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Der Rückgabewert von <code>getLastQueryProfile()</code> und die einzelnen Elemente von
            <code>getQueryProfiles()</code> sind <code>Zend_Db_Profiler_Query</code> Objekte, welche
            die Möglichkeit bieten, die individuellen Abfragen zu untersuchen:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>getQuery()</code> gibt den SQL Text der Abfrage zurück.
                    Der SQL Text des vorbereiteten Statements mit Parametern ist der Text, zu der Zeit
                    als die Abfrage vorbereitet wurde, er enthält also Platzhalter für Parameter, nicht die
                    Werte die verwendet werden wenn das Statement ausgeführt wird.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>getQueryParams()</code> gibt ein Array von Parameter Werten zurück die verwendet werden
                    wenn eine vorbereitete Abfrage ausgeführt wird. Das beinhaltet beide, gebundene Parameter und
                    Argumente für die <code>execute()</code> Methode des Statements. Die Schlüssel des Arrays sind
                    die Positionierten (1-basierend) oder benannten (Zeichenkette) Parameter Indezes.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>getElapsedSecs()</code> gibt die Anzahl der Sekunden zurück, wie lange
                    die Abfrage gelaufen ist.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Die Informationen, die <code>Zend_Db_Profiler</code> bereitstellt, sind nützlich, um
            Engpässe in der Anwendung zu ermitteln und um Abfragen zu überprüfen, die durchgeführt
            worden sind. Um zum Beispiel die genaue Abfrage zu sehen, die zuletzt durchgeführt
            worden ist:
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = $profiler->getLastQueryProfile();

echo $query->getQuery();]]>
        </programlisting>

        <para>
            Vielleicht wird eine Seite langsam erstellt; verwende den Profiler, um zuerst die
            gesamte Laufzeit aller Abfragen zu ermitteln und dann durchlaufe die Abfragen, um die
            am längsten laufende zu finden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$totalTime    = $profiler->getTotalElapsedSecs();
$queryCount   = $profiler->getTotalNumQueries();
$longestTime  = 0;
$longestQuery = null;

foreach ($profiler->getQueryProfiles() as $query) {
    if ($query->getElapsedSecs() > $longestTime) {
        $longestTime  = $query->getElapsedSecs();
        $longestQuery = $query->getQuery();
    }
}

echo 'Executed ' . $queryCount . ' queries in ' . $totalTime . ' seconds' . "\n";
echo 'Average query length: ' . $totalTime / $queryCount . ' seconds' . "\n";
echo 'Queries per second: ' . $queryCount / $totalTime . "\n";
echo 'Longest query length: ' . $longestTime . "\n";
echo "Longest query: \n" . $longestQuery . "\n";]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.profiler.advanced">

        <title>Fortgeschrittene Profiler Verwendung</title>

        <para>
            Zusätzlich zum Untersuchen von Anfragen erlaubt der Profiler dem Entwickler auch zu
            filtern, welche Abfragen aufgezeichnet werden sollen. Die folgenden Methoden arbeiten
            mit einer <code>Zend_Db_Profiler</code> Instanz:
        </para>

        <sect3 id="zend.db.profiler.advanced.filtertime">
            <title>Filtern anhand der Laufzeit der Abfragen</title>

            <para>
                <code>setFilterElapsedSecs()</code> ermöglicht dem Entwickler, einen minimale
                Laufzeit anzugeben, bevor eine Abfrage aufzeichnet werden soll. Um den Filter zu
                entfernen, muss nur der Wert null an die Methode übergeben werden.
            </para>

            <programlisting role="php"><![CDATA[<?php
// Zeichne nur Abfragen auf, die mindestens 5 Sekunden laufen:
$profiler->setFilterElapsedSecs(5);

// Zeichne alle Abfragen unabhängig von deren Laufzeit auf:
$profiler->setFilterElapsedSecs(null);]]>
            </programlisting>
        </sect3>

        <sect3 id="zend.db.profiler.advanced.filtertype">
            <title>Filtern anhand des Abfragetyp</title>

            <para>
                <code>setFilterQueryType()</code> ermöglicht dem Entwickler anzugeben, welche
                Abfragetypen aufgezeichnet werden sollen; um mehrere Typen aufzuzeichnen, verwende
                das logische OR. Abfragetypen sind mit den folgenden
                <code>Zend_Db_Profiler</code> Konstanten definiert:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::CONNECT</code>: Verbindungsoperationen oder
                        Auswahl einer Datenbank .
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::QUERY</code>: allgemeine Datenbankabfragen, die
                        keinem der anderen Typen entsprechen.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::INSERT</code>: jede Abfrage, die neue Daten zur
                        Datenbank hinzufügt, normalerweise ein SQL INSERT.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::UPDATE</code>: jede Abfrage, die vorhandene Daten
                        aktualisiert, normalerweise ein SQL UPDATE.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::DELETE</code>: jede Abfrage, die vorhandene Daten
                        löscht, normalerweise ein SQL DELETE.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::SELECT</code>: jede Abfrage, die vorhandene Daten
                        selektiert, normalerweise ein SQL SELECT.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Db_Profiler::TRANSACTION</code>: jede Transaktionsoperation,
                        wie zum Beispiel START TRANSACTION, COMMIT oder ROLLBACK.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                Mit <code>setFilterElapsedSecs()</code> kannst du jeden vorhandenen Filtern
                entfernen, indem du <code>null</code> als einziges Argument übergibst.
            </para>

            <programlisting role="php"><![CDATA[<?php
// zeichne nur SELECT Abfragen auf
$profiler->setFilterQueryType(Zend_Db_Profiler::SELECT);

// zeichne SELECT, INSERT und UPDATE Abfragen auf
$profiler->setFilterQueryType(Zend_Db_Profiler::SELECT | Zend_Db_Profiler::INSERT | Zend_Db_Profiler::UPDATE);

// zeichne DELETE Abfragen auf (damit wir herausfinden, warum Daten verloren gehen)
$profiler->setFilterQueryType(Zend_Db_Profiler::DELETE);

// Remove all filters
$profiler->setFilterQueryType(null);]]>
            </programlisting>

        </sect3>

        <sect3 id="zend.db.profiler.advanced.getbytype">
            <title>Hole Profil nach Abfragetyp zurück</title>

            <para>
                Die Verwendung von <code>setFilterQueryType()</code> kann die Anzahl der
                aufgezeichneten Abfragen reduzieren. Allerdings kann es sinnvoller sein, alle
                Abfragen auzuzeichnen, baer nur diese anzuschauen, die im Moment gebraucht werden.
                Ein weiteres Feature von <code>getQueryProfiles()</code> ist das Filtern der
                Abfragen "on-the-fly" durch Übergabe eines Abfragetyps (oder eine logischen
                Kombination von Abfragetypen) als erstes Argument; beachte
                <xref linkend="zend.db.profiler.advanced.filtertype" /> für eine Liste der
                Konstanten für Abfragetypen.
            </para>

            <programlisting role="php"><![CDATA[<?php
// Hole nur SELECT Abfragen zurück
$profiles = $profiler->getQueryProfiles(Zend_Db_Profiler::SELECT);

// Hole nur SELECT, INSERT un UPDATE Abfragen zurück
$profiles = $profiler->getQueryProfiles(Zend_Db_Profiler::SELECT | Zend_Db_Profiler::INSERT | Zend_Db_Profiler::UPDATE);

// Hole DELETE Abfragen zuürck (damit wir herausfinden, warum Daten verloren gehen)
$profiles = $profiler->getQueryProfiles(Zend_Db_Profiler::DELETE);]]>
            </programlisting>

        </sect3>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->