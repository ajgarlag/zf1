<sect1 id="zend.controller.migration">
    <title>Migrating from Previous Versions</title>

    <para>
        Die API der MVC Komponenten hat sich mit der Zeit verändert. Wer das Zend Framework bereits
        in einer früheren Version verwendet hat, folgt dem Leitfaden unten, damit die Skripte die
        neue Archtitekur verwenden.
    </para>

    <sect2 id="zend.controller.migration.fromzeroninethree">
        <title>Migrating from 0.9.3 to 1.0.0RC1 or newer</title>

        <para>
            The principal changes introduced in 1.0.0RC1 are the introduction of
            and default enabling of the
            <link
                linkend="zend.controller.plugins.standard.errorhandler">ErrorHandler</link>
            plugin and the <link
                linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer</link>
            action helper. Please read the documentation to each thoroughly to
            see how they work and what effect they may have on your
            applications.
        </para>

        <para>
            The <code>ErrorHandler</code> plugin runs during
            <code>postDispatch()</code> checking for exceptions, and forwarding
            to a specified error handler controller. You should include such a
            controller in your application. You may disable it by setting the
            front controller parameter <code>noErrorHandler</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php
$front->setParam('noErrorHandler', true);
]]></programlisting>

        <para>
            The <code>ViewRenderer</code> action helper automates view injection
            into action controllers as well as autorendering of view scripts
            based on the current action. The primary issue you may encounter is
            if you have actions that do not render view scripts and neither
            forward or redirect, as the <code>ViewRenderer</code> will attempt
            to render a view script based on the action name.
        </para>

        <para>
            There are several strategies you can take to update your code. In
            the short term, you can globally disable the
            <code>ViewRenderer</code> in your front controller bootstrap prior
            to dispatching:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Assuming $front is an instance of Zend_Controller_Front
$front->setParam('noViewRenderer', true);
]]></programlisting>

        <para>
            However, this is not a good long term strategy, as it means most
            likely you'll be writing more code.
        </para>

        <para>
            When you're ready to start using the <code>ViewRenderer</code>
            functionality, there are several things to look for in your
            controller code. First, look at your action methods (the methods
            ending in 'Action'), and determine what each is doing. If none of
            the following is happening, you'll need to make changes:
        </para>

        <itemizedlist>
            <listitem><para>Calls to <code>$this-&gt;render()</code></para></listitem>
            <listitem><para>Calls to <code>$this-&gt;_forward()</code></para></listitem>
            <listitem><para>Calls to <code>$this-&gt;_redirect()</code></para></listitem>
            <listitem><para>Calls to the <code>Redirector</code> action helper</para></listitem>
        </itemizedlist>

        <para>
            The easiest change is to disable auto-rendering for that method:
        </para>

        <programlisting role="php"><![CDATA[
$this->_helper->viewRenderer->setNoRender();
]]></programlisting>

        <para>
            If you find that none of your action methods are rendering,
            forwarding, or redirecting, you will likely want to put the above
            line in your <code>preDispatch()</code> or <code>init()</code>
            methods:
        </para>

        <programlisting role="php"><![CDATA[
public function preDispatch()
{
    // disable view script autorendering
    $this->_helper->viewRenderer->setNoRender()
    // .. do other things...
}
]]></programlisting>

        <para>
            If you are calling <code>render()</code>, and you're using <link
                linkend="zend.controller.modular">the Conventional Modular
                directory structure</link>, you'll want to change your code to
            make use of autorendering:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    If you're rendering multiple view scripts in a single
                    action, you don't need to change a thing.
                </para>
            </listitem>
            <listitem>
                <para>
                    If you're simply calling <code>render()</code> with no
                    arguments, you can remove such lines.
                </para>
            </listitem>
            <listitem>
                <para>
                    If you're calling <code>render()</code> with arguments, and
                    not doing any processing afterwards or rendering multiple
                    view scripts, you can change these calls to read
                    <code>$this-&gt;_helper-&gt;viewRenderer()</code>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            If you're not using the conventional modular directory structure,
            there are a variety of methods for setting the view base path and
            script path specifications so that you can make use of the
            <code>ViewRenderer</code>. Please read the <link
                linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer
                documentation</link> for information on these methods.
        </para>

        <para>
            If you're using a view object from the registry, or customizing your
            view object, or using a different view implementation, you'll want
            to inject the <code>ViewRenderer</code> with this object. This can
            be done easily at any time.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Prior to dispatching a front controller instance:
                </para>

                <programlisting role="php"><![CDATA[<?php
// Assuming $view has already been defined
$viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer($view);
Zend_Controller_Action_HelperBroker::addHelper($viewRenderer);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    Any time during the bootstrap process:
                </para>

                <programlisting role="php"><![CDATA[<?php
$viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
$viewRenderer->setView($view);
]]></programlisting>
            </listitem>
        </itemizedlist>

        <para>
            There are many ways to modify the <code>ViewRenderer</code>,
            including setting a different view script to render, specifying
            replacements for all replaceable elements of a view script path
            (including the suffix), choosing a response named segment to
            utilize, and more. If you aren't using the conventional modular
            directory structure, you can even associate different path
            specifications with the <code>ViewRenderer</code>.
        </para>

        <para>
            We encourage you to adapt your code to use the
            <code>ErrorHandler</code> and <code>ViewRenderer</code> as they are
            now core functionality.
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzeroninetwo">
        <title>Migrating from 0.9.2 to 0.9.3 or newer</title>

        <para>
            0.9.3 introduces <link
                linkend="zend.controller.actionhelpers">action helpers</link>.
            As part of this change, the following methods have been removed as
            they are now encapsulated in the <link
                linkend="zend.controller.actionhelpers.redirector">redirector
                action helper</link>:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setRedirectCode()</code>; use
                    <code>Zend_Controller_Action_Helper_Redirector::setCode()</code>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectPrependBase()</code>; use
                    <code>Zend_Controller_Action_Helper_Redirector::setPrependBase()</code>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectExit()</code>; use
                    <code>Zend_Controller_Action_Helper_Redirector::setExit()</code>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Read the <link linkend="zend.controller.actionhelpers">action
                helpers documentation</link> for more information on how to
            retrieve and manipulate helper objects, and the <link
                linkend="zend.controller.actionhelpers.redirector">redirector
                helper documentation</link> for more information on setting
            redirect options (as well as alternate methods for redirecting).
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerosix">
        <title>Migration von 0.6.0 nach 0.8.0 oder neuer</title>

        <para>
            Durch bisherige Änderungen bleibt die wesentliche Verwendung der MVC Komponenten gleich:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <para>
            Dennoch wurde die Verzeichnisstruktur gründliche überarbeitet, verschiedene Komponenten
            wurden entfernt und mehrere andere umbenannt und hinzugefügt. Die Änderungen beinhalten:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Controller_Router</code> wurde entfernt für den Rewrite Router
                    entfernt.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_RewriteRouter</code> wurde in
                    <code>Zend_Controller_Router_Rewrite</code> umbenannt und zum Standard Router
                    befördert, der mit dem Framework ausgeliefert wird;
                    <code>Zend_Controller_Front</code> wird ihn als Standard verwenden, wenn kein
                    anderer Router übergeben wird.
                </para>
            </listitem>

            <listitem>
                <para>
                    Eine neue Route Klasse für die Verwendung mit dem Rewrite Router wurde
                    eingeführt: <code>Zend_Controller_Router_Route_Module</code>; sie deckt die
                    Standardrouten ab, die vom MVC verwendet werden und bietet die Unterstützung
                    für <link linkend="zend.controller.modular">Controller Module</link>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_Router_StaticRoute</code> wurde umbenannt in
                    <code>Zend_Controller_Router_Route_Static</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_Dispatcher</code> wurde umbenannt in
                    <code>Zend_Controller_Dispatcher_Standard</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_Action::_forward()</code>'s Argumente wurden geändert.
                    Die Signatur ist nun:
                </para>

                <programlisting role="php"><![CDATA[
final protected function _forward($action, $controller = null, $module = null, array $params = null);
]]></programlisting>

                <para>
                    <code>$action</code> wird immer benötigt; wenn kein Controller angegeben wird,
                    wird eine Action im aktuellen Controller angenommen. <code>$module</code> wird
                    immer ignoriert, es sei denn <code>$controller</code> wird angegeben.
                    Schließlich werden alle übergebenen Parameter <code>$params</code> an das
                    Request Objekt angehängt. Wenn man keinen Controller oder kein Modul angeben,
                    aber dennoch Parameter übergeben möchte, gibt man einfach null für diese Werte
                    an.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Migration von 0.2.0 oder früher nach 0.6.0</title>

        <para>
            Die grundlegende Verwendung der MVC Komponenten hat sich nicht verändert; man kann immer
            noch das folgende machen:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- Erstelle einen Router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- Setze ihn im Controller -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- Setze da Controller Verzeichnis und starte die Verarbeitung -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            Wir empfehlen die Verwendung des Response Objektes, um Inhalte und Header zu sammeln.
            Dies erlaubt den flexibleren Wechsel von Ausgabeformaten (z.B. JSON oder XML statt
            XHTML) in deiner Applikation. Standardmäßig verarbeitet <code>dispatch()</code> die
            Antwort, sendet Header und gibt die Inhalte aus. Man kann den Front Controller auch
            auffordern, die Antwort durch <code>returnResponse()</code> zurückzugeben und die
            Antwort dann auf eigene Weise ausgeben. Eine zukünftige Version des Front Controllers
            könnte die Verwendung des Response Objektes durch Output Buffering erzwingen.
        </para>

        <para>
            Es gibt viele weitere zusätzliche Funktionalitäten, welche die vorherige API erweitern.
            Diese sind in der Dokumentation aufgeführt.
        </para>

        <para>
            Die meisten Änderungen, die man beachten muss, betreffen das Erweitern der diversen
            Komponenten. Die wichtigsten davon sind:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Controller_Front::dispatch()</code> fängt standardmäßig die Ausnahmen
                    im Response Objekt ab und gibt sie nicht aus, um sicherzugehen, dass keine
                    sensitiven Systeminformationen ausgegeben werden. Man kann dies auf mehrere
                    Arten überschreiben:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            Setzen von <code>throwExceptions()</code> im Front Controller:
                        </para>
                        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            Setzen von <code>renderExceptions()</code> im Response objekt:
                        </para>
                        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->setResponse($response);
$front->dispatch();

// oder:
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions(true);
echo $response;
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                akzeptiert und gibt nun ein <xref linkend="zend.controller.request" />
                Objekt anstelle eines Dispatcher Token zurück.
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                akzeptiert und gibt nun ein <xref linkend="zend.controller.request" />
                Objekt anstelle eines Dispatcher Token zurück.
            </para></listitem>

            <listitem>
                <para><code>Zend_Controller_Action</code> Änderungen beinhalten:</para>

                <itemizedlist>
                    <listitem><para>
                        Der Konstruktur akzeptiert nun genau drei Argumente,
                        <code>Zend_Controller_Request_Abstract $request</code>,
                        <code>Zend_Controller_Response_Abstract $response</code>, und
                        <code>array $params (optional)</code>.
                        <code>Zend_Controller_Action::__construct()</code> verwendet diese, um die
                        Request, Response und invokeArgs Eigenschaften für das Objekt zu setzen, und
                        beim Überschreiben des Konstrukturs sollte man dies ebenfalls tun. Besser
                        ist es, die <code>init()</code> Methode zu verwenden, um jedwede
                        Instanzkonfiguration durchzuführen, weil diese Methode als letzte Methode
                        des Konstrukturs aufgerufen wird.
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> ist nicht länger als final definiert, wird aber auch
                        nicht länger vom Front Controller verwendet; sein einziger Zweck ist, dass
                        die Klasse auch als Page Controller verwendet werden kann. Sie nimmt nun
                        zwei optionale Argument an, ein
                        <code>Zend_Controller_Request_Abstract $request</code>
                        und ein <code>Zend_Controller_Response_Abstract $response</code>.
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> muss nicht mehr länger definiert werden, aber
                        wird als Standardaktion empfohlen. Dies erlaubt dem RewriteRouter und den
                        Action Controllern andere Standardaktionsmethoden zu definieren.
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> sollte überschrieben werden, um jede undefinierte
                        Aktion automatisch verarbeiten zu können.
                    </para></listitem>

                    <listitem><para>
                        <code>_redirect()</code> nimmt nun ein optionales zweites Argument entgegen,
                        den HTTP Code, der mit dem Redirect zurückgegeben werden soll, und ein
                        optionales drittes Argument <code>$prependBase</code>, das angibt, dass die
                        im Request Objekt registrierte Basis URL der übergebenen URL voran gestellt
                        werden soll.
                    </para></listitem>

                    <listitem>
                        <para>
                            Die <code>_action</code> Eigenschaft wird nicht mehr gesetzt. Diese
                            Eigenschaft war ein <code>Zend_Controller_Dispatcher_Token</code>, der
                            in der aktuellen Inkarnation nicht mehr länger existiert. Der einzige
                            Zweck des Tokens war, Informationen über angeforderte Controller,
                            Aktion und URL Parameter bereit zu stellen. Diese Infrmationen ist nun
                            im Request Objekt verfügbar und kann wie folgt abgerufen werden:
                        </para>

                        <programlisting role="php"><![CDATA[
// Hole den angeforderten Controllernamen
// Der Zugriff erfolgte bisher über: $this->_action->getControllerName().
// Das Beispiel unten verwendet getRequest(), obwohl man auch direkt auf die
// $_request Eigenschaft zugreifen kann; die Verwendung von getRequest() wird empfohlen, da
// eine Elternklasse den Zugriff auf das Request Objekt überschreiben könnte
$controller = $this->getRequest()->getControllerName();

// Hole den angeforderten Aktionsnamen
// Der Zugriff erfolgte bisher über: $this->_action->getActionName().
$action = $this->getRequest()->getActionName();

// Hole die Anfrageparameter
// Dies hat sich nicht verändert; die _getParams() und _getParam() Methoden leiten nun
// einfach auf das Request Objekt weiter.
$params = $this->_getParams();
$foo = $this->_getParam('foo', 'default'); // fordere den 'foo' Parameter an und verwende
                                           // 'default', wenn kein Standardwert gefunden werden kann

]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            <code>noRouteAction()</code> wurde entfernt. Der geeignete Weg, um
                            nicht vorhandene Aktionsmethoden abzufangen, wenn man sie an eine
                            Standardaktion weiter leiten möchte, sollte die Verwendung von
                            <code>__call()</code> sein:
                        </para>

                        <programlisting role="php"><![CDATA[
public function __call($method, $args)
{
    // Wenn eine nicht vorhandene 'Action' Methode angefordert wurde, leite auf die Standard
    // Aktionsmethode um:
    if ('Action' == substr($method, -6)) {
        return $this->defaultAction();
    }

    throw new Zend_Controller_Exception('Invalid method called');
}
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> wurde entfernt.
                Stattdessen soll <code>Zend_Controller_Front::setBaseUrl()</code> verwendet werden
                (oder Zend_Controller_Request_Http::setBaseUrl(), wenn die Request Klasse verwendet
                wird).
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Plugin_Interface</code> wurde durch
                by <code>Zend_Controller_Plugin_Abstract</code> ersetzt. Alle Methoden nehmen nun
                ein <xref linkend="zend.controller.request" /> Objekt statt eines
                Dispatcher Tokens entgegen bzw. geben es zurück.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
