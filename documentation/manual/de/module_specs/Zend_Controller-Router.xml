<sect1 id="zend.controller.router"  xmlns:xi="http://www.w3.org/2003/XInclude">
    <title>Der Standard Router: Zend_Controller_Router_Rewrite</title>
    <sect2 id="zend.controller.router.introduction">
        <title>Einführung</title>
        <para>
            <code>Zend_Controller_Router_Rewrite</code> ist der Standard Router des Frameworks.
            Routing ist der Prozess der Übernahme und Zerteilung einer URI, um zu
            ermitteln, welches Modul, welcher Controller und welche Aktion des Controllers die
            Anfrage erhalten soll. Die Definition des Moduls, des Controllers, der Aktion sowie
            weiterer Parameter wird in einem Objekt mit Namen
            <code>Zend_Controller_Dispatcher_Token</code> gekapselt, das dann vom
            <code>Zend_Controller_Dispatcher_Standard</code> verarbeitet wird. Das Routing
            geschieht nur einmal: wenn zu Beginn die Anfrage erhalten wird und bevor der erste
            Controller aufgerufen wird.
        </para>

        <para>
            <code>Zend_Controller_Router_Rewrite</code> wurde entwickelt, um mit reinen PHP
            Strukturen eine mod_rewrite ähnliche Funktionalität zu erlauben. Es richtet sich
            sehr frei nach dem Ruby on Rails Routing und benötigt kein tieferes Wissen über
            URL Weiterleitung des Webservers. Es wurde entwickelt, um mit einer einzigen
            mod_rewrite Regel zu arbeiten.
        </para>

        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

        <para>
            or:
        </para>

        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>

        <para>
            Der Rewrite Router kann auch mit dem IIS Webserver verwendet werden, wenn
            <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink> als Isapi
            Erweiterung installiert wurde und folgende Umschreibungsregel verwendet wird:
        </para>

        <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

        <note>
            <title>IIS Isapi_Rewrite</title>
            <para>
                Bei Verwenung von IIS, wird <code>$_SERVER['REQUEST_URI']</code> entweder nicht
                vorhanden sein oder auf einen leeren String gesetzt sein. In diesem Fall wird
                <code>Zend_Controller_Request_Http</code> versuchen, den durch die Isapi_Rewrite
                Erweiterung gesetzten Wert <code>$_SERVER['HTTP_X_REWRITE_URL']</code> zu
                verwenden.
            </para>
        </note>

        <para>
            Bei der Vrwendung von Lighttpd, ist folgende Umschreibungsregel gültig:
        </para>

        <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.router.usage">
        <title>Einen Router verwenden</title>

        <para>
            Um den Rewrite Router richtig zu verwenden, mußt du ihn instanziieren, einige
            benutzerdefinierte Routen hinzufügen und in den Controller einbinden. Der folgende
            Code veranschaulicht die Vorgehensweise:
        </para>

        <programlisting role="php"><![CDATA[<?php
/* Erstelle einen Router */

$router = $ctrl->getRouter(); // gibt standardmäßig einen Rewrite Router zurück
$router->addRoute(
    'user',
    new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.router.basic">
        <title>Basic Rewrite Router operation</title>

        <para>
            The heart of the RewriteRouter is the definition of user defined
            routes. Routes are added by calling the addRoute method of
            RewriteRouter and passing in a new instance of a class implementing
            <code>Zend_Controller_Router_Route_Interface</code>. Eg.:
        </para>

        <programlisting role="php"><![CDATA[<?php
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

        <para>
            Rewrite Router comes with four basic types of routes (one of which
            is special):
        </para>

        <itemizedlist mark="opencircle">
            <listitem><para><xref linkend="zend.controller.router.routes.standard" /></para></listitem>
            <listitem><para><xref linkend="zend.controller.router.routes.static" /></para></listitem>
            <listitem><para><xref linkend="zend.controller.router.routes.regex" /></para></listitem>
            <listitem><para><xref linkend="zend.controller.router.default-routes" /> *</para></listitem>
        </itemizedlist>

        <para>
            Routes may be used numerous times to create a chain or user defined
            application routing schema. You may use any number of routes in any
            configuration, with the exception of the Module route, which should
            rather be used once and probably as the most generic route (i.e., as a
            default). Each route will be described in greater detail later on.
        </para>

        <para>
            The first parameter to addRoute is the name of the route. It is used
            as a handle for getting the routes out of the router (e.g., for URL
            generation purposes). The second parameter being the route itself.
        </para>

        <note>
            <para>
                The most common use of the route name is through the means of
                Zend_View url helper:
            </para>

            <programlisting role="php"><![CDATA[
<a href="<?= $this->url('user', array('username' => 'martel')) ?>">Martel</a>]]></programlisting>

            <para>
                Which would result in the href: <code>user/martel</code>.
            </para>
        </note>

        <para>
            Routing is a simple process of iterating through all provided routes
            and matching its definitions to current request URI. When a positive
            match is found, variable values are returned from the Route instance
            and are injected into the <code>Zend_Controller_Request</code>
            object for later use in the dispatcher as well as in user created
            controllers. On a negative match result, the next route in the chain
            is checked.
        </para>

        <note>
            <title>Reverse matching</title>
            <para>
                Routes are matched in reverse order so make sure your most
                generic routes are defined first.
            </para>
        </note>

        <note>
            <title>Returned values</title>
            <para>
                Values returned from routing come from URL parameters or user
                defined route defaults. These variables are later accessible
                through the <code>Zend_Controller_Request::getParam()</code> or
                <code>Zend_Controller_Action::_getParam()</code> methods.
            </para>
        </note>

        <para>
            There are three special variables which can be used in your routes
            - 'module', 'controller' and 'action'. These special variables are
            used by Zend_Controller_Dispatcher to find a controller and action
            to dispatch to.
        </para>

        <note>
            <title>Special variables</title>
            <para>
                The names of these special variables may be different if you
                choose to alter the defaults in
                <code>Zend_Controller_Request_Http</code> by means of the
                <code>setControllerKey</code> and <code>setActionKey</code>
                methods.
            </para>
        </note>

    </sect2>

    <sect2 id="zend.controller.router.default-routes">
        <title>Default routes</title>

        <para>
            Zend_Controller_Router_Rewrite comes preconfigured with a default
            route, which will match URIs in the shape of
            <code>controller/action</code>.  Additionally, a module name may be
            specified as the first path element, allowing URIs of the form
            <code>module/controller/action</code>.  Finally, it will also match
            any additional parameters appended to the URI by default -
            <code>controller/action/var1/value1/var2/value2</code>.
        </para>

        <para>
            Some examples of how such routes are matched:
        </para>

        <programlisting role="php"><![CDATA[
// Assuming the following:
$ctrl->setControllerDirectory(
    array(
        'default' => '/path/to/default/controllers',
        'news'    => '/path/to/blog/controllers',
        'blog'    => '/path/to/blog/controllers'
    )
);

Module only:
http://example/news
    module == news

Invalid module maps to controller name:
http://example/foo
    controller == foo

Module + controller:
http://example/blog/archive
    module     == blog
    controller == archive

Module + controller + action:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Module + controller + action + params:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

        <para>
            The default route is simply a
            <code>Zend_Controller_Router_Route_Module</code> object stored under
            the name (index) of 'default' in RewriteRouter. It's created
            more-or-less like below:
        </para>

        <programlisting role="php"><![CDATA[<?php
$compat = new Zend_Controller_Router_Route_Module(array(), $dispatcher, $request);
$this->addRoute('default', $compat);]]></programlisting>

        <para>
            If you do not want this particular default route in your routing
            schema, you may override it by creating your own 'default' route
            (i.e., storing it under the name of 'default') or removing it
            altogether by using <code>removeDefaultRoutes()</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Remove any default routes
$router->removeDefaultRoutes();]]></programlisting>

    </sect2>

    <sect2 id="zend.controller.router.rewritebase">
        <title>Base URL and subdirectories</title>

        <para>
            The rewrite router can be used in subdirectories (e.g.,
            <code>http://domain.com/~user/application-root/</code>>) in which
            case the base URL of the application
            (<code>/~user/application-root</code>) should be automatically
            detected by <code>Zend_Controller_Request_Http</code> and used
            accordingly.
        </para>

        <para>
            Should the base URL be detected incorrectly you can override it with
            your own base path by using
            <code>Zend_Controller_Request_Http</code> and calling the
            <code>setBaseUrl()</code> method (see <xref
                linkend="zend.controller.request.http.baseurl" />):
        </para>

        <programlisting role="php"><![CDATA[<?php
$request->setBaseUrl('/~user/application-root/');]]></programlisting>

    </sect2>

    <sect2 id="zend.controller.router.routes">
        <title>Route Types</title>
        <xi:include href="Zend_Controller-Router-Route.xml" />
        <xi:include href="Zend_Controller-Router-Route-Static.xml" />
        <xi:include href="Zend_Controller-Router-Route-Regex.xml" />
    </sect2>

    <sect2 id="zend.controller.router.add-config">
        <title>Zend_Config mit dem RewriteRouter verwenden</title>

        <para>
            Manchmal ist es praktischer, eine Konfigurationsdatei mit neuen Routen zu
            aktualisieren, als den Code zu ändern. Dies ist mit Hilfe der
            <code>addConfig()</code> Methode möglich. Im Wesentlichen kann man eine
            Zend_Config kompatible Konfiguration erstellen, in seinem Code einlesen und an den
            RewriteRouter übergeben:
        </para>

        <para>
            Als Beispiel wird die folgende INI Datei angenommen:
        </para>

        <programlisting role="php"><![CDATA[
[production]
routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"

routes.archive.type = "Zend_Controller_Router_Route_Regex"
routes.archive.route = "archive/(\d+)"
routes.archive.defaults.controller = "archive"
routes.archive.defaults.action = "show"
routes.archive.map.1 = "year"
; OR: routes.archive.map.year = 1
]]></programlisting>

        <para>
            Die oben angeführte INI Datei kann dann wie folgt in ein
            <code>Zend_Config</code> Objekt eingelesen werden:
        </para>

        <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

        <para>
            Im oberen Beispiel teilen wir dem Router mit, den 'routes' Bereich der INI Datei
            für seine Routen zu verwenden. Jeder Schlüssel auf erster Ebene in diesem Bereich
            wird verwendet, um den Namen der Routen zu definieren; das obige Beispiel definiert
            die Routen 'archive' und 'news'. Jede Route erfordert dann mindestens einen 'route'
            Eintrag und einen oder mehrere 'defaults' Einträge; optional können eine oder
            mehrere 'reqs' (kurz für 'required', d.h. erforderlich) Einträge angegeben werden.
            Alles in allem entspricht dies den drei Argumenten, die an ein
            <code>Zend_Controller_Router_Route_Interface</code> Objekt übergeben werden. Ein
            Optionsschlüssel 'type' kann verwendet werden, um den Typ der Routenklasse für
            diese Route anzugeben; standardmäßig wird <code>Zend_Controller_Router_Route</code>
            verwendet. Im obigen Beispiel wird die 'news' Route definiert, um
            <code>Zend_Controller_Router_Route_Static</code> zu verwenden.
        </para>
    </sect2>

    <sect2 id="zend.controller.router.subclassing">
        <title>Subclassing the Router</title>

        <para>
            The standard rewrite router should provide most functionality you
            may need; most often, you will only need to create a new route type
            in order to provide new or modified functionality over the provided
            routes.
        </para>

        <para>
            That said, you may at some point find yourself wanting to use a
            different routing paradigm.  The interface
            <code>Zend_Controller_Router_Interface</code> provides the minimal
            information required to create a router, and consists of a single
            method.
        </para>

        <programlisting role="php"><![CDATA[<?php
interface Zend_Controller_Router_Interface
{
  /**
   * @param  Zend_Controller_Request_Abstract $request
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Request_Abstract
   */
  public function route(Zend_Controller_Request_Abstract $request);
}
?>]]></programlisting>

        <para>
            Das Routing findet nur einmal statt, wenn die Anfrage das erste Mal vom System erhalten
            wird. Der Zweck des Routers ist es, Controller, Aktion und optionale Parameter auf Basis
            der Anfrageumgebung zu ermitteln und im Request zu setzen. Das Request Objekt wird dann
            an den Dispatcher übergeben. Wenn es nicht möglich ist, eine Route auf einen Dispatch
            Token abzubilden, soll der Router nichts mit dem Request Objekt machen.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
