<sect1 id="zend.locale.introduction">

    <title>Einführung</title>

    <para>
        <code>Zend_Locale</code> ist die Antwort des Frameworks auf die Frage "Wie kann die selbe Anwendung
        auf der ganzen Welt verwendet werden?". Die meisten Leute werden sagen "Das ist einfach. Lasst uns alle
        Ausgaben in die unterschiedlichsten Sprachen übersetzen". Aber, eine einfache Übersetzungstabelle die
        Phrasen von einer Sprache in die andere übersetzt ist nicht genug. Verschiedene Regionen haben auch
        unterschiedliche Regeln für Vornamen, Nachnamen, Titel, Format von Nummern, Daten, Zeiten, Währungen usw.
    </para>

    <para>
        Was wir benötigen ist
        <ulink url="http://en.wikipedia.org/wiki/L10n">Lokalisierung</ulink>
        und die vergleichbare
        <ulink url="http://en.wikipedia.org/wiki/L10n">Internationalisierung</ulink>
        . Beide werden oft abgekürzt zu <code>L10N</code> und <code>I18N</code>. Internationalisierung bezeichnet
        mehr die Benutzung von Systemen für die spezielle Benutzung durch eindeutige Gruppen wie zum Beispiel
        Sprachübersetzung, Unterstützung von lokalen Konventionen für Plurale, Daten, Zeiten, Währungen, Namen,
        Symbolen, Sortierungen, Reihungen und viele mehr. <code>L10N</code> und <code>I18N</code> sind einander
        sehr ähnlich. Der Zend Framework bietet Unterstützung für diese Konventionen durch eine Kombination von
        Komponenten wie Zend_Locale, Zend_Date, Zend_Measure, Zend_Translate, Zend_Currency und Zend_TimeSync.
    </para>

    <sect2 id="zend.locale.whatislocalization">

        <title>Was ist Lokalisierung</title>

        <para>
            Lokalisierung bedeutet das eine Anwendung (oder Homepage) von verschiedenen Benutzer verwendet werden
            kann die unterschiedliche Sprachen sprechen. Aber wie bereits angedeutet heißt Lokalisierung mehr
            als nur die Übersetzung von Zeichenketten. Es beinhaltet
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <code>Zend_Locale</code> - Unterstützung für Gebietsschemata welche Unterstützung für
                    Lokalisierungen von anderen ZF Komponenten bieten.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Translate</code> - Übersetzung von Zeichenketten.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Date</code> - Lokalisierung von Daten und Zeiten.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Calendar</code> - Lokalisierung von Kalendern (Unterstützung für nicht Gregorianische Kalendersysteme)
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Currency</code> - Lokalisierung von Währungen.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Format</code> - Erkennen und erzeugen von lokalisierten Zahlen.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Data</code> - Empfangen von lokalisierten Standard Übersetzungen für
                    Länder, Sprachen und <ulink url="http://unicode.org/cldr/">mehr aus der CLDR</ulink>
                    .
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>TODO</code> - Lokalisierung von Sammlungen
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.locale.whatis">

        <title>
            <ulink url="http://unicode.org/reports/tr35/#Locale">Was ist ein Gebietsschema?</ulink>
        </title>

        <para>
            Jeder Computer benutzt Gebietsschemata, selbst wenn Sie es nicht wissen. Anwendungen welche keine
            Unterstützung für Lokalisierung bieten, unterstützen zumindest genau ein Gebietsschema (das
            Gebietsschema des Authors). Wenn eine Klasse oder Funktion Lokalisierung verwendet sagen wir sie ist
            Lokalisierbar. Aber wie weiß der Code welches Gebietsschema ein Benutzer erwartet ?
        </para>

        <para>
            Eine Gebietsschema Zeichenkette oder Objekt welches ein unterstütztes Gebietsschema identifiziert, gibt
            <code>Zend_Locale</code> und dessen Unterklassen Zugriff auf Informationen über die Sprache und
            Region welche der Benutzer erwartet. Formatierungen, Normalisierungen und Konvertierungen werden
            anhand dieser Informationen durchgeführt.
        </para>

    </sect2>

    <sect2 id="zend.locale.representation">

        <title>Wodurch werden Gebietsschemata representiert?</title>

        <para>
            Eine Gebietsschema Zeichenkette besteht aus Informationen über die Sprache des Benutzers und die
            bevorzugte/primäre geographische Region (z.B. Staat oder Region von seinem Zuhause oder Arbeitsplatz).
            Die Gebietsschema Zeichenkette welche im Zend Framework benutzt werden sind international definierte
            Standard Abkürzungen von Sprachen und Regionen. Sie werden geschrieben als <code>sprache_REGION</code>.
            Beide Teile, sowohl Sprache als auch Region, werden abgekürzt zu 2 Buchstaben, ASCII Zeichen.
        </para>

        <para>
            Ein Benutzer von den USA würde die Sprache <code>Englisch</code> und die Region <code>USA</code>
            erwarten, beschrieben durch das Gebietsschema "en_US". Ein Benutzer von Deutschland würde die Sprache
            <code>Deutsch</code> und die Region <code>Deutschland</code> erwarten, beschrieben durch das
            Gebietsschema "de_DE". Hier findest Du eine
            <ulink url="http://unicode.org/cldr/data/diff/supplemental/languages_and_territories.html">Liste von vordefinierten Sprachen und Kombinationen von Regionen</ulink>
            wenn ein bestimmtes Gebietsschema im Zend Framework ausgewählt werden muß.
        </para>

        <example>
            <title>Auswählen eines speziellen Gebietsschemas</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend_Locale';
$locale = new Zend_Locale('de_DE'); // deutsche Sprache _ Deutschland
?>]]></programlisting>
        </example>

        <para>
            Ein deutscher Benutzer in Amerika würde die Sprache <code>Deutsch</code> und die region <code>USA</code>
            erwarten, aber diese nicht-standardmäßigen Mischungen werden nicht als direkt als "Gebietsschema"
            unterstützt und erkannt. Wird stattdessen eine ungültige Kombination benutzt, dann wird Sie automatisch
            gekürzt, indem die Region entfernt wird. Zum Beispiel würde "de_IS" zu "de" gekürzt werden, und "xh_RU"
            würde zu "xh" gekürzt werden, weil keiner dieser Kombinationen gültig ist. Zusätzlich, wenn die Sprache
            nicht unterstützt wird (z.B. "zz_US") oder diese nicht existiert, dann wird ein Standard "root"
            Gebietsschema benutzt. Dieses "root" Gebietsschema hat Standarddefinitionen für international bekannte
            Repräsentationen von Daten, Zeiten, Nummern, Währungen usw. Der Prozess der Kürzung hängt von der
            gewünschten Information ab, weil einige Kombinationen von Sprache und Region für eine gewisse Art von
            Informationen gültig sind (z.B. Daten) aber für andere nicht (z.B. Währungs Formate).
        </para>

        <para>
            Achtung vor historischen Änderungen oder dem Versuch die verschiedenen Änderungen der Zeitzonen die
            im Laufe der langen Zeit in den vielen Regionen gemacht wurden, da ZF Komponenten darüber nichts
            wissen. Zum Beispiel kann <ulink url="http://www.statoids.com/tus.html">hier eine historische Liste</ulink>
            mit dutzenden Änderungen von Regierungen angesehen werden und ob eine Region Sommer-/Winterzeit
            unterstützt und sogar in welche Zeitzone eine bestimmte geographische Region gehört. Das bedeutet, wenn
            Datumsberechnungen gemacht werden, wird die Berechnung welche durch die ZF Komponenten durchgeführt wird,
            nicht an diese Änderungen angepasst. Stattdessen wird die korrekte Uhrzeit benutzt, welche für die aktuell
            benutzte Zeitzone angegeben wurde, wobei moderne Regeln für Sommer-/Winterzeit und Zeitzonen Zuordnung
            anhand von geographischen Regionen verwendet werden.
        </para>

    </sect2>

    <sect2 id="zend.locale.selection">

        <title>Auswahl des richtigen Gebietsschemas</title>

        <para>
            In den meisten Situationen wird <code>new Zend_Locale()</code> automatisch das richtige
            Gebietsschema auswählen, wobei die Informationen benutzt werden welche der Webbrowser des
            Benutzers zur Verfügung stellt. Wenn statt dessen <code>new Zend_Locale(Zend_Locale::ENVIRONMENT</code>
            benutzt wird, dann werden die Informationen vom Betriebsystem des hostenden Servers, wie anbei
            beschrieben, dafür genommen.
        </para>

        <example>
            <title>Automatische Auswahl des Gebietsschemas</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
$locale  = new Zend_Locale();
$locale1 = new Zend_Locale(Zend_Locale::BROWSER);     // Standard verhalten, wie eine Zeile weiter oben
$locale2 = new Zend_Locale(Zend_Locale::ENVIRONMENT); // Bevorzuge die Einstellungen des hostenden Servers
$locale3 = new Zend_Locale(Zend_Locale::FRAMEWORK);   // Bevorzuge die Einstellungen der Framework Anwendung
?>]]></programlisting>
        </example>

        <para>
            Der Suchalgorithmus, welcher von <code>Zend_Locale</code> für die automatische Auswahl des
            Gebietsschemas verwendet wird beherrscht drei Informationsquellen:
            <orderedlist>
                <listitem>
                    <para>
                        const <code>Zend_Locale::BROWSER</code> - Der Webbrowser des Benutzer welcher die
                        Informationen mit jeder Anfrage schickt. Diese wird von PHP durch die globale Variable
                        <code>HTTP_ACCEPT_LANGUAGE</code> veröffentlicht. Wenn kein passendes
                        Gebietsschema gefunden wurde, dann wird mit <code>ENVIRONMENT</code> gesucht und
                        als letztes mit <code>FRAMEWORK</code> gesucht.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::ENVIRONMENT</code> - PHP veröffentlicht das Gebietsschema
                        des hostenden Servers über die interne PHP Funktion <code>setlocale()</code>. Wenn
                        kein passendes Gebietsschema gefunden wurde, dann wird mit <code>FRAMEWORK</code>
                        und als letztes mit <code>BROWSER</code> gesucht.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::FRAMEWORK</code> - Wenn der Zend Framework einen standartisierten
                        Weg zur Verfügung stellt um für Komponenten Standardwerte zu definieren (das ist geplant
                        aber noch nicht realisiert), dann wird die Verwendung dieser Konstante das
                        Gebietsschema anhand dieser Standardwerte auswählen. Wenn kein passendes Gebietsschema
                        gefunden wurde, dann wird mit <code>ENVIRONMENT</code> und als letztes mit
                        <code>BROWSER</code> gesucht.
                    </para>
                </listitem>
            </orderedlist>
        </para>

    </sect2>

    <sect2 id="zend.locale.interoperate">

        <title>ZF lokalisierbare Klassen</title>

        <para>
            Im ZF sind lokalisierbare Klassen von <code>Zend_Locale</code> abhängig um ein Gebietsschema
            automatisch auszuwählen, wie im oberen Abschnitt geschrieben. Das Erstellen eines Datums durch
            Verwendung von <code>Zend_Date</code> ohne die Angabe eines Gebietsschemas führt als Ergebnis zu
            einem Objekt mit einem Gebietsschema, basierend auf den Informationen welche durch den Webbrowser des
            Benutzers zur Verfügung gestellt werden.
        </para>

        <example>
            <title>Daten verwenden das aktuelle Gebietsschema des Web Benutzers</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
$date = new Zend_Date('2006',Zend_Date::YEAR);
?>]]></programlisting>
        </example>

        <para>
            Um dieses Standardverhalten zu übergehen, und die eine lokalisierbare ZF Komponente dazu zu bringen
            ein spezielles Gebietsschema zu benutzen welches unabhängig vom Gebietsschema des Besucher der
            Webseite ist, muß als dritter Parameter im Konstruktor das Gebietsschema angegeben werden.
        </para>

        <example>
            <title>Übergehen der Auswahl des standardmäßigen Gebietsschemas</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure/Temperature.php';

$usLocale = new Zend_Locale('en_US');
$date = new Zend_Date('2006', Zend_Date::YEAR, $usLocale);
$temp = new Zend_Measure_Temperature('100,10', Zend_Measure::TEMPERATURE, $usLocale);
?>]]></programlisting>
        </example>

        <para>
            Wenn viele Objekte benutzt werden die alle das gleiche Gebietsschema verwenden, sollte das
            Gebietsschema explizit definiert werden, um die zusätzliche Arbeit des Objekts durch die
            Eruierung des Standardmäßigen Gebietsschemas zu verringern.
        </para>

        <example>
            <title>Optimierung der Geschwindigkeit durch Benutzung eines Standard Gebietsschemas</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure/Temperature.php';

$locale = new Zend_Locale();
$date = new Zend_Date('2006', Zend_Date::YEAR, $locale);
$temp = new Zend_Measure_Temperature('100,10', Zend_Measure::TEMPERATURE, $locale);
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.formatoptions">

        <title>Zend_Locale_Format::setOptions(array $options)</title>

        <para>
            Die Option 'precision' wird benutzt um einen Wert zu verkürzen oder mit extra Ziffern zu strecken.
            Ein Wert von '-1' verhindert die Veränderung der Anzahl an Ziffern im Nachkomma-Teil des Wertes.
            Die 'locale' Option hilft wenn Nummern und Daten analysiert werden und hierbei Trennzeichen oder
            Monatsnamen verwendet werden. Die Datumsformat Option 'format_type' wählt zwischen CLDR/ISO
            Datumsdefinitionen und PHP's date() Definitionen. Die Option 'fix_date' erlaubt oder verhindert eine
            Automatik welche versucht falsche Daten zu korrigieren. Die Option 'number_format' definiert ein
            Standard Format für Nummern bei Verwendung der Funktion <code>toNumber()</code>. (siehe
            <xref
                linkend= "zend.locale.number.localize"/>
            ).
        </para>

        <para>
            Die Option 'date_format' kann verwendet werden um ein Standard Datumsformat zu definieren. Aber Achtung
            bei der Verwendung von getDate(), checkDateFormat() und getTime() nach der Verwendung von setOptions()
            mit einem 'date_format'. Um diese vier Methoden mit einem Standard Datumsformat für ein Gebietsschema
            zu benutzen, muß array('date_format' => null, 'locale' => $locale) in deren Optionen angegeben werden.
        </para>

        <example>
            <title>Daten die das richtige Gebietsschema des Web Benutzers verwenden</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
Zend_Locale_Format::setOptions('locale' => 'en_US', 'fix_date' => true, 'format_type' => 'php');
?>]]></programlisting>
        </example>

        <para>
            Um mit den Standarddefinitionen eines Gebietsschemas zu arbeiten kann die Konstante
            Zend_Locale_Format::STANDARD verwendet werden. Das Setzen der Konstante Zend_Locale_Format::STANDARD
            für 'date_format' benutzt die Standarddefinition des aktuellen Gebietsschemas. Das Setzen für
            'number_format' benutzt das Standard Nummernformat dieses Gebietsschemas. Und das Setzen für 'locale'
            verwendet das Standard Gebietsschema des Servers oder Browsers.
        </para>

        <example>
            <title>Verwendung von STANDARD Definitionen für setOptions()</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
Zend_Locale_Format::setOptions('locale' => 'en_US', 'date_format' => 'dd.MMMM.YYYY');
// Überladen des global gesetzten Datumsformats
$date = Zend_Locale_Format::getDate('2007-04-20, array('date_format' => Zend_Locale_Format::STANDARD);

// Überladen des global gesetzten Standard Gebietsschemas
Zend_Locale_Format::setOptions('locale' => Zend_Locale_Format::STANDARD, 'date_format' => 'dd.MMMM.YYYY');

?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
