<appendix id="coding-standard">
  <title>Zend Framework PHP Code Standard</title>
    <sect1 id="coding-standard.overview">
        <title>Übersicht</title>

        <sect2 id="coding-standard.overview.scope">
            <title>Geltungsbereich</title>

            <para>
                Dieses Dokument bietet Richtlinien und Ressourcen für Entwickler und Teams welche entwickeln
                oder am Zend Framework entwickeln. Die enthaltenen Maßnahmen sind:

                <itemizedlist>
                    <listitem>
                        <para>PHP Dateiformatierung</para>
                    </listitem>

                    <listitem>
                        <para>Namens Konventionen</para>
                    </listitem>

                    <listitem>
                        <para>Code Stil</para>
                    </listitem>

                    <listitem>
                        <para>Inline Dokumentation</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect2>

        <sect2 id="coding-standard.overview.goals">
            <title>Ziele</title>

            <para>
                Gute Programmierstandards sind in jedem Entwicklungsprojekt wichtig, aber speziell wenn
                mehrere Entwickler am gleichen Projekt arbeiten. Programmierstandards helfen einem
                sicherzustellen das der Code von hoher Qualität ist, weniger Fehler hat, und einfach
                zu warten ist.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.php-file-formatting">
        <title>PHP Dateiformatierung</title>

        <sect2 id="coding-standard.php-file-formatting.general">
            <title>Allgemein</title>

            <para>
                Für Dateien, welche nur PHP Code beinhalten ist der schliessende Tag ("?>") nicht
                zugelassen.  Er wird von PHP nicht benötigt.  Durch das Weglassen wird verhindert,
                dass ausversehen Leerzeilen in die Ausgabe eingefügt werden.
            </para>

            <para>
                <emphasis>WICHTIG:</emphasis> Einbeziehen von beliebigen binärischen Daten durch <code>__HALT_COMPILER()</code>
                ist in jeder Zend Framework PHP Datei oder einer ihr abgeleiteten Datei verboten. Das Benutzen
                ist nur bei speziellen Installationsskirpten erlaubt.
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.indentation">
            <title>Einrücken</title>
            <para>Benutze einen Einzug von 4 Leerzeichen, jedoch ohne Tabs.</para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.max-line-length">
            <title>Maximale Zeilenlänge</title>

            <para>
                Die Zielzeilenlänge ist 80 Zeichen. Entwickler sollten so nah wie
                möglich an der 80 Zeichen Grenze bleiben, soweit dies praktikabel
                ist. Längere Zeilen sind aber erlaubt. Die maximale Länge einer
                Zeile beträgt 120 Zeichen.
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.line-termination">
            <title>Zeilenbegrenzung</title>

            <para>
                Zeilenbegrenzung ist der normale Weg für Unix Textdateien. Zeilen müssen mit
                einem Zeilenvorschub (LF) enden. Zeilenvorschübe werden duch eine ordinale 10,
                oder durch 0x0A (hexadecimal) dargestellt.
            </para>

            <para>Benutze kein Wagenrücklauf (CR) wie bei Macintosh (0x0D).</para>

            <para>
                Benutze nicht die Kombination aus Wagenrücklauf und Zeilenvorschub (CRLF) wie
                bei Windows (0x0D, 0x0A).
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.naming-conventions">
        <title>Namens Konventionen</title>

        <sect2 id="coding-standard.naming-conventions.classes">
            <title>Klassen</title>

            <para>
                Der Zend Framework benutzt eine Klassennamen Konvention wobei die Namen der Klassen
                direkt mit den Verzeichnissen übereinstimmen muß in welchen Sie gespeichert sind.
                Das Basisverzeichnis des Zend Framework ist das "Zend/" Verzeichnis, in welchem
                alle Klassen hierarchisch gespeichert werden.
            </para>

            <para>
                Klassennamen dürfen nur alphanumerische Zeichen enthalten. Nummern sind in Klassennamen
                gestattet es wird aber von Ihnen abgeraten. Unterstriche sind nur gestattet im Platz des
                Pfadseperators -- der Dateiname "Zend/Db/Table.php" muß übereinstimmen mit dem Klassennamen
                "Zend_Db_Table".
            </para>

            <para>
                Wenn ein Klassenname aus mehr als einem Wort besteht, muß der erste Buchstabe von jedem neuen
                Wort großgeschrieben werden. Durchgehende Großbuchstaben sind nicht erlaubt, z.B. eine Klasse
                "Zend_PDF" ist nicht erlaubt, aber "Zend_Pdf" ist akzeptierbar.
            </para>

            <para>
                Zend Framework Klassen welche von Zend oder einer der teilnehmenden Partnerfirmen authorisiert
                und mit dem Framework ausgeliefert werden, müssen immer mit "Zend_" beginnen und im
                "Zend/" Verzeichnis hierarchisch geordnet gespeichert werden.
            </para>

            <para>
                Das sind Beispiel von akzeptierbaren Namen für Klassen:

                <programlisting role="php"><![CDATA[
Zend_Db

Zend_View

Zend_View_Helper]]>
                </programlisting>

                <emphasis>WICHTIG:</emphasis> Code welche mit dem Framework arbeitet, aber nicht Teil des
                Frameworks ist, z.B. Code der von Framework Benutzern und nicht von Zend oder einer der
                Partnerfirmen des Frameworks geschrieben wurde, darf nie mit "Zend_" beginnen.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.interfaces">
            <title>Interfaces</title>

            <para>
                Interfaceklassen müssen den gleichen Konventionen folgen wie die anderen Klassen (siehe oben),
                müssen aber mit dem Wort "Interface" enden, wie in diesen Beispielen:

                <programlisting role="php"><![CDATA[
Zend_Log_Adapter_Interface
Zend_Controller_Dispatcher_Interface]]>
                </programlisting>
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.filenames">
            <title>Dateinamen</title>

            <para>
                Für alle anderen Dateien sind nur alphanummerische Zeichen, Unterstriche, und der
                Bindestrich ("-") gestattet. Leerzeichen sind verboten.
            </para>

            <para>
                Jede Datei die irgendeinen PHP Code enthält muß mit der Endung ".php" enden. Diese
                Beispiele zeigen akzeptierbare Dateinamen welche die Klassennamen der Beispiele der
                obigen Sektion enthalten:

                <programlisting role="php"><![CDATA[
Zend/Db.php

Zend/Controller/Front.php

Zend/View/Helper/FormRadio.php]]>
                </programlisting>

                Dateinamen müssen mit dem Mapping der Klassennamen übereinstimmen wie oben beschrieben.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.functions-and-methods">
            <title>Funktionen und Methoden</title>

            <para>
                Funktionsnamen dürfen nur Alphanummerische Zeichen enthalten. Unterstriche sind nicht
                gestattet. Nummern sind in Funktionsnamen gestattet es wird aber von Ihnen abgeraten.
            </para>

            <para>
                Funktionsnamen müssen immer mit einem Kleinbuchstaben anfangen. Wenn Funktionsnamen aus mehr als
                einem Wort bestehen, muß der erste Buchstabe jeden Wortes großgeschrieben werden. Das wird
                normalerweise "camelCaps" Methode genannt.
            </para>

            <para>
                Wortreichtum wird beführwortet. Funktionsnamen sollten so wortreich wie möglich sein um die
                Verständlichkeit des Codes zu erhöhen.
            </para>

            <para>
                Das sind Beispiele akzeptierbarer Namen für Funktionen:

                <programlisting role="php"><![CDATA[
filterInput()

getElementById()

widgetFactory()]]>
                </programlisting>
            </para>

            <para>
                Für objekt-orientiertes Programmieren, sollten Zugriffspunkte für Objekte immer mit
                "get" oder "set" beginnen. Wenn Design-Pattern verwendet werden, wie Singleton oder das
                Factory Pattern, sollte der Name der Methode den Namen des Pattern enthalten wo es
                praktikabel ist, um das Pattern schneller begreifbar zu machen.
            </para>

            <para>
                Funktionen im globalen Bereich ("floating functions") sind gestattet aber es wird von Ihnen
                abgeraten. Es wird vorgeschlagen das diese Funktionen in einer statischen Klasse gewrappt
                werden.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.variables">
            <title>Variablen</title>

            <para>
                Variablennamen dürfen nur Alphanummerische Zeichen enthalten. Unterstriche sind nicht
                gestattet. Nummern sind in Variablen gestattet es wird aber von Ihnen abgeraten.
            </para>

            <para>
                Für Klassenvariablen die mit dem "private" oder "protected" Konstrukt deklariert werden,
                muß das erste Zeichen des Funktionsnamens ein einzelner Unterstrich sein. Das ist die
                einzige akzeptierte Verwendung eines Unterstriches in einem Funktionsnamen. Klassenvariablen
                welche als "public" deklariert werden dürfen nie mit einem Unterstrich beginnen.
            </para>

            <para>
                Wie Funktionsnamen (siehe Abschnitt 3.3, darüber) müssen Variablennamen immer mit einem
                Kleinbuchstaben starten und der "camelCaps" Schreibweise folgen.
            </para>

            <para>
                Wortreichtum wird beführwortet. Variablen sollen immer so wortreich wie möglich sein.
                Von gedrängte Variablennamen wie "$i" und "$n" wird abgeraten für alles andere als die kleinsten
                Schleifen. Wenn eine Schleife mehr als 20 Codezeilen enthält, benötigen die Variablen der Indezes
                einen ausführlicheren Namen.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.constants">
            <title>Konstanten</title>

            <para>
                Konstanten können beides enthalten, sowohl Alphanummerische Zeichen als auch den Unterstrich.
                Nummern sind in Konstantennamen gestattet.
            </para>

            <para>
                Konstanten müssen alle Buchstaben immer großgeschrieben haben.
            </para>

            <para>
                Konstanten müssen als Klassenkonstanten definiert werden mithilfe des "const" Konstruktes.
                Die Definition von Konstanten im globalen Bereich mit "define" ist gestattet aber es wird
                hiervon abgeraten.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.coding-style">
        <title>Code Stil</title>

        <sect2 id="coding-standard.coding-style.php-code-demarcation">
            <title>PHP Code Abgrenzung</title>

            <para>
                PHP Code muß immer mit der kompletten Form des Standard-PHP Tags abgegrenzt sein:

                <programlisting role="php"><![CDATA[
<?php

?>]]>
                </programlisting>
            </para>

            <para>
                Kurze Tags sind nie erlaubt.
            </para>
        </sect2>

        <sect2 id="coding-standard.coding-style.strings">
            <title>Strings</title>

            <sect3 id="coding-standard.coding-style.strings.literals">
                <title>String Literale</title>

                <para>
                    Wenn ein String ein Literal ist (er also keine Variablenvertreter enthält), muß immer das
                    Apostroph oder "einzelne Anführungszeichen" verwendet werden um den String abzugrenzen:

                    <programlisting role="php"><![CDATA[
$a = 'Beispiel String';]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.literals-containing-apostrophes">
                <title>String Literale die Apostrophe enthalten</title>

                <para>
                    Wenn ein literaler String selbst Apostrophe enthält, ist es gestattet den String mit
                    Anführungszeichen oder "doppeltes Anführungszeichen" abzugrenzen. Das ist speziell für
                    SQL Anweisungen zu befürworten:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` from `people` WHERE `name`='Fred' OR `name`='Susan'";]]>
                    </programlisting>

                    Der obige Syntax ist zu bevorzugen im Gegensatz zum Ausbruch von Apostrophs.
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.variable-substitution">
                <title>Variabler Austausch</title>

                <para>
                    Variabler Austausch ist gestatten bei Verwendung einer der zwei Formen:

                    <programlisting role="php"><![CDATA[
$greeting = "Halle $name, willkommen zurück!";

$greeting = "Hallo {$name}, willkommen zurück!";]]>
                    </programlisting>
                </para>

                <para>
                    Aus Gründen der Konstistenz ist folgende Form nicht gestattet:

                    <programlisting role="php"><![CDATA[
$greeting = "Hallo ${name}, willkommen zurück!";]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.string-concatenation">
                <title>Verbinden von Strings</title>

                <para>
                    Strings können verbunden werden indem man den "." Operator verwendet. Ein Leerzeichen muß
                    immer vor und nach dem "." Operator hinzugefügt werden um die Lesbarkeit zu erhöhen:

                    <programlisting role="php"><![CDATA[
$company = 'Zend' . 'Technologies';]]>
                    </programlisting>
                </para>

                <para>
                    Wenn Strings mit dem "." Operator verbunden werden, ist es gestattet die Anweisung in
                    mehrere Zeilen umzubrechen um die Lesbarkeit zu erhöhen. In diesen Fällen sollte jede
                    folgende Zeile mit Leerraum aufgefüllt werden so das der "." Operator genau unterhalb
                    des "=" Operators ist:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` FROM `people` "
     . "WHERE `name` = 'Susan' "
     . "ORDER BY `name` ASC ";]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.arrays">
            <title>Arrays</title>

            <sect3 id="coding-standard.coding-style.arrays.numerically-indexed">
                <title>Nummerisch indizierte Arrays</title>

                <para>Negative Nummern sind in Indezes nicht gestattet.</para>

                <para>
                    Ein indiziertes Array kann mit mit irgendeiner nicht-negativen Nummer beginnen, trotzdem
                    wird davon abgeraten und es wird vorgeschlagen das alle Arrays einen BasisIndex von 0
                    besitzen.
                </para>

                <para>
                    Wenn indizierte Arrays mit dem <code>array</code> Konstrukt deklariert werden, muß ein
                    folgendes Leerzeichen nach jeder Kommabegrenzung hinzugefügt werden um die Lesbarkeit
                    zu erhöhen:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio');]]>
                    </programlisting>
                </para>

                <para>
                    Es ist auch gestattet mehrzeilige indizierte Arrays zu definieren bei Verwendung des
                    "array" Konstrukts. In diesem Fall, muß jede folgende Zeile mit Leerzeichen aufgefüllt
                    werden so das der Beginn jeder Zeile wie folgt erscheint:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500);]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.arrays.associative">
                <title>Assoziative Arrays</title>

                <para>
                    Wenn assoziative Arrays mit dem <code>array</code> Konstrukt deklariert werden, ist es
                    gestattet die Anweisung in mehrere Zeilen zu brechen. In diesem Fall muß jede folgende
                    Linie mit Leerraum aufgefüllt werden so das beide, der Schlüssel und der Wert untereinander
                    stehen:

                    <programlisting role="php"><![CDATA[
$sampleArray = array('firstKey'  => 'firstValue',
                     'secondKey' => 'secondValue');]]>
                    </programlisting>
                 </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.classes">
            <title>Klassen</title>

            <sect3 id="coding-standard.coding-style.classes.declaration">
                <title>Klassen Deklarationen</title>

                <para>
                    Klassen müssen nach der folgenden Namenskonvention benannt werden.
                </para><para>
                    Die Klammer wird immer in der Zeile unter dem Klassennamen geschrieben ("one true brace" Form).
                </para><para>
                    Jede Klasse muß einen Dokumentationsblock haben der dem PHPDocumentor Standard entspricht.
                </para><para>
                    Jeglicher Code innerhalb der Klasse muß vier Leerzeichen eingerückt sein.
                </para><para>
                    Nur eine Klasse ist pro PHP Datei gestattet.
                </para><para>
                    Das Platzieren von zusätzlichem Code in einer Klassendatei ist gestattet aber es wird davon
                    abgeraten. In diesem Dateien müssen zwei leere Zeilen die Klasse von jedem zusätzlichen PHP
                    Code in der Datei seperieren.
                </para><para>
                    Das ist ein Beispiel einer akzeptierbaren Klassendeklaration:

                    <programlisting role="php"><![CDATA[
/**
 * Dokumentations Block hier
 */
class SampleClass
{
    // gesamter Inhalt der Klasse
    // muss mit vier Leerzeichen eingerückt sein
}]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.classes.member-variables">
                <title>Klassenvariablen</title>

                <para>
                    Klassenvariablen müssen nach den folgenden Variablen-Benennungs-Konventionen benannt werden.
                </para><para>
                    Jede Variable die in der Klasse deklariert wird muß am Beginn der Klasse ausgelistet werden,
                    bevor irgendeine Funktion deklariert wird.
                </para><para>
                    Das <code>var</code> Konstrukt ist nicht gestattet.  Klassenvariablen definieren Ihre
                    Sichtbarkeit durch die Verwendung des <code>private</code>, <code>protected</code>,
                    oder <code>public</code> Konstrukts. Der direkte Zugriff auf Klassenvariablen durch das
                    öffentlich machen ist gestattet aber es wird davon abgeraten da hierfür Zugriffsvariablen
                    verwendet werden sollten (set/get).
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.functions-and-methods">
            <title>Funktionen und Methoden</title>

            <sect3 id="coding-standard.coding-style.functions-and-methods.declaration">
                <title>Deklaration von Funktionen und Methoden</title>

                <para>
                    Funktionen müssen nach der folgenden Namenskonvention benannt werden.
                </para><para>
                    Funktionen innerhalb von Klassen müssen immer Ihre Sichtbarkeit durch Verwendung einer der
                    <code>private</code>, <code>protected</code>, oder <code>public</code> Konstrukte definieren.
                </para><para>
                    Wie bei Klassen, wird die Klassem immer in der Zeile unterhalb des Funktionsnamens geschrieben
                    werden ("one true brace" Form).

                    Es gibt kein Leerzeichen zwischen dem Funktionsnamen und der öffnenden Klammer für die Argumente.
                </para><para>
                    Von Funktionen im globalen Raum wird komplett abgeraten.
                </para><para>
                    Das ist ein Beispiel einer akzeptierbaren Funktionsdeklaration in einer Klasse:

                    <programlisting role="php"><![CDATA[
/**
 * Dokumentations Block hier
 */
class Foo
{
    /**
     * Dokumentations Block hier
     */
    public function bar()
    {
        // gesamter Inhalt der Funktion
        // muss durch view Leerzeichen eingerückt sein
    }
}]]>
                    </programlisting>
                </para>

                <para>
                    <emphasis>NOTIZ:</emphasis> Das Übergeben durch Referenz ist nur in der Deklaration der Funktion
                    gestattet:

                    <programlisting role="php"><![CDATA[
/**
 * Dokumentations Block hier
 */
class Foo
{
    /**
     * Dokumentations Block hier
     */
    public function bar(&$baz)
    {}
}]]>
                    </programlisting>
                </para>

                <para>
                    Der Aufruf durch Referenz ist nicht gestattet.
                </para>


                <para>
                    Der Rückgabewert darf nicht in Klammern stehen. Das kann die Lesbarkeit behindern und auch
                    den Code unterbrechen wenn eine Methode später später auf Rückgabe durch Referenz geändert
                    wird.

                    <programlisting role="php"><![CDATA[
/**
 * Dokumentations Block hier
 */
class Foo
{
    /**
     * FALSCH
     */
    public function bar()
    {
        return($this->bar);
    }

    /**
     * RICHTIG
     */
    public function bar()
    {
        return $this->bar;
    }
}]]>
                    </programlisting>
                </para>

            </sect3>

            <sect3 id="coding-standard.coding-style.functions-and-methods.usage">
                <title>Verwendung von Funktionen und Methoden</title>

                <para>
                    Funktionsargumente sind durch ein einzelnes trennendes Leerzeichen nach dem Komma Trennzeichen
                    getrennt. Das ist ein Beispiel für einen akzeptierbaren Funktionsaufruf für eine Funktion die
                    drei Argumente benötigt:

                    <programlisting role="php"><![CDATA[
threeArguments(1, 2, 3);]]>
                    </programlisting>
                </para>

                <para>
                    Übergabe von Referenzen zur Laufzeit ist gestattet. Siehe die Sektion für Funktions Deklarationen
                    für den richtigen Weg um Funktionsargumente per Referenz zu übergeben.
                </para><para>
                    Für Funktionen deren Argumente Arrays gestatten, kann der Funktionsaufruf das "array"
                    Konstrukt beinhalten und in mehrere Zeilen gespalten werden um die Lesbarkeit zu erhöhen.
                    In diesen Fällen ist der Standard für das Schreiben von Arrays trotzdem:

                    <programlisting role="php"><![CDATA[
threeArguments(array(1, 2, 3), 2, 3);

threeArguments(array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500), 2, 3);]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.control-statements">
            <title>Kontrollanweisungen</title>

            <sect3 id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>If / Else / Elseif</title>

                <para>
                    Kontrollanweisungen die auf den <code>if</code> und <code>elseif</code> Konstrukten
                    beruhen müssen ein einzelnes Leerzeichen vor der öffnenden Klammer der bedingten Anweisung,
                    und ein einzelnes Leerzeichen nach der schließenden Klammer.
                </para>

                <para>
                    Innerhalb der bedingten Anweisungen zwischen den Klammern, müssen die Operationen, für die
                    Lesbarkeit, durch Leerzeichen getrennt werden. Innere Klammern sind zu beführworten um
                    die logische Gruppierung von größeren Bedingungen zu erhöhen.
                </para>

                <para>
                    Die öffnende Klammer wird in der selben Zeile geschrieben wie die Bedingungsanweisung.
                    Die schließende Klammer wird immer in einer eigenen Zeile geschrieben. Jeder Inhalt innerhalb
                    der Klammer muß vier Leerzeichen eingerückt werden.

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
}]]>
                    </programlisting>
                </para>

                <para>
                    Für "if" Anweisungen die "elseif" oder "else" beinhalten, muß die Formatierung wie in den
                    folgenden Beispielen stattfinden:

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
} else {
   $a = 7;
}


if ($a != 2) {
    $a = 2;
} elseif ($a == 3) {
   $a = 4;
} else {
   $a = 7;
}]]>
                    </programlisting>
                    PHP erlaubt es solche Anweisungen in einigen Fällen auch ohne Klammern zu schreiben.
                    Der Code Standard macht keine Unterscheidungen und es müssen alle "if", "elseif" oder "else"
                    Anweisungen in Klammern geschrieben werden.
                </para>

                <para>
                    Die Verwendung des "elseif" Konstruktes ist erlaubt es wird aber sehr stark davon abgeraten
                    und es ist die "else if" Kombination zu bevorzugen.
                </para>
            </sect3>

            <sect3 id="coding-standards.coding-style.control-statements.switch">
                <title>Switch</title>

                <para>
                    Kontrollanweisungen die mit dem "switch" Konstrukt geschrieben werden müssen ein einzelnes
                    Leerzeichen vor der öffnenden Klammer der Bedingten Anweisung besitzen, und auch ein einzelnes
                    Leerzeichen nach der schließenden Klammer.
                </para>

                <para>
                    Jeglicher Inhalt innerhalb der "switch" Anweisung muß um vier Leerzeichen eingerückt sein.
                    Der Inhalt unter jeder "case" Anweisung muß um vier zusätzliche Leerzeichen eingerückt werden.
                </para>

                <programlisting role="php"><![CDATA[
switch ($numPeople) {
    case 1:
        break;

    case 2:
        break;

    default:
        break;
}]]>
                </programlisting>

                <para>
                    Das <code>default</code> Konstrukt darf nie bei der <code>switch</code> Anweisung vergessen
                    werden.
                </para>

                <para>
                    <emphasis>NOTIZ:</emphasis> Es ist machmal nützlich eine <code>case</code> Anweisung zu
                    schreiben, die durch das nächste case fällt indem in solchen Fällen kein  <code>break</code>
                    oder <code>return</code> angegeben wird. Um diese Fälle von Fehlern zu unterscheiden, muß jede
                    <code>case</code> Anweisung wo <code>break</code> oder <code>return</code> unterlassen werden
                    den Kommentar "// break intentionally omitted" enthalten.
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standards.inline-documentation">
            <title>Inline Dokumentation</title>

            <sect3 id="coding-standards.inline-documentation.documentation-format">
                <title>Dokumentations Format</title>

                <para>
                    Alle Dokumentations Blöcke ("DocBlock") müssel mit dem phpDocumentor Format kompatibel sein.
                    Die Beschreibung des phpDocumentor Formats is jenseits der Reichweite dieses Dokuments.
                    Für weiterführende Informationen siehe:
                    <ulink url="http://phpdoc.org/">http://phpdoc.org"></ulink>
                </para>

                <para>
                    Alle Sourcecode Datei welche für den Zend Framework geschrieben werden, oder welche mit
                    dem Framework arbeiten müssen einen "file-level" Docblock am Beginn jeder Datei und einen
                    "class-level" Docblock direkt überhalb jeder Klasse enthalten. Anbei sind Beispiele solcher
                    Docblocks.
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.files">
                <title>Dateien</title>

                <para>
                    Jede Datei die PHP Code enthält muß einen Header Block am Beginn der Datei besitzen welcher
                    mindestens diese phpDocumentor Tags enthält:

                    <programlisting role="php"><![CDATA[
/**
 * Kurze Beschreibung der Datei
 *
 * Lange Beschreibung der Datei (wenn vorhanden)...
 *
 * LICENSE: Einige Lizenz Informationen
 *
 * @copyright  2005 Zend Technologies
 * @license    http://www.zend.com/license/3_0.txt   PHP License 3.0
 * @version    CVS: $Id:$
 * @link       http://dev.zend.com/package/PackageName
 * @since      Datei vorhanden seit Release 1.2.0
*/]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.classes">
                <title>Klassen</title>

                <para>
                    Jede Klasse muß einen Docblock haben welche mindestens diese phpDocumentor Tags enthält:

                    <programlisting role="php"><![CDATA[
/**
 * Kurze Beschreibung für die Klasse
 *
 * Lange Beschreibung für die Klasse (wenn vorhanden)...
 *
 * @copyright  2005 Zend Technologies
 * @license    http://www.zend.com/license/3_0.txt   PHP License 3.0
 * @version    Release: @package_version@
 * @link       http://dev.zend.com/package/PackageName
 * @since      Klasse vorhanden seit Release 1.2.0
 * @deprecated Klasse abgeraten ab Release 2.0.0
 */]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.functions">
                <title>Funktionen</title>

                <para>
                Jede Funktion, auch Objekt Methoden, müssen einen Docblock haben welcher mindestens folgendes
                enthält:

                    <itemizedlist>
                        <listitem><para>Eine Beschreibung der Funktion</para></listitem>
                        <listitem><para>Alle Argumente</para></listitem>
                        <listitem><para>Alle möglichen Rückgabewerte</para></listitem>
                    </itemizedlist>
                </para>

                <para>
                    Es ist nicht notwendig das "@access" Tag zu verwenden, weil das Accesslevel bereits vom
                    "public", "private" oder "protected" Konstrukt bekannt ist wenn die Funktion deklariert wird.
                </para>

                <para>
                    Wenn eine Funktion/Methode eine Ausnahme werfen könnte, muß @throws verwendet werden:

                    <programlisting role="php"><![CDATA[
@throws exceptionclass [Beschreibung]
]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>
    </sect1>

</appendix>
<!--
vim:se ts=4 sw=4 et:
-->
