<sect1 id="zend.debug.dumping">

    <title>Dumping Variables 输出变量的值</title>

    <para>
        静态方法<code>Zend_Debug::dump()</code>打印和返回某个表达式或变量的信息。它是将var_dump()封装而成的。它默认带上了(X)HTML的pre标签，使输出更美观。这是个非常常用的调试工具。


    </para>

    <example id="zend.debug.dumping.example">
        <title>dump()使用示例：</title>
        <programlisting role="php"><![CDATA[<?php

Zend_Debug::dump($var, $label=null, $echo=true)

?>]]></programlisting>
    </example>

    <para>
    <code>$var</code>参数指定了要输出的表达式或变量。

    </para>

    <para>

        $label标签参数是用来加在输出信息之前的一段文本。(这非常有用，例如你一次要查看多个变量的信息，你可以为不同变量设置不同label，如“user”，“password”等等，这样不会弄乱--Haohappy注)
    </para>

    <para>
        dump()总会返回信息，但不一定会输出，这取决于<code>$echo</code>参数，指定是否要将信息输出到屏幕。如果<code>$echo</code>参数指定为true，则会输出返回的结果。无论是否指定<code>$echo</code>参数的值，该方法的返回值都包含表达式或变量的信息。
    </para>

    <para>
        <code>Zend_Debug::dump()</code>是对PHP函数<ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>的封装，对输出结果使用 <ulink url="http://php.net/htmlspecialchars"><code>htmlspecialchars()</code></ulink>转义，并加上了(X)HTML <code>&lt;pre&gt;</code>标签，更加美观。

    </para>

    <tip>
        <title>使用Zend_Log进行Debug</title>
        <para>

            使用<code>Zend_Debug::dump()</code>很方便在开发项目时Debug，你可以很容易地增加或移除它。
        </para>
        <para>
        你也可以考虑使用<link linkend="zend.log.overview">Zend_Log</link>来debug，用于更长期的非短暂性的调试和监控。
        例如，你可以使用<code>DEBUG</code>记录级别和Stream记录器来输出<code>Zend_Debug::dump()</code>返回的信息。
        </para>
    </tip>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
