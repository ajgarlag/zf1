<sect1 id="zend.cache.introduction">
    <title>简介</title>
    <para>
        <code>Zend_Cache</code> 提供了一个缓存任何数据的一般方法.
    </para>
    <para>
      在Zend Framework中缓存由前端操作,同时通过后端适配器(<code>File</code>, <code>Sqlite</code>, <code>Memcache</code>...)和
    一个灵活的IDs和Tags系统(标识符和标记系统)存储缓存纪录.使用此方法,易于删除特定类型的纪录(例如:"删除所有标记为tag的纪录")
    </para>
    <para>
        模块(<code>Zend_Cache_Core</code>) 的核心是通用,灵活和可配置.对于特定的需要,为了便捷,这里有一些继承自<code>Zend_Cache_Core</code>的前端:
        <code>Output</code>, <code>File</code>, <code>Function</code> 和 <code>Class</code>.
    </para>
    <example>
        <title>调用 <code>Zend_Cache::factory()</code>取得一个前端</title>
        <para>
            <code>Zend_Cache::factory()</code> 实例化正确的对象并把他们捆绑到一起.
            在这第一个例子中我们将把 <code>Core</code> 前端和 <code>File</code> 后端一起使用.
        </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifeTime' => 7200, // cache lifetime of 2 hours
   'automaticSerialization' => true
);

$backendOptions = array(
    'cacheDir' => './tmp/' // Directory where to put the cache files
);

// 取得一个Zend_Cache_Core 对象
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

?>]]></programlisting>
       <para>
            现在有了一个前端,可用缓存任何类型的数据了(开了序列化'serialization').例如,能够缓存从昂贵的数据库查询中缓存一个结果.结果被缓存后,不再需要连接到数据库;数据直接在缓存中取回和反序列化.
        </para>
            <programlisting role="php"><![CDATA[<?php

// $cache 在先前的例子中已经初始化了

// 查看一个缓存是否存在:
if(!$result = $cache->load('myresult')) {

    // 缓存不命中;连接到数据库

    $db = Zend_Db::factory( [...] );

    $result = $db->fetchAll('SELECT * FROM huge_table');

    $cache->save($result, 'myresult');

} else {

    // cache hit! shout so that we know
    echo "This one is from cache!\n\n";

}

print_r($result);

?>]]></programlisting>
    </example>
    <example>
        <title>用<code>Zend_Cache</code> 输出前端缓存输出</title>
        <para>
        通过加入条件逻辑,我们'mark up'(标记)那些希望缓存输出的段(sections),在<code>start()</code> 和 <code>end()</code>方法间封装这些section(这类似第一个例子,并且是缓存的核心策略).
        </para><para>
            在内部,像往常一样输出你的数据,当执行到<code>end()</code>方法时,所有之前的输出都被缓存.在下一次运行时,整个段(end()方法调用前的代码)将被跳过执行,直接从Cache中取回数据(只要缓存纪录是有效的).
        </para>
            <programlisting role="php"><![CDATA[<?php

$frontendOptions = array(
   'lifeTime' => 30,                  // cache lifetime of half a minute
   'automaticSerialization' => false  // this is default anyway
);
// 翻译时实验系统为Windows,请使用Windows的读者修改cacheDir的路径为实际的路径
$backendOptions = array('cacheDir' => './tmp/');

$cache = Zend_Cache::factory('Output', 'File', $frontendOptions, $backendOptions);

// 传递一个唯一标识符给start()方法
if(!$cache->start('mypage')) {
    // output as usual:

    echo 'Hello world! ';
    echo 'This is cached ('.time().') ';

    $cache->end(); // the output is saved and sent to the browser
}

echo 'This is never cached ('.time().').';

?>]]>       </programlisting>
       <para>
           注意我们两次输出了<code>time()</code>的结果;为演示目的第二次的time()调用是动态的.再运行然后刷新多次;你会注意到当随着时间的流逝第一个数字并没有随时间改变.这是因为第一个数组在缓存段中输出,因此输出是被缓存了.
           30秒后(我们设置了lifetime为30秒)由于缓存纪录超时而变得无效了,第一个数字再次更新,同时于第二个时间匹配(相同).你应该在你的浏览器或者控制台中试一下.
       </para>
    </example>
    <note><para>
        在使用Zend_Cache是特别要注意的Cache标识(传递给<code>save()</code>和<code>start()</code>的参数).它必须对于你所缓存的每个资源唯一,否则不相关的缓存纪录就会相互覆盖,
        更糟的是,导致错误的显示结果.
    </para></note>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->