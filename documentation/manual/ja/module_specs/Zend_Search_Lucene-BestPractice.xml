<sect1 id="zend.search.lucene.best-practice">
    <title>ベストプラクティス</title>

    <sect2 id="zend.search.lucene.best-practice.field-names">
        <title>フィールド名</title>

        <para>
            Zend_Search_Lucene では、フィールド名に関する制限は特にありません。
        </para>

        <para>
            しかし、できれば '<emphasis>id</emphasis>'
            および '<emphasis>score</emphasis>' という名前は使用を控えるようにしましょう。
            これらを使用すると、<code>QueryHit</code>
            のプロパティ名と区別しにくくなります。
        </para>

        <para>
            <code>Zend_Search_Lucene_Search_QueryHit</code> のプロパティ
            <code>id</code> と <code>score</code> はそれぞれ、Lucene
            ドキュメントが内部で使用する ID、検索結果の
            <link linkend="zend.search.lucene.searching.results-scoring">スコア</link>
            を表します。もしドキュメントでこれらと同じ名前のフィールドを使っているのなら、
            そのフィールドにアクセスするには <code>getDocument()</code>
            メソッドを使う必要があります。

            <programlisting role="php"><![CDATA[<?php
$hits = $index->find($query);

foreach ($hits as $hit) {
    // 'title' フィールドを取得します
    $title = $hit->title;

    // 'contents' フィールドを取得します
    $contents = $hit->contents;


    // Lucene ドキュメントの内部 ID を取得します
    $id = $hit->id;

    // 検索結果のスコアを取得します
    $score = $hit->score;


    // 'id' フィールドを取得します
    $docId = $hit->getDocument()->id;

    // 'score' フィールドを取得します
    $docId = $hit->getDocument()->score;

    // 'title' フィールドもこの方法で取得できます
    $title = $hit->getDocument()->title;
}
]]></programlisting>
        </para>
    </sect2>


    <sect2 id="zend.search.lucene.best-practice.indexing-performance">
        <title>インデックス作成のパフォーマンス</title>

        <para>
            インデックス作成のパフォーマンスは、
            リソースの消費量と所要時間、
            そしてインデックスの品質との兼ね合いで決まります。
        </para>

        <para>
            インデックスの品質とは、要するにインデックスセグメントの数のことです。
        </para>

        <para>
            各インデックスセグメントはデータ部とは独立しています。
            つまり、インデックスに含まれるセグメントが多くなればなるほど
            検索に要するメモリと時間は増加します。
        </para>

        <para>
            インデックスの最適化を行うと、
            複数のセグメントをまとめて新しいひとつのセグメントを作成します。
            完全に最適化されたインデックスは、セグメントひとつだけで構成されます。
        </para>

        <para>
            インデックスの最適化を行うには 'optimize()' メソッドを使用します。
            <programlisting role="php"><![CDATA[<?php
$index = Zend_Search_Lucene::open($indexPath);

$index->optimize();
]]></programlisting>
        </para>

        <para>
            インデックスの最適化はデータストリーム上で行われるので、
            それほどメモリは消費しません。ただ、CPU
            リソースをかなり消費し、時間もかかります。
        </para>

        <para>
            Lucene のインデックスセグメントは、その性質上
            更新はできません (更新するには、
            セグメントファイルを新たに作りなおす必要があります)。
            したがって、新しいドキュメントがインデックスに追加されるたびに
            新しいセグメントが作成されることになります。
            その結果、インデックスの品質は下がっていきます。
        </para>

        <para>
            セグメントが作成されるたびにインデックスの自動最適化が行われ、
            一部のセグメントは自動的にマージされます。
        </para>

        <para>
            自動最適化の設定は、次の 3 つのオプションで変更できます
            (<link id="zend.search.lucene.index-creation.optimization">インデックスの最適化</link>
            を参照ください)。
            <itemizedlist>
                <listitem>
                    <para><emphasis>MaxBufferedDocs</emphasis>
                          は、メモリ内のバッファに保持されるドキュメントの最大数です。
                          この数を超えると、新しいセグメントを作成して
                          ハードディスクに書き込みます。</para>
                </listitem>
                <listitem>
                    <para><emphasis>MaxMergeDocs</emphasis>
                          は、自動最適化によって新しいセグメントへのマージを行う基準となる
                          ドキュメント数です。</para>
                </listitem>
                <listitem>
                    <para><emphasis>MergeFactor</emphasis>
                          は、自動最適化を行う頻度を指定します。</para>
                </listitem>
            </itemizedlist>
            <note>
                <para>
                    これらのオプションはすべて Zend_Search_Lucene
                    オブジェクトのプロパティであり、インデックスのプロパティではありません。
                    したがって、この設定は現在使用中の
                    <code>Zend_Search_Lucene</code> オブジェクトに対してのみ働くようになり、
                    スクリプトによって設定は異なります。
                </para>
            </note>
        </para>

        <para>
            <emphasis>MaxBufferedDocs</emphasis> は、
            スクリプトを一回実行するたびにひとつのドキュメントしか扱わない場合は
            何の影響も及ぼしません。
            逆に、バッチ処理の場合にはこの設定が非常に重要になります。
            値を大きくするとインデックス作成の速度が上がりますが、
            同時に大量のメモリを消費するようになります。
        </para>

        <para>
            <emphasis>MaxBufferedDocs</emphasis>
            パラメータの値として最適なものを計算する公式はありません。
            これはドキュメントのサイズや解析器、使用できるメモリ量などに依存するからです。
        </para>

        <para>
            最適な設定値を取得するには、
            扱うであろうドキュメントの中で最もサイズが大きいものを用いて
            何度かテストをしてみましょう
            <footnote>
              <para>
                <code>memory_get_usage()</code>
                や <code>memory_get_peak_usage()</code>
                で、メモリの使用量を確認します。
              </para>
            </footnote>。
            使用可能なメモリのうち半分を超えない程度のメモリ消費量に抑えておくことをお勧めします。
        </para>


        <para>
            <emphasis>MaxMergeDocs</emphasis> はセグメントの大きさ
            (これはドキュメントの大きさによって決まります) を制限します。
            これにより、自動最適化の時間を短縮することができます。
            つまり、<code>addDocument()</code> メソッドが
            ある時間以上は実行されなくなります。
            これは、対話的なアプリケーションで重要になります。
        </para>

        <para>
            <emphasis>MaxMergeDocs</emphasis> の設定値を小さくすると、
            バッチ処理のパフォーマンスもあがります。
            インデックスの自動最適化は対話的な処理であり、
            ひとつひとつ順を追って実行していきます。
            小さなセグメントたちがひとつの大きなセグメントにまとめられ、
            さらにまたそれが他のセグメントとまとまってより大きなセグメントになり、
            といった具合です。インデックスの最適化を完全に行うと、
            処理が非常に効率的になります。
        </para>

        <para>
            セグメントのサイズを小さくするとインデックスの品質が下がり、
            大量のセグメントができあがってしまいます。場合によっては、OS
            の制限に引っかかって "オープンしているファイルが多すぎる"
            というエラーが発生するかもしれません
            <footnote>
              <para>
                Zend_Search_Lucene は、セグメントファイルをずっとオープンしたままにしておきます。
                これによって検索の効率を上げています。
              </para>
            </footnote>。
        </para>

        <para>
            したがって、バックグラウンドでのインデックスの最適化は対話モードで行い、
            バッチ処理用の <emphasis>MaxMergeDocs</emphasis>
            はあまり小さくしすぎないようにしなければなりません。
        </para>


        <para>
            <emphasis>MergeFactor</emphasis> は自動最適化の頻度に影響を及ぼします。
            値を小さくすると、最適化されていないインデックスの品質が上がります。
            値を大きくするとインデックス作成の策度が上がりますが、
            セグメントの数も増えます。何度も言いますが、これは
            "オープンしているファイルが多すぎる" エラーの原因となりえます。
        </para>

        <para>
            <emphasis>MergeFactor</emphasis> は、以下の条件を満たす大きさで
            インデックスセグメントをグループ化します。
            <orderedlist>
                <listitem><para><emphasis>MaxBufferedDocs</emphasis> 以下</para></listitem>
                <listitem><para><emphasis>MaxBufferedDocs</emphasis> より大きいが
                                <emphasis>MaxBufferedDocs</emphasis>*<emphasis>MergeFactor</emphasis> を超えない</para></listitem>
                <listitem><para><emphasis>MaxBufferedDocs</emphasis>*<emphasis>MergeFactor</emphasis> より大きいが
                <emphasis>MaxBufferedDocs</emphasis>*<emphasis>MergeFactor</emphasis>*<emphasis>MergeFactor</emphasis> を超えない</para></listitem>
                <listitem><para>...</para></listitem>
            </orderedlist>
        </para>

        <para>
            Zend_Search_Lucene は、<code>addDocument()</code>
            をコールするたびにセグメントの状況を調べ、
            いくつかのセグメントをまとめて次のグループの新しいセグメントに移動できるかどうかを確認します。
            できる場合はマージを行います。
        </para>

        <para>
            つまり、N 個のグループからなるインデックスには <emphasis>MaxBufferedDocs</emphasis> + (N-1)*<emphasis>MergeFactor</emphasis>
            のセグメントが含まれ、少なくとも
            <emphasis>MaxBufferedDocs</emphasis>*<emphasis>MergeFactor</emphasis><superscript>(N-1)</superscript>
            のドキュメントが存在することになります。
        </para>

        <para>
            この式で、インデックス内のセグメントの概数を求めることができます。
        </para>
        <para>
            <emphasis>NumberOfSegments</emphasis>  &lt;= <emphasis>MaxBufferedDocs</emphasis> + <emphasis>MergeFactor</emphasis>*log
            <subscript><emphasis>MergeFactor</emphasis></subscript> (<emphasis>NumberOfDocuments</emphasis>/<emphasis>MaxBufferedDocs</emphasis>)
        </para>

        <para>
            <emphasis>MaxBufferedDocs</emphasis> は、使用できるメモリ量によって決まります。
            MergeFactor を適切に設定することで、セグメントの数を調整することができます。
        </para>


        <para>
            バッチ処理においては、<emphasis>MergeFactor</emphasis>
            パラメータを調整するほうが <emphasis>MaxMergeDocs</emphasis>
            を調整するよりも効率的です。しかし、微調整はできず大雑把なものとなります。
            そこで、まず上の公式をもとに <emphasis>MergeFactor</emphasis> を調整し、
            それから <emphasis>MaxMergeDocs</emphasis> を微調整してパフォーマンスを最適化しましょう。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.best-practice.shutting-down">
        <title>インデックスの終了時処理</title>

        <para>
            <code>Zend_Search_Lucene</code> オブジェクトは、
            終了時にちょっとした作業を行います。
            これは、インデックスにドキュメントが追加された場合に行われます。
        </para>

        <para>
            まず、バッファに追加されたままでセグメントが作成されていないドキュメントの処理をします。
        </para>

        <para>
            また、場合によっては自動最適化も行います。
        </para>

        <para>
            インデックスオブジェクトは、自分自身および QueryHit
            オブジェクトがすべてスコープ外に出た時点で自動的に終了処理を行います。
        </para>

        <para>
            インデックスオブジェクトがグローバル変数に格納されている場合は、
            スクリプトの終了時に破棄されます
            <footnote>
              <para>
                インデックスや QueryHit オブジェクトが複合データ型から参照されている場合にもこれは起こりえます。
                たとえば、循環参照を含むオブジェクトはスクリプトの終了時まで破棄されません。
              </para>
            </footnote>。
        </para>

        <para>
            PHP の例外処理もここで終了します。
        </para>

        <para>
            これは通常のインデックス終了処理を妨げることはありませんが、
            何かエラーが発生した際に正しいエラー情報を取得できなくなる可能性があります。
        </para>

        <para>
            この問題を回避する方法はふたつあります。
        </para>

        <para>
            まずは、強制的にスコープ外に出す方法です。
            <programlisting role="php"><![CDATA[<?php
$index = Zend_Search_Lucene::open($indexPath);

...

unset($index);
?>]]></programlisting>
        </para>

        <para>
            そしてもうひとつは、スクリプトの終了前にコミット操作を行うことです。
            <programlisting role="php"><![CDATA[<?php
$index = Zend_Search_Lucene::open($indexPath);

$index->commit();
?>]]></programlisting>
            これについては、このドキュメントの
            "<link linkend="zend.search.lucene.advanced.static">応用: 静的プロパティとしてのインデックスの使用</link>"
            でも説明しています。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.best-practice.unique-id">
        <title>一意な ID によるドキュメントの取得</title>

        <para>
            ドキュメントの一意な ID、たとえば URL やパス、データベース上の ID
            などをインデックスに保存しておくとよいでしょう。
        </para>

        <para>
            <code>Zend_Search_Lucene</code> には <code>termDocs()</code>
            というメソッドがあり、指定した単語を含むドキュメントを取得することができます。
        </para>

        <para>
            これは <code>find()</code> メソッドよりも効率的です。
            <programlisting role="php"><![CDATA[<?php
// find() メソッドでクエリ文字列を指定することによるドキュメントの取得
$query = $idFieldName . ':' . $docId;
$hits  = $index->find($query);
foreach ($hits as $hit) {
    $title    = $hit->title;
    $contents = $hit->contents;
    ...
}
...

// find() メソッドでクエリ API を使用することによるドキュメントの取得
$term = new Zend_Search_Lucene_Index_Term($docId, idFieldName);
$query = new Zend_Search_Lucene_Search_Query_Term($term);
$hits  = $index->find($query);
foreach ($hits as $hit) {
    $title    = $hit->title;
    $contents = $hit->contents;
    ...
}

...

// termDocs() メソッドによるドキュメントの取得
$term = new Zend_Search_Lucene_Index_Term($docId, idFieldName);
$docIds  = $index->termDocs($term);
foreach ($docIds as $id) {
    $doc = $index->getDocument($id);
    $title    = $doc->title;
    $contents = $doc->contents;
    ...
}
]]></programlisting>
        </para>
    </sect2>
</sect1>
