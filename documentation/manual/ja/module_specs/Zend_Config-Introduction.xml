<sect1 id="zend.config.introduction">
    <title>導入</title>
    <para>
        <code>Zend_Config</code> は、アプリケーションの設定データを
        簡単に使用できるようにするために設計されたものです。
        階層構造になったプロパティを使用して、設定データを簡単に
        アプリケーションに読み込めるようになっています。
        設定データは、階層構造のデータ保存をサポートしている
        さまざまな媒体から読み込むことができます。
        現時点で <code>Zend_Config</code> が提供している設定データアダプタは
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
        と <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>
        の二種類で、テキストファイルに格納された設定データを使用できるようになっています。.
    </para>
    <example id="zend.config.introduction.example.using">
        <title>Zend_Config の使用例</title>
        <para>
            通常は、<link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
            あるいは <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>
            のようなアダプタクラスを使用することが想定されています。
            しかし、もし設定データが PHP の配列として存在するのなら、
            単にそれを <code>Zend_Config</code> のコンストラクタに渡すだけで、
            シンプルなオブジェクト指向のインターフェイスを使用することができます。
        </para>
        <programlisting role="php"><![CDATA[<?php
// 設定データは配列で渡されます
$configArray = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// 設定データに対するオブジェクト指向のラッパーを作成します
require_once 'Zend/Config.php';
$config = new Zend_Config($configArray);

// 設定データを表示します (結果は 'www.example.com' となります)
echo $config->webhost;

// 設定データを使用してデータベースに接続します
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);]]>
        </programlisting>
    </example>
    <para>
        上の例で説明したように、<code>Zend_Config</code> を使用すると、
        コンストラクタに渡されたデータについて、
        階層化されたプロパティの形式でアクセスできるようになります。
    </para>
    <para>
        このようにオブジェクト思考形式でデータの値にアクセスするだけでなく、
        <code>Zend_Config</code> では <code>get()</code> メソッドも用意しています。
        これは、指定した要素が存在しない場合にデフォルト値を返すように設定できます。
        たとえば次のように使用します。
    </para>
    <programlisting role="php"><![CDATA[<?php
    $host = $config->database->get('host', 'localhost');]]>
    </programlisting>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
