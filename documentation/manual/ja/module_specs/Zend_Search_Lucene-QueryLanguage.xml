<sect1 id="zend.search.lucene.query-language">
    <title>クエリ言語</title>

    <para>
        Java Lucene および Zend_Search_Lucene では、非常に強力なクエリ言語を使用できます。
    </para>

    <para>
        これらふたつはほぼ同じですが、微妙に異なる点もあります。
        異なる点については以下で説明します。
    </para>

    <para>
        Java Lucene のクエリ言語の文法についての完全な文書は
        <ulink url="http://lucene.apache.org/java/2_0_0/queryparsersyntax.html">ここ</ulink>
        にあります。
    </para>

    <sect2 id="zend.search.lucene.query-language.terms">
        <title>用語</title>

        <para>
            クエリは、単語と演算子から成り立ちます。単語には三種類の形式があります。
            単一の単語、フレーズ、そしてサブクエリです。
        </para>
        <para>
            単一の単語とは、"test" や "hello" のようなひとつの単語です。
        </para>
        <para>
            フレーズとは、ダブルクォートで囲まれた複数の単語のグループ、たとえば
            "hello dolly" です。
        </para>
        <para>
            サブクエリとは、括弧で囲まれたクエリ、たとえば "(hello dolly)" です。
        </para>
        <para>
            複数の単語を論理演算子で組み合わせることで、より複雑なクエリを作成できます
            (以下を参照ください)。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.fields">
        <title>フィールド</title>

        <para>
            Lucene は、フィールド指定したデータをサポートしています。
            検索を行う際には、クエリを指定することもできますし、
            デフォルトのフィールドを使用することもできます。
            フィールド名はインデックス化されたデータに依存します。また、
            デフォルトのフィールドは現在の設定によって決まります。
        </para>
        <para>
            Java Lucene との最初の (そして大きな) 違いは、デフォルトでは
            <emphasis>すべてのフィールド</emphasis> が検索の対象になるということです。
        </para>
        <para>
            Zend_Search_Lucene クラスにはふたつの静的メソッドがあり、
            この設定を操作することができます。
        </para>
        <programlisting role="php"><![CDATA[<?php
$defaultSearchField = Zend_Search_Lucene::getDefaultSearchField();
...
Zend_Search_Lucene::setDefaultSearchField('contents');]]></programlisting>

        <para>
            <code>null</code> 値は、すべてのフィールドを検索の対象とすることを意味します。
            これがデフォルトの設定です。
        </para>
        <para>
            フィールドを指定するには、まずフィールド名をタイプし、その後にコロン ":"
            を続け、探したい単語を指定します。
        </para>
        <para>
            例を見てみましょう。Lucene インデックスにはふたつのフィールド
            title および text があり、text がデフォルトのフィールドであるとします。
            タイトルが "The Right Way" で本文に "don't go this way"
            が含まれるドキュメントを探したいなら、
        </para>
        <programlisting role="querystring"><![CDATA[title:"The Right Way" AND text:go]]></programlisting>
        <para>
            あるいは
        </para>
        <programlisting role="querystring"><![CDATA[title:"Do it right" AND go]]></programlisting>
        <para>
            とします。"text" がデフォルトのフィールドなら、フィールドの指定は必須ではなくなります。
        </para>

        <para>
            注意: フィールドが有効なのは、その直後にある単語、
            フレーズあるいはサブクエリだけであることに注意しましょう。つまり、クエリ
            <programlisting role="querystring"><![CDATA[title:Do it right]]></programlisting>
            は "Do" だけを title フィールドから探し、"it" や "right"
            はデフォルトのフィールドから探します。デフォルトのフィールドが
            <code>null</code> に設定されている場合は、"it" や "right"
            はすべてのフィールドから探します。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.modifiers">
        <title>単語の修正子</title>

        <para>
            Lucene は、クエリの単語を修飾して幅広い検索オプションを指定することをサポートしています。
        </para>
        <para>
            Zend_Search_Lucene では、現在は "~" 修正子をフレーズについてのみサポートしています。
            <footnote>
                <para>
                    "~" はあいまい検索に用いられます。しかし、あいまい検索のクエリはまだサポートされていません。
                </para>
            </footnote>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.proximity-search">
        <title>近接検索</title>

        <para>
            Lucene は、複数の単語が指定した範囲内にあらわれる状態の検索をサポートしています。
            近接検索を行うには、チルダ記号 "~" をフレーズの最後に指定します。
            たとえば、"Zend" と "Framework" がお互い 10 ワードの範囲内にあらわれるドキュメントを検索するには
            <programlisting role="querystring"><![CDATA["Zend Framework"~10]]></programlisting>
            とします。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boosting">
        <title>単語の強調</title>

        <para>
            Java Lucene および Zend_Search_Lucene は、
            見つかった単語にもとづいてドキュメントの関連度を提供します。
            ある単語の関連性を高くするには、キャレット記号 "^" に強調度 (数値)
            をあわせたものを、検索する単語の最後につなげます。
            強調度を高くするほど、その単語の関連性が高くなります。
        </para>
        <para>
            この機能を使用すると、単語の強調度によってドキュメントの関連性を制御できるようになります。
            たとえば
            <programlisting role="querystring"><![CDATA[PHP framework]]></programlisting>
            を検索しようとしており、単語 "PHP" をより重視したいとしましょう。
            そんな場合は ^ 記号と強調度を単語の後に続けます。つまり
            <programlisting role="querystring"><![CDATA[PHP^4 framework]]></programlisting>
            のようにします。これにより、PHP という単語を含むドキュメントがより重視されるようになります。
            フレーズやサブクエリを強調することも可能です。たとえば
            <programlisting role="querystring"><![CDATA["PHP framework"^4 "Zend Framework"]]></programlisting>
            のようになります。デフォルトの強調度は 1 です。強調度には正の数値を指定しますが、
            1 より小さくする (たとえば 0.2 など) ことも可能です。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boolean">
        <title>論理演算子</title>

        <para>
            論理演算子によって、複数の単語を組み合わせることができます。
            Lucene では、論理演算子として AND、"+"、OR、NOT および "-"
            をサポートしています。Java Lucene では論理演算子をすべて大文字にする必要がありますが、
            Zend_Search_Lucene ではその必要はありません。
        </para>

        <para>
            論理演算子によって、複数の単語を組み合わせることができます。
            Lucene では、論理演算子として AND、"+"、OR、NOT および "-"
            をサポートしています。
        </para>

        <para>
            論理クエリを作成するための方式は、大きく AND、OR および NOT の組と "+"、"-"
            の組に分けられます。Java Lucene とは異なり、Zend_Search_Lucene
            ではこれらの二つの組を混ぜて使うことはできません。
        </para>
        <para>
            AND/OR/NOT 形式を使用する場合は、AND/OR 演算子がすべてのクエリ単語の間に存在する必要があります。
            各単語の前には NOT 演算子をつけることができます。AND 演算子の優先順位は OR
            より高くなります。これは Java Lucene の挙動とは異なります。
        </para>

        <sect3 id="zend.search.lucene.query-language.boolean.and">
            <title>AND</title>
            <para>
                AND 演算子の意味は、"AND グループ"
                のすべての単語がドキュメントにマッチしなければならないということです。
            </para>
            <para>
                "PHP framework" および "Zend Framework" を含むドキュメントを検索するには
                <programlisting role="querystring"><![CDATA["PHP framework" AND "Zend Framework"]]></programlisting>
                を使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.or">
            <title>OR</title>
            <para>
                OR 演算子は、クエリをいくつかのオプションに分割します。
            </para>
            <para>
                "PHP framework" あるいは "Zend Framework" を含むドキュメントを検索するには
                <programlisting role="querystring"><![CDATA["PHP framework" OR "Zend Framework"]]></programlisting>
                を使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.not">
            <title>NOT</title>
            <para>
                NOT 演算子は、NOT の後に続く単語を含むドキュメントを除外します。
                しかし "AND グループ" が NOT 演算子つきの単語しか含まない場合は、
                インデックス化されたドキュメント全体ではなく空の結果を返します。
            </para>
            <para>
                "PHP framework" を含むが "Zend Framework" は含まないドキュメントを検索するには
                <programlisting role="querystring"><![CDATA["PHP framework" AND NOT "Zend Framework"]]></programlisting>
                を使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.other-form">
            <title>&amp;&amp;、|| および ! 演算子</title>
            <para>
                &amp;&amp;、|| および ! は、それぞれ AND、OR および NOT 演算子の代わりに使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.plus">
            <title>+</title>
            <para>
                "+" 演算子 (必須演算子) は、
                "+" 記号の後の単語が必ずドキュメントにマッチしなければならないことを意味します。
            </para>
            <para>
                "Zend" を必ず含み、"Framework" を含んでも含まなくてもかまわないドキュメントを検索するには
                <programlisting role="querystring"><![CDATA[+Zend Framework]]></programlisting>
                を使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.minus">
            <title>-</title>
            <para>
                "-" 演算子 (禁止演算子) は、
                "-" 記号の後の単語を含むドキュメントを検索結果から除外します。
            </para>
            <para>
                "PHP framework" は含むが "Zend Framework" は含まないドキュメントを検索するには
                <programlisting role="querystring"><![CDATA["PHP framework" -"Zend Framework"]]></programlisting>
                を使用します。
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.no-operator">
            <title>演算子なし</title>
            <para>
                演算子を使用しなかった場合は、
                その挙動は "デフォルトの boolean 演算子" として定義されます。
            </para>
            <para>
                これは、デフォルトでは <code>OR</code> となります。
            </para>
            <para>
                つまり、その単語は任意となるということです。
                その単語はドキュメント中に存在するかもしれないし、しないかもしれません。
                ただ、その単語を含むドキュメントのほうが高いスコアとなります。
            </para>
            <para>
                "PHP framework" は必須で "Zend Framework" は含んでも含まなくてもかまわないドキュメントを検索するには
                <programlisting role="querystring"><![CDATA[+"PHP framework" "Zend Framework"]]></programlisting>
                を使用します。
            </para>

            <para>
                デフォルトの boolean 演算子を設定したり取得したりするには、それぞれ
                <code>Zend_Search_Lucene_Search_QueryParser::setDefaultOperator($operator)</code> および
                <code>Zend_Search_Lucene_Search_QueryParser::getDefaultOperator()</code> を使用します。
            </para>
            <para>
                これらのメソッドで使用する定数は、
                <code>Zend_Search_Lucene_Search_QueryParser::B_AND</code> および
                <code>Zend_Search_Lucene_Search_QueryParser::B_OR</code> です。
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.grouping">
        <title>グループ化</title>

        <para>
            Java Lucene および Zend_Search_Lucene では、
            括弧を使用して条件をグループ化することによるサブクエリの作成をサポートしています。
            これは、クエリのロジックを制御したい場合や異なるスタイルの論理クエリを共用したい場合などに便利です。
            <programlisting role="querystring"><![CDATA[+(framework OR library) +php]]></programlisting>
            Zend_Search_Lucene は、あらゆるレベルのサブクエリをサポートしています。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.field-grouping">
        <title>フィールドのグループ化</title>

        <para>
            Lucene では、括弧を使用して複数の条件をひとつのフィールドに適用することができます。
        </para>
        <para>
            タイトルに単語 "return" とフレーズ "pink panther" の両方を含むドキュメントを検索するには
            <programlisting role="querystring"><![CDATA[title:(+return +"pink panther")]]></programlisting>
            を使用します。Zend_Search_Lucene は、あらゆるレベルのサブクエリをサポートしています。
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.escaping">
        <title>特殊文字のエスケープ</title>

        <para>
            Lucene は、クエリの文法に含まれる特殊文字のエスケープをサポートしています。
            特殊文字に含まれるの文字は次のとおりです。
        </para>
        <para>
            + - &amp;&amp; || ! ( ) { } [ ] ^ " ~ * ? : \
        </para>
        <para>
            + および - が単一の単語の中に含まれる場合は、通常の文字として扱われます。
        </para>
        <para>
            これらの文字をエスケープするには、その文字の前に \ をつけます。
            たとえば、(1+1):2 を検索するには
            <programlisting role="querystring"><![CDATA[\(1\+1\)\:2]]></programlisting>
            を使用します。
        </para>
    </sect2>

</sect1>
