<appendix id="coding-standard">
  <title>Zend Framework PHP Kodlama Standardı</title>
    <sect1 id="coding-standard.overview">
        <title>Genel Açıklama</title>

        <sect2 id="coding-standard.overview.scope">
            <title>Kapsam</title>

            <para>
		Bu belge geliştiriciler ve geliştirici takımları veya Zend Framework üzerinde
		geliştirme yapanlar için yönergeler ve kaynaklar sağlamaktadır.		
		Kapsanan konular :

                <itemizedlist>
                    <listitem>
                        <para>PHP Dosya Biçimlemesi</para>
                    </listitem>

                    <listitem>
                        <para>İsimlendirme Kuralları</para>
                    </listitem>

                    <listitem>
                        <para>Kodlama Stili</para>
                    </listitem>

                    <listitem>
                        <para>Satıriçi Belgelendirme</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect2>

        <sect2 id="coding-standard.overview.goals">
            <title>Amaçlar</title>

            <para>
		Her geliştirme projesinde iyi kodlama standartları önemlidir , ama bilhassa birden fazla
		geliştirici aynı proje üstünde çalıştığında önemlidir.Kodlama standartlarına sahip olmak
		kodun yüksek kaliteli , az hatalı ve kolayca bakıma alınabilir olmasını sağlamaktadır.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.php-file-formatting">
	    <title>PHP Dosya Biçimlemesi</title>

        <sect2 id="coding-standard.php-file-formatting.general">
            <title>Genel</title>

            <para>
                Sadece PHP kodu içeren dosyalar için kapama etiketi ("?>") kullanılmamalı.
		PHP tarafından ihtiyaç duyulmamaktadır.Bunu eklememek takip eden whitespace karakterlerin kazayla
		çıktıya eklenmesini önlemektedir.
            </para>

            <para>
                <emphasis>ÖNEMLİ:</emphasis><code>__HALT_COMPILER()</code> ile ikili herhangi veri dahil edilebilir olmasına		
		rağmen herhangi bir Zend Framework PHP dosyasıyla veya bunlardan türetilen dosyalarda dahil etme engellenmiştir.
		Bu özelliğin kullanımına sadece bazı özel kurulum betiklerinde izin verilmiştir.	
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.indentation">
            <title>Girintili Yazma</title>

            <para>Satırbaşı boşluğu olarak tab olmadan 4 boşluk kullanın.</para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.max-line-length">
            <title>Maksimum Satır Uzunluğu</title>

            <para>
                Hedef satır uzunluğu 80 karakterdir , örn. geliştiriciler mümkün olduğunca 
		kodu pratik olan 80-sütün sınırına yakın tutmalılar.Gene de daha uzun satırlar
		kabul edilebilir.Herhangi bir satır PHP kodunun maksimum uzunluğu 120 karakterdir.
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.line-termination">
            <title>Satır Sonlandırma</title>

            <para>
		Satır sonlandırma unix metin dosyaları için standart bir yöntemdir.Satırlar 
		mutlaka linefeed(LF) ile bitmelidir.Linefeed'ler ordinal olarak 10 veya onaltılık 
		olarak 0x0A şeklinde temsil edilir.
            </para>

	    <para>Carriage return(CR)'leri Macintosh bilgisayarlardaki gibi (0x0D) kullanmayın. </para>

            <para>
		Carriage return/linefeed kombinasyonunu (CRLF) Windows bilgisayarlardaki gibi (0x0D, 0x0A) kullanmayın.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.naming-conventions">
	    <title>İsimlendirme Kuralları</title>

        <sect2 id="coding-standard.naming-conventions.classes">
            <title>Sınıflar</title>

            <para>
		Zend Framework sınıfların isimlerini bulundukları dizinlere eşlenmesini sağlayan  bir isimlendirme kuralına sahip. 
		Zend Framework'ün kök dizini altındaki tüm sınıfların hiyerarşik olarak barındırıldığı "Zend/" dizinidir.
            </para>

            <para>
                Sınıf isimleri sadece alfanümerik karakterlerden oluşabilir.
		Numaralar sınıf isimlerinde kullanılabilirler ancak bu kullanım uygun bulunmamaktadır.
		Altçizgilerin sadece konum ayıracının yerine kullanılmasına izin verilir -- "Zend/Db/Table.php" dosya
		adı mutlaka "Zend_Db_Table" sınıfına  eşleme yapmalıdır.	
            </para>

            <para>
                Eğer sınıf adı birden çok kelimeden oluşuyorsa , her yeni kelimenin ilk harfi büyük harfe çevrilmelidir.
		Ardışık büyütülmüş harflere izin verilmez, ör. "Zend_Pdf" sınıf ismi kabul edilirken "Zend_PDF" sınıf adı
		kabul edilmez.
            </para>

            <para>
		Zend tarafından veya katılımcı ortak firmalardan biri tarafından 
		yazılan ve Zend Framework ile dağıtılan Zend Framework sınıfları "Zend_" ile başlamalı
		ve bundan dolayı hiyerarşik olarak "Zend/" dizini içinde yerini almalı.
            </para>

            <para>
                Bunlar sınıflar için kabul edilebilir isimler :
                

                <programlisting role="php"><![CDATA[
Zend_Db

Zend_View

Zend_View_Helper]]>
                </programlisting>

                <emphasis>ÖNEMLİ:</emphasis>  Framework ile çalışan fakat framework'ün bir parçası olmayan
		kod ör. framework'ün son kullanıcısı tarafından yazılan ve Zend veya framework'e ortak şirketlerin
		olmayan kod asla "Zend_" ile başlamamalıdır.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.interfaces">
            <title>Arayüzler</title>

            <para>
                Arayüz sınıfları diğer sınıflarla aynı kurallara uymalıdır (yukarıya bakın) ,
		buna rağmen aşağıdaki örneklerde olduğu gibi mutlaka "Interface" kelimesi ile bitmeli :

                <programlisting role="php"><![CDATA[
Zend_Log_Adapter_Interface
Zend_Controller_Dispatcher_Interface]]>
                </programlisting>
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.filenames">
            <title>Dosya Adları</title>

            <para>
		Diğer tüm dosyalar için sadece alfanümerik karakterler , altçizgiler ve tire karakteri ("-")
		kullanılabilir. Boşluklar ve geri kalan karakterler kullanılamaz. 
            </para>

            <para>
                PHP kodu içeren her dosya mutlaka ".php" dosya uzantısına sahip olmalıdır.
		Bu örnekler yukarıdaki bölümdeki sınıf isimlerini içererek kabul edilebilen dosya isimleri
		göstermektedir :
		

                <programlisting role="php"><![CDATA[
Zend/Db.php

Zend/Controller/Front.php

Zend/View/Helper/FormRadio.php]]>
                </programlisting>
		Dosya isimleri yukarıda açıklandığı gibi sınıf adına göre eşleşmeyi takip etmelidir.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.functions-and-methods">
            <title>Fonksiyonlar ve Metodlar</title>

            <para>
		Fonksiyon isimleri sadece alfanümerik karakterler içerebilir. Altçizgiler fonksiyon isimlerinde
		kullanılamaz. Numaralar kullanılabilir ancak bu kullanım uygun bulunmamaktadır                
            </para>

            <para>
                Fonksiyon isimleri her zaman küçük harfle başlamalı. Fonksiyon ismi birden fazla kelimeden oluştuğunda
		her kelimenin ilk harfi büyük olmalı. Buna genellikle "camelCaps" metodu denir.
            </para>

            <para>
                Verbosity is encouraged. Function names should be as verbose as is practical to enhance the
                understandability of code.
            </para>

            <para>
                These are examples of acceptable names for functions:

                <programlisting role="php"><![CDATA[
filterInput()

getElementById()

widgetFactory()]]>
                </programlisting>
            </para>

            <para>
                For object-oriented programming, accessors for objects should always be prefixed with
                either "get" or "set". When using design patterns, such as the singleton or factory
                patterns, the name of the method should contain the pattern name where practical to
                make the pattern more readily recognizable.
            </para>

            <para>
                Functions in the global scope ("floating functions") are permitted but discouraged.
                It is recommended that these functions should be wrapped in a static class.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.variables">
            <title>Variables</title>

            <para>
                Variable names may only contain alphanumeric characters. Underscores are not permitted.
                Numbers are permitted in variable names but are discouraged.
            </para>

            <para>
                For class member variables that are declared with the "private" or "protected" construct,
                the first character of the variable name must be a single underscore. This is the only
                acceptable usage of an underscore in a function name. Member variables declared "public"
                may never start with an underscore.
            </para>

            <para>
                Like function names (see section 3.3, above) variable names must always start with a
                lowercase letter and follow the "camelCaps" capitalization convention.
            </para>

            <para>
                Verbosity is encouraged. Variables should always be as verbose as practical. Terse variable
                names such as "$i" and "$n" are discouraged for anything other than the smallest loop contexts.
                If a loop contains more than 20 lines of code, the variables for the indices need to have more
                descriptive names.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.constants">
            <title>Constants</title>

            <para>
                Constants may contain both alphanumeric characters and the underscore. Numbers are permitted
                in constant names.
            </para>

            <para>
                Constants must always have all letters capitalized.
            </para>

            <para>
                To enhance readablity, words in constant names must be separated by underscore characters. For
                example, <code>EMBED_SUPPRESS_EMBED_EXCEPTION</code> is permitted but
                <code>EMBED_SUPPRESSEMBEDEXCEPTION</code> is not.
            </para>

            <para>
                Constants must be defined as class members by using the "const" construct. Defining constants
                in the global scope with "define" is permitted but discouraged.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.coding-style">
        <title>Coding Style</title>

        <sect2 id="coding-standard.coding-style.php-code-demarcation">
            <title>PHP Code Demarcation</title>

            <para>
                PHP code must always be delimited by the full-form, standard PHP tags:

                <programlisting role="php"><![CDATA[<?php

?>]]></programlisting>
            </para>

            <para>
                Short tags are never allowed.  For files containing only PHP code, the
                closing tag must always be omitted (See <xref linkend="coding-standard.php-file-formatting.general" />).
            </para>
        </sect2>

        <sect2 id="coding-standard.coding-style.strings">
            <title>Strings</title>

            <sect3 id="coding-standard.coding-style.strings.literals">
                <title>String Literals</title>

                <para>
                    When a string is literal (contains no variable substitutions), the apostrophe or
                    "single quote" must always used to demarcate the string:

                    <programlisting role="php"><![CDATA[
$a = 'Example String';]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.literals-containing-apostrophes">
                <title>String Literals Containing Apostrophes</title>

                <para>
                    When a literal string itself contains apostrophes, it is permitted to demarcate
                    the string with quotation marks or "double quotes". This is especially encouraged
                    for SQL statements:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` from `people` WHERE `name`='Fred' OR `name`='Susan'";]]>
                    </programlisting>

                    The above syntax is preferred over escaping apostrophes.
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.variable-substitution">
                <title>Variable Substitution</title>

                <para>
                    Variable substitution is permitted using either of these two forms:

                    <programlisting role="php"><![CDATA[
$greeting = "Hello $name, welcome back!";

$greeting = "Hello {$name}, welcome back!";]]>
                    </programlisting>
                </para>

                <para>
                    For consistency, this form is not permitted:

                    <programlisting role="php"><![CDATA[
$greeting = "Hello ${name}, welcome back!";]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.string-concatenation">
                <title>String Concatenation</title>

                <para>
                    Strings may be concatenated using the "." operator. A space must always
                    be added before and after the "." operator to improve readability:

                    <programlisting role="php"><![CDATA[
$company = 'Zend' . 'Technologies';]]>
                    </programlisting>
                </para>

                <para>
                    When concatenating strings with the "." operator, it is permitted to
                    break the statement into multiple lines to improve readability. In these
                    cases, each successive line should be padded with whitespace such that the
                    "."; operator is aligned under the "=" operator:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` FROM `people` "
     . "WHERE `name` = 'Susan' "
     . "ORDER BY `name` ASC ";]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.arrays">
            <title>Arrays</title>

            <sect3 id="coding-standard.coding-style.arrays.numerically-indexed">
                <title>Numerically Indexed Arrays</title>

                <para>Negative numbers are not permitted as indices.</para>

                <para>
                    An indexed array may be started with any non-negative number, however
                    this is discouraged and it is recommended that all arrays have a base index of 0.
                </para>

                <para>
                    When declaring indexed arrays with the <code>array</code> construct, a trailing space must be
                    added after each comma delimiter to improve readability:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio');]]>
                    </programlisting>
                </para>

                <para>
                    It is also permitted to declare multiline indexed arrays using the "array" construct.
                    In this case, each successive line must be padded with spaces such that beginning of
                    each line aligns as shown below:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500);]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.arrays.associative">
                <title>Associative Arrays</title>

                <para>
                    When declaring associative arrays with the <code>array</code> construct, it is encouraged
                    to break the statement into multiple lines. In this case, each successive line must be
                    padded with whitespace such that both the keys and the values are aligned:

                    <programlisting role="php"><![CDATA[
$sampleArray = array('firstKey'  => 'firstValue',
                     'secondKey' => 'secondValue');]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.classes">
            <title>Classes</title>

            <sect3 id="coding-standard.coding-style.classes.declaration">
                <title>Class Declaration</title>

                <para>
                    Classes must be named by following the naming conventions.
                </para><para>
                    The brace is always written on the line underneath the class name ("one true brace" form).
                </para><para>
                    Every class must have a documentation block that conforms to the PHPDocumentor standard.
                </para><para>
                    Any code within a class must be indented four spaces.
                </para><para>
                    Only one class is permitted per PHP file.
                </para><para>
                    Placing additional code in a class file is permitted but discouraged. In these files, two blank lines must separate the class from any additional PHP code in the file.
                </para><para>
                    This is an example of an acceptable class declaration:

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class SampleClass
{
    // entire content of class
    // must be indented four spaces
}]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.classes.member-variables">
                <title>Class Member Variables</title>

                <para>
                    Member variables must be named by following the variable naming conventions.
                </para><para>
                    Any variables declared in a class must be listed at the top of the class, prior
                    to declaring any functions.
                </para><para>
                    The <code>var</code> construct is not permitted.  Member variables always declare
                    their visibility by using one of the <code>private</code>, <code>protected</code>,
                    or <code>public</code> constructs. Accessing member variables directly by making
                    them public is permitted but discouraged in favor of accessor
                    variables (set/get).
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.functions-and-methods">
            <title>Functions and Methods</title>

            <sect3 id="coding-standard.coding-style.functions-and-methods.declaration">
                <title>Function and Method Declaration</title>

                <para>
                    Functions must be named by following the naming conventions.
                </para><para>
                    Functions inside classes must always declare their visibility by using
                    one of the <code>private</code>, <code>protected</code>,
                    or <code>public</code> constructs.
                </para><para>
                    Like classes, the brace is always written on the line underneath the
                    function name ("one true brace" form).

                    There is no space between the
                    function name and the opening parenthesis for the arguments.
                </para><para>
                    Functions in the global scope are strongly discouraged.
                </para><para>
                    This is an example of an acceptable function declaration in a class:

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * Documentation Block Here
     */
    public function bar()
    {
        // entire content of function
        // must be indented four spaces
    }
}]]>
                    </programlisting>
                </para>

                <para>
                    <emphasis>NOTE:</emphasis> Passing by-reference is permitted in the function declaration only:

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * Documentation Block Here
     */
    public function bar(&$baz)
    {}
}]]>
                    </programlisting>
                </para>

                <para>
                    Call-time pass by-reference is prohibited.
                </para>


                <para>
                    The return value must not be enclosed in parentheses.  This can hinder readability
                    and can also break code if a method is later changed to return by reference.

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * WRONG
     */
    public function bar()
    {
        return($this->bar);
    }

    /**
     * RIGHT
     */
    public function bar()
    {
        return $this->bar;
    }
}]]>
                    </programlisting>
                </para>

            </sect3>

            <sect3 id="coding-standard.coding-style.functions-and-methods.usage">
                <title>Function and Method Usage</title>

                <para>
                    Function arguments are separated
                    by a single trailing space after the comma delimiter. This is an example of an
                    acceptable function call for a function that takes three arguments:

                    <programlisting role="php"><![CDATA[
threeArguments(1, 2, 3);]]>
                    </programlisting>
                </para>

                <para>
                    Call-time pass by-reference is prohibited. See the function declarations section
                    for the proper way to pass function arguments by-reference.
                </para><para>
                    For functions whose arguments permitted arrays, the function call may include the
                    "array" construct and can be split into multiple lines to improve readability.  In
                    these cases, the standards for writing arrays still apply:

                    <programlisting role="php"><![CDATA[
threeArguments(array(1, 2, 3), 2, 3);

threeArguments(array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500), 2, 3);]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.control-statements">
            <title>Control Statements</title>

            <sect3 id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>If / Else / Elseif</title>

                <para>
                    Control statements based on the <code>if</code> and <code>elseif</code>
                    constructs must have a single space before the opening parenthesis of the conditional,
                    and a single space after the closing parenthesis.
                </para>

                <para>
                    Within the conditional statements between the parentheses, operators must be separated
                    by spaces for readability. Inner parentheses are encouraged to improve logical grouping
                    of larger conditionals.
                </para>

                <para>
                    The opening brace is written on the same line as the conditional statement. The closing
                    brace is always written on its own line. Any content within the braces must be
                    indented four spaces.

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
}]]>
                    </programlisting>
                </para>

                <para>
                    For "if" statements that include "elseif" or "else", the formatting must be
                    as in these examples:

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
} else {
   $a = 7;
}


if ($a != 2) {
    $a = 2;
} elseif ($a == 3) {
   $a = 4;
} else {
   $a = 7;
}]]>
                    </programlisting>
                    PHP allows for these statements to be written without braces in some circumstances.
                    The coding standard makes no differentiation and all "if", "elseif" or "else" statements
                    must use braces.
                </para>

                <para>
                    Use of the "elseif" construct is permitted but highly discouraged in favor of the
                    "else if" combination.
                </para>
            </sect3>

            <sect3 id="coding-standards.coding-style.control-statements.switch">
                <title>Switch</title>

                <para>
                    Control statements written with the "switch" construct must have a single space before
                    the opening parenthesis of the conditional statement, and also a single space after
                    the closing parenthesis.
                </para>

                <para>
                    All content within the "switch" statement must be indented four spaces. Content under
                    each "case" statement must be indented an additional four spaces.
                </para>

                <programlisting role="php"><![CDATA[
switch ($numPeople) {
    case 1:
        break;

    case 2:
        break;

    default:
        break;
}]]>
                </programlisting>

                <para>
                    The construct <code>default</code> may never be omitted from a <code>switch</code> statement.
                </para>

                <para>
                    <emphasis>NOTE:</emphasis> It is sometimes useful to write a <code>case</code> statement which falls through
                    to the next case by not including a <code>break</code> or <code>return</code> in that case. To distinguish
                    these cases from bugs, any <code>case</code> statement where <code>break</code> or <code>return</code> are
                    omitted must contain the comment "// break intentionally omitted".
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standards.inline-documentation">
            <title>Inline Documentation</title>

            <sect3 id="coding-standards.inline-documentation.documentation-format">
                <title>Documentation Format</title>

                <para>
                    All documentation blocks ("docblocks") must be compatible with the phpDocumentor format.
                    Describing the phpDocumentor format is beyond the scope of this document.
                    For more information, visit: <ulink url="http://phpdoc.org/">http://phpdoc.org/</ulink>
                </para>

                <para>
                    All source code file written for the Zend Framework or that operates with the framework
                    must contain a "file-level" docblock at the top of each file and a "class-level" docblock
                    immediately above each class. Below are examples of such docblocks.
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.files">
                <title>Files</title>

                <para>
                    Every file that contains PHP code must have a header block at the top of the file that
                    contains these phpDocumentor tags at a minimum:

                    <programlisting role="php"><![CDATA[
/**
 * Short description for file
 *
 * Long description for file (if any)...
 *
 * LICENSE: Some license information
 *
 * @copyright  2005 Zend Technologies
 * @license    http://www.zend.com/license/3_0.txt   PHP License 3.0
 * @version    CVS: $Id:$
 * @link       http://dev.zend.com/package/PackageName
 * @since      File available since Release 1.2.0
*/]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.classes">
                <title>Classes</title>

                <para>
                    Every class must have a docblock that contains these phpDocumentor tags at a minimum:

                    <programlisting role="php"><![CDATA[
/**
 * Short description for class
 *
 * Long description for class (if any)...
 *
 * @copyright  2005 Zend Technologies
 * @license    http://www.zend.com/license/3_0.txt   PHP License 3.0
 * @version    Release: @package_version@
 * @link       http://dev.zend.com/package/PackageName
 * @since      Class available since Release 1.2.0
 * @deprecated Class deprecated in Release 2.0.0
 */]]>
                    </programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.functions">
                <title>Functions</title>

                <para>
                Every function, including object methods, must have a docblock that contains at a minimum:

                    <itemizedlist>
                        <listitem><para>A description of the function</para></listitem>
                        <listitem><para>All of the arguments</para></listitem>
                        <listitem><para>All of the possible return values</para></listitem>
                    </itemizedlist>
                </para>

                <para>
                    It is not necessary to use the "@access" tag because the access level is already known
                    from the "public", "private", or "protected" construct used to declare the function.
                </para>

                <para>
                    If a function/method may throw an exception, use @throws:

                    <programlisting role="php"><![CDATA[
@throws exceptionclass [description]]]>
                    </programlisting>
                </para>
            </sect3>
        </sect2>
    </sect1>

</appendix>
<!--
vim:se ts=4 sw=4 et:
-->
