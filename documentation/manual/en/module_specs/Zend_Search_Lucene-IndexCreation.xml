<sect1 id="zend.search.lucene.index-creation">
    <title>Building Indexes</title>

    <sect2 id="zend.search.lucene.index-creation.creating">
        <title>Creating a New Index</title>

        <para>
            Index creation and updating capabilities are implemented within Zend_Search_Lucene module and Java Lucene.
            You can use both of these capabilities.
        </para>

        <para>
            The PHP code listing below provides an example of how to index a file
            using Zend_Search_Lucene indexing API:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Create index
$index = Zend_Search_Lucene::create('/data/my-index');

$doc = new Zend_Search_Lucene_Document();

// Store document URL to identify it in search result.
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Index document content
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Add document to the index.
$index->addDocument($doc);]]>
        </programlisting>

        <para>
            Newly added documents could be immediately retrieved from an index.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.updating">
        <title>Updating Index</title>

        <para>
            The same procedure is used to update an existing index. The only difference
            is that the open() method is called instead of the create() method:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Open existing index
$index = Zend_Search_Lucene::open('/data/my-index');

$doc = new Zend_Search_Lucene_Document();
// Store document URL to identify it in search result.
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
// Index document content
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Add document to the index.
$index->addDocument($doc);]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.document-updating">
        <title>Updating Documents</title>

        <para>
            Lucene index file format doesn't support document updating. Document should be removed and re-added to do this.
        </para>

        <para>
            <code>Zend_Search_Lucene::delete()</code> method operates with an internal index document id. It can be retrieved
            from a query hit by 'id' property:
        </para>

        <programlisting role="php"><![CDATA[<?php
$removePath = ...;
$hits = $index->find('path:' . $removePath);
foreach ($hits as $hit) {
    $index->delete($hit->id);
}]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.counting">
        <title>Retrieving Index size</title>

        <para>
            There are two methods to retrieve index size in Zend_Search_Lucene.
        </para>

        <para>
             <code>Zend_Search_Lucene::maxDoc()</code> returns one greater than the largest possible document number.
             It's actually overall number of the documents in the index including deleted documents.
             So it has a synonym: <code>Zend_Search_Lucene::count()</code>.
        </para>

        <para>
             <code>Zend_Search_Lucene::numDocs()</code> returns the total number of non-deleted documents.
        </para>

        <programlisting role="php"><![CDATA[<?php
$indexSize = $index->count();
$documents = $index->numDocs();]]>
        </programlisting>

        <para>
            <code>Zend_Search_Lucene::isDeleted($id)</code> method may be used to check if document is deleted.
        </para>

        <programlisting role="php"><![CDATA[<?php
for ($count = 0; $count < $index->maxDoc(); $count++) {
    if ($index->isDeleted($count)) {
        echo "Document #$id is deleted.\n";
    }
}]]>
        </programlisting>

        <para>
            Index optimization removes deleted documents and squeezes documents' IDs. So internal document id may be changed.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.optimization">
        <title>Index optimization</title>

        <para>
            Lucene index is consist of segments. Each segment is a completely independent portion of data.
        </para>
        <para>
            Lucene index segment files can't be updated by their nature. A segment update needs full segment
            reorganization. See Lucene index file formats for details
            (<ulink url="http://lucene.apache.org/java/2_0_0/fileformats.html">http://lucene.apache.org/java/2_0_0/fileformats.html</ulink>)
            <footnote><para>Currently supported Lucene index file format version is v2.0</para></footnote>.
            Thus new documents are added to the index by creating new segment.
        </para>
        <para>
            Increasing number of segments reduces quality of the index, but index optimization restores it.
            Optimization is reduced to merging several segments into one. This process also doesn't update segments.
            It generates new large segment, which contains new optimized segment instead of the set of old segments,
            and updates segment list ('segments' file).
        </para>

        <para>
            Full index optimization can be invoked by <code>Zend_Search_Lucene::optimize()</code> call. It merges all
            index segments into new one:
        </para>
        <programlisting role="php"><![CDATA[<?php
// Open existing index
$index = Zend_Search_Lucene::open('/data/my-index');

// Optimize index.
$index->optimize();]]>
        </programlisting>

        <para>
            Automatic index optimization is performed to keep index in a consistent state.
        </para>
        <para>
            Automatic optimization is an iterative process managed by several index options. It merges very small segments
            into larger one, then merges these larger segments into more larger and so on.
        </para>

        <sect3 id="zend.search.lucene.index-creation.optimization.maxbuffereddocs">
            <title><emphasis>MaxBufferedDocs</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MaxBufferedDocs</emphasis> is a minimal number of documents required before
                the buffered in-memory documents are written into a new Segment.
            </para>
            <para>
                <emphasis>MaxBufferedDocs</emphasis> can be retrieved or set by <code>$index->getMaxBufferedDocs()</code> or
                <code>$index->setMaxBufferedDocs($maxBufferedDocs)</code> calls.
            </para>
            <para>
                Default value is 10.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.optimization.maxmergedocs">
            <title><emphasis>MaxMergeDocs</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MaxMergeDocs</emphasis> is a largest number of documents ever merged by addDocument().
                Small values (e.g., less than 10.000) are best for interactive indexing, as this limits the length
                of pauses while indexing to a few seconds. Larger values are best for batched indexing and speedier
                searches.
            </para>
            <para>
                <emphasis>MaxMergeDocs</emphasis> can be retrieved or set by <code>$index->getMaxMergeDocs()</code> or
                <code>$index->setMaxMergeDocs($maxMergeDocs)</code> calls.
            </para>
            <para>
                Default value is PHP_INT_MAX.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.optimization.mergefactor">
            <title><emphasis>MergeFactor</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MergeFactor</emphasis> determines how often segment indices are merged by addDocument().
                With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster,
                but indexing speed is slower. With larger values, more RAM is used during indexing, and while searches
                on unoptimized indices are slower, indexing is faster. Thus larger values (&gt; 10) are best for batch
                index creation, and smaller values (&lt; 10) for indices that are interactively maintained.
            </para>
            <para>
                <emphasis>MergeFactor</emphasis> is a good estimation for average number of segments merged by one auto-optimization pass.
                Too large values produce large number of segments while they are not merged into new one. It may be a cause of
                "failed to open stream: Too many open files" error message. This limitation is system dependent.
            </para>
            <para>
                <emphasis>MergeFactor</emphasis> can be retrieved or set by <code>$index->getMergeFactor()</code> or
                <code>$index->setMergeFactor($mergeFactor)</code> calls.
            </para>
            <para>
                Default value is 10.
            </para>
            <para>
                Lucene Java and Luke (Lucene Index Toolbox - <ulink url="http://www.getopt.org/luke/luke-0.6/">http://www.getopt.org/luke/luke-0.6/</ulink>)
                can also be used to optimize index. Luke v0.6 has to be used to be compatible with Zend_Search_Lucene component. Later Luke versions are
                based on Lucene v2.1 which uses new index file format. Full Luke project information can be found here -
                <ulink url="http://www.getopt.org/luke/">http://www.getopt.org/luke/</ulink>
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.permissions">
        <title>Permissions</title>

        <para>
            Index files are available for read and writing for everyone by default.
        </para>

        <para>
            It's possible to override this with <code>Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions()</code> method:
        </para>


        <programlisting role="php"><![CDATA[<?php
// Get current default file permissions
$currentPermissions = Zend_Search_Lucene_Storage_Directory_Filesystem::getDefaultFilePermissions();

// Give read-writing permissions only for current user and group
Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions(0660);]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.limitations">
        <title>Limitations</title>

        <sect3 id="zend.search.lucene.index-creation.limitations.index-size">
            <title>Index size</title>
            <para>
                Index size is limited by 2GB for 32-bit platforms.
            </para>

            <para>
                Use 64-bit platforms for larger indices.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.limitations.filesystems">
            <title>Supported filesystems</title>
            <para>
                Zend_Search_Lucene uses <code>flock()</code> to provide concurrent searching, index updating and optimization.
            </para>

            <para>
                According to the PHP <ulink url="http://www.php.net/manual/en/function.flock.php">documentation</ulink>,
                "<code>flock()</code> will not work on NFS and many other networked file systems".
            </para>

            <para>
                Do not use networked file systems with Zend_Search_Lucene.
            </para>
        </sect3>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
