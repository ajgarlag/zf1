<sect1 id="zend.mail.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Mail</code> provides generalized functionality to compose and send both text and MIME-compliant
        multipart e-mail messages. Mail can be sent with <code>Zend_Mail</code> via the php built-in
        <ulink url="http://php.net/mail"><code>mail()</code></ulink> function or via direct SMTP connection.
    </para>
    <example>
        <title>Simple E-Mail with Zend_Mail</title>
        <para>
            A simple e-mail consists of some recipients, a subject, a body and a sender. To send such a mail using
            the PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink> function, do the following:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('This is the text of the mail.');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>   </programlisting>
    </example>
    <note>
        <title>Minimum definitions</title>
        <para>
            In order to send an e-mail with <code>Zend_Mail</code> you have to specify at least one recipient, a
            sender (e.g., with <code>setFrom()</code>), and a message body (text and/or HTML).
        </para>
    </note>
    <para>
        For most mail attributes there are "get" methods to read the information stored in the mail object. For
        further details, please refer to the API documentation. A special one is <code>getRecipients()</code>.
        It returns an array with all recipient e-mail addresses that were added prior to the method call.
    </para>
    <para>
        For security reasons, <code>Zend_Mail</code> filters all header fields to prevent header injection with
        newline (<code>\n</code>) characters.
    </para>
    <para>
        You also can use most methods of the Zend_Mail object with a convenient fluent interface. A fluent
        interface means that each method returns a reference to the object on which it was called, so you can
        immediately call another method.
    </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('This is the text of the mail.')
    ->setFrom('somebody@example.com', 'Some Sender')
    ->addTo('somebody_else@example.com', 'Some Recipient')
    ->setSubject('TestSubject')
    ->send();
?>]]>   </programlisting>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->