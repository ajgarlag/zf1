<sect1 id="zend.search.lucene.query-api">
    <title>Query Construction API</title>

    <para>
        In addition to parsing query automatically it's also possible to construct them through API.
    </para>

    <para>
        User query can be combined with queries created through API. Use query parser to construct query from a string:
        <programlisting role="php"><![CDATA[<?php
$query = Zend_Search_Lucene_Search_QueryParser::parse($queryString);]]>
        </programlisting>
    </para>


    <sect2 id="zend.search.lucene.queries.exceptions">
        <title>Query Parser Exceptions</title>
        <para>
        Query parser may generate two types of exceptions.
        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Search_Lucene_Exception</code> is thrown if something wrong in a query parser itself.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Search_Lucene_Search_QueryParserException</code> is thrown in the case of
                    query syntax exception.
                </para>
            </listitem>
        </itemizedlist>
        Thus that's good idea to catch Zend_Search_Lucene_Search_QueryParserException and make appropriate message:
        <programlisting role="php"><![CDATA[<?php
try {
    $query = Zend_Search_Lucene_Search_QueryParser::parse($queryString);
} catch (Zend_Search_Lucene_Search_QueryParserException $e) {
    echo "Query syntax error: " . $e->getMessage() . "\n";
}]]>
            </programlisting>
        </para>

        <para>
            The same technique may (and should) be used for find() method of Zend_Search_Lucene object.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.queries.term-query">
        <title>Term Query</title>
        <para>
            Term queries are intended for a searching for a single term.
        </para>

        <para>
        Query string:
        </para>
        <programlisting role="querystring"><![CDATA[word1]]>
        </programlisting>

        <para>or</para>

        <para>
        Query construction by API:
        </para>
        <programlisting role="php"><![CDATA[<?php
$term  = new Zend_Search_Lucene_Index_Term('word1', 'field1');
$query = new Zend_Search_Lucene_Search_Query_Term($term);
$hits  = $index->find($query);]]>
        </programlisting>

        <para>
            Term field is optional. Zend_Search_Lucene searches through all fields if field is not specified:
            <programlisting role="php"><![CDATA[<?php
$term  = new Zend_Search_Lucene_Index_Term('word1');  // Search 'word1' through all indexed fields
$query = new Zend_Search_Lucene_Search_Query_Term($term);
$hits  = $index->find($query);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.queries.multiterm-query">
        <title>Multi-Term Query</title>
        <para>
            Multi-term queries are intended for a searching for a set of terms.
        </para>

        <para>
            Each term in a set can be defined as <emphasis>required</emphasis>,
            <emphasis>prohibited</emphasis>, or <emphasis>neither</emphasis>.

            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>required</emphasis> means that documents not matching this term will not match
                        the query;
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>prohibited</emphasis> means that documents matching this term will not match
                        the query;
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>neither</emphasis>, in which case matched documents are neither prohibited
                        from, nor required to, match the term. A document must match at least 1 term, however, to
                        match the query.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            If optional terms are added to a query with required terms,
            then they will have the same result set, but a second query will have hits,
            which match optional terms and are moved to the top of the result set.
        </para>

        <para>
            Both search methods can be used for multi-term queries.
        </para>

        <para>
            Query string:
        </para>
        <programlisting role="querystring"><![CDATA[+word1 author:word2 -word3]]>
        </programlisting>

        <itemizedlist>
            <listitem>
                <para>
                    '+' is used to define a required term.
                </para>
            </listitem>
            <listitem>
                <para>
                    '-' is used to define a prohibited term.
                </para>
            </listitem>
            <listitem>
                <para>
                    'field:' prefix is used to indicate a document field for a search.
                    If it's omitted, then 'contents' is used.
                </para>
            </listitem>
        </itemizedlist>

        <para>or</para>

        <para>
        Query construction by API:
        </para>
        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_MultiTerm();

$query->addTerm(new Zend_Search_Lucene_Index_Term('word1'), true);
$query->addTerm(new Zend_Search_Lucene_Index_Term('word2'), null);
$query->addTerm(new Zend_Search_Lucene_Index_Term('word3'), false);

$hits  = $index->find($query);]]>
        </programlisting>

        <para>
            The <code>$signs</code> array contains information about the term type:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>true</code> is used to define required term.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>false</code> is used to define prohibited term.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>null</code> is used to define a term that is neither required nor prohibited.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.queries.wildcard">
        <title>Wildcard Query</title>
        <para>
            Wildcard queries are intended for a searching for a set of terms matching specified pattern.
        </para>

        <para>
            '?' symbol is used as a single character wildcard.
        </para>

        <para>
            '*' symbol is used as a multiple character wildcard.
        </para>

        <para>
            Query string:
            <programlisting role="querystring"><![CDATA[test*
field1:test*]]>
            </programlisting>
        </para>


        <para>or</para>

        <para>
            Query construction by API:
            <programlisting role="php"><![CDATA[<?php
$pattern = new Zend_Search_Lucene_Index_Term('test*', 'field1');
$query = new Zend_Search_Lucene_Search_Query_Wildcard($pattern);
$hits  = $index->find($query);]]>
            </programlisting>
        </para>

        <para>
            Term field is optional. Zend_Search_Lucene searches through all fields if field is not specified:
            <programlisting role="php"><![CDATA[<?php
$pattern = new Zend_Search_Lucene_Index_Term('test*');
$query = new Zend_Search_Lucene_Search_Query_Wildcard($pattern);
$hits  = $index->find($query);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.queries.phrase-query">
        <title>Phrase Query</title>
        <para>
            Phrase Queries are intended for searching for a phrase.
        </para>

        <para>
            Phrase Queries are very flexible and allow to search exact phrases as well as sloppy phrases.
        </para>

        <para>
            Phrases can also contain gaps or terms in the same places. They can be generated by
            Analyzer for different purposes. For example, a term can be duplicated to increase the term
            weight, or several synonyms can be placed into one position.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query1 = new Zend_Search_Lucene_Search_Query_Phrase();

// Add 'word1' at 0 relative position.
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word1'));

// Add 'word2' at 1 relative position.
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word2'));

// Add 'word3' at 3 relative position.
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word3'), 3);

...

$query2 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2', 'word3'), array(0,1,3));

...

// Query without a gap.
$query3 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2', 'word3'));

...

$query4 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2'), array(0,1), 'annotation');]]>
        </programlisting>

        <para>
            A phrase query can be constructed in one step with a class constructor or step by step with a
            <code>Zend_Search_Lucene_Search_Query_Phrase::addTerm()</code> method call.
        </para>

        <para>
            Zend_Search_Lucene_Search_Query_Phrase class constructor takes three optional arguments:
        </para>
        <programlisting role="php"><![CDATA[<?php
Zend_Search_Lucene_Search_Query_Phrase([array $terms[, array $offsets[, string $field]]]);]]>
        </programlisting>

        <para>
            <code>$terms</code> is an array of strings that contains a set of phrase terms.
            If it's omitted or equal to null, then an empty query is constructed.
        </para>

        <para>
            <code>$offsets</code> is an array of integers that contains offsets of terms in a phrase.
            If it's omitted or equal to null, then the terms' positions are supposed to be
            <code>array(0, 1, 2, 3, ...)</code>.
        </para>

        <para>
            <code>$field</code> is a string that indicates the searched document field.
            If it's omitted or equal to null, then the default field is searched.
            This version of Zend_Search_Lucene treats the 'contents' field as a default, but it's planned to
            change this behavior to "any field" in upcoming versions.
        </para>

        <para>
            Thus:
        </para>
        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'framework'));]]>
        </programlisting>
        <para>
            will search for the phrase 'zend framework'.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'download'), array(0, 2));]]>
        </programlisting>
        <para>
            will search for the phrase 'zend ????? download' and match 'zend platform download', 'zend studio
            download', 'zend core download', 'zend framework download', and so on.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'framework'), null, 'title');]]>
        </programlisting>

        <para>
            will search for the phrase 'zend framework' in a 'title' field.
        </para>


        <para>
            <code>Zend_Search_Lucene_Search_Query_Phrase::addTerm()</code> takes two arguments, a
            required <code>Zend_Search_Lucene_Index_Term</code> object and an optional position:
        </para>
        <programlisting role="php"><![CDATA[<?php
Zend_Search_Lucene_Search_Query_Phrase::addTerm(Zend_Search_Lucene_Index_Term $term[, integer $position]);]]>
        </programlisting>

        <para>
            <code>$term</code> describes the next term in a phrase. It must indicate the same field as previous terms, or an exception will be thrown.
        </para>

        <para>
            <code>$position</code> indicates the term position.
        </para>

        <para>
            Thus:
        </para>
        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend'));
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework'));]]>
        </programlisting>
        <para>
            will search for the phrase 'zend framework'.
         </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend'), 0);
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework'), 2);]]>
        </programlisting>
        <para>
            will search for the phrase 'zend ????? download' and match 'zend platform download', 'zend studio
            download', 'zend core download', 'zend framework download', and so on.
        </para>
        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend', 'title'));
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework', 'title'));]]>
        </programlisting>
        <para>
            will search for the phrase 'zend framework' in a 'title' field.
        </para>


        <para>
            The slop factor sets the number of other words permitted between words in query phrase. If zero,
            then this is an exact phrase search.  For larger values this works like a WITHIN or NEAR
            operator.
        </para>
        <para>
            The slop is in fact an edit-distance, where the units correspond to moves of terms in the query
            phrase out of position.  For example, to switch the order of two words requires two moves (the
            first move places the words atop one another), so to permit re-orderings of phrases, the slop
            must be at least two.
        </para>
        <para>
            More exact matches are scored higher than sloppier matches; thus, search results are sorted by
            exactness. The slop is zero by default, requiring exact matches.
        </para>
        <para>
            The slop factor can be assigned after query creation:
        </para>
        <programlisting role="php"><![CDATA[<?php
// Query without a gap.
$query = new Zend_Search_Lucene_Search_Query_Phrase(array('word1', 'word2'));

// Search for 'word1 word2', 'word1 ... word2'
$query->setSlop(1);
$hits1 = $index->find($query);

// Search for 'word1 word2', 'word1 ... word2',
// 'word1 ... ... word2', 'word2 word1'
$query->setSlop(2);
$hits2 = $index->find($query);]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.queries.range">
        <title>Range Query</title>
        <para>
            <link linkend="zend.search.lucene.query-language.range">Range queries</link> are intended for searching terms within specified interval.
        </para>

        <para>
            Query string:
            <programlisting role="querystring"><![CDATA[mod_date:[20020101 TO 20030101]
title:{Aida TO Carmen}]]></programlisting>
        </para>

        <para>or</para>

        <para>
            Query construction by API:
            <programlisting role="php"><![CDATA[<?php
$from = new Zend_Search_Lucene_Index_Term('20020101', 'mod_date');
$to   = new Zend_Search_Lucene_Index_Term('20030101', 'mod_date');
$query = new Zend_Search_Lucene_Search_Query_Range($from, $to, true /* inclusive */);
$hits  = $index->find($query);]]>
            </programlisting>
        </para>

        <para>
            Term fields are optional. Zend_Search_Lucene searches through all fields if field is not specified:
            <programlisting role="php"><![CDATA[<?php
$from = new Zend_Search_Lucene_Index_Term('Aida');
$to   = new Zend_Search_Lucene_Index_Term('Carmen');
$query = new Zend_Search_Lucene_Search_Query_Range($from, $to, falce /* non-inclusive */);
$hits  = $index->find($query);]]>
            </programlisting>
        </para>

        <para>
            Any (but not both) of boundary terms may be set to null. Zend_Search_Lucene searches form the beginning or
            up to the end of dictionary for specified field(s) for this case:
            <programlisting role="php"><![CDATA[<?php
$from = new Zend_Search_Lucene_Index_Term('20020101', 'mod_date');
$query = new Zend_Search_Lucene_Search_Query_Range($from, null, true /* inclusive */);  // searches for ['20020101' TO ...]
$hits  = $index->find($query);]]>
            </programlisting>
        </para>
    </sect2>

</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
