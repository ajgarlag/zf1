<sect1 id="zend.validate.set" xmlns:xi="http://www.w3.org/2003/XInclude">

    <title>Standard Validation Classes</title>

    <para>
        The Zend Framework comes with a standard set of validation classes, which are ready for you to use.
    </para>

    <sect2 id="zend.validate.set.alnum">
        <title>Alnum</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> contains only alphabetic and digit characters.
            This validator includes an option to also consider white space characters as valid.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.alpha">
        <title>Alpha</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> contains only alphabetic characters. This
            validator includes an option to also consider white space characters as valid.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.between">
        <title>Between</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is between the minimum and maximum boundary
            values. The comparison is inclusive by default (<code>$value</code> may equal a boundary value), though
            this may be overridden in order to do a strict comparison, where <code>$value</code> must be strictly
            greater than the minimum and strictly less than the maximum.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.ccnum">
        <title>Ccnum</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> follows the Luhn algorithm (mod-10 checksum)
            for credit card numbers.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.date">
        <title>Date</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is a valid date of the format
            <code>YYYY-MM-DD</code>.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.digits">
        <title>Digits</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> only contains digit characters.
        </para>
    </sect2>

    <xi:include href="Zend_Validate-EmailAddress.xml" />

    <sect2 id="zend.validate.set.float">
        <title>Float</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is a floating-point value.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.greater_than">
        <title>GreaterThan</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is greater than the minimum boundary.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.hex">
        <title>Hex</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> contains only hexadecimal digit characters.
        </para>
    </sect2>

    <xi:include href="Zend_Validate-Hostname.xml" />

    <sect2 id="zend.validate.set.in_array">
        <title>InArray</title>
        <para>
            Returns <code>true</code> if and only if a "needle" <code>$value</code> is contained in a "haystack"
            array. If the strict option is <code>true</code>, then the type of <code>$value</code> is also checked.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.int">
        <title>Int</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is a valid integer.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.ip">
        <title>Ip</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is a valid IP address.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.less_than">
        <title>LessThan</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is less than the maximum boundary.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.not_empty">
        <title>NotEmpty</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> is not an empty value.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.regex">
        <title>Regex</title>
        <para>
            Returns <code>true</code> if and only if <code>$value</code> matches against a regular expression
            pattern.
        </para>
    </sect2>

    <sect2 id="zend.validate.set.string_length">
        <title>StringLength</title>
        <para>
            Returns <code>true</code> if and only if the string length of <code>$value</code> is at least a minimum
            and no greater than a maximum (when the max option is not <code>null</code>). Since version 1.1.0, the
            <code>setMin()</code> method throws an exception if the minimum length is set to a value greater than the
            set maximum length, and the <code>setMax()</code> method throws an exception if the maximum length is set
            to a value less than than the set minimum length.
        </para>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->