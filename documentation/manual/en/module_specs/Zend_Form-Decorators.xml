<sect1 id="zend.form.decorators">
    <title>Creating Custom Form Markup Using Zend_Form_Decorator</title>

    <para>
        Rendering a form object is completely optional -- you do not need to use
        <code>Zend_Form</code>'s render() methods at all. However, if you do,
        decorators are used to render the various form objects. 
    </para>

    <para>
        An arbitrary number of decorators may be attached to each item
        (elements, display groups, sub forms, or the form object itself);
        however, only one decorator of a given type may be attached to each
        item.  Decorators are called in the order they are registered. Depending
        on the decorator, it may replace the content passed to it, or append or
        prepend the content.
    </para>

    <para>
        Object state is set via configuration options passed to the constructor
        or the decorator's <code>setOptions()</code> method. When creating
        decorators via an item's <code>addDecorator()</code> or related methods,
        options may be passed as an argument to the method. These can be used to
        specify placement, a separator to use between passed in content and
        newly generated content, and whatever options the decorator supports.
    </para>

    <para>
        Before each decorator's <code>render()</code> method is called, the
        current item is set in the decorator using <code>setElement()</code>,
        giving the decorator awareness of the item being rendered. This allows
        you to create decorators that only render specific portions of the item
        -- such as the label, the value, error messages, etc. By stringing
        together several decorators that render specific element segments, you
        can build complex markup representing the entire item.
    </para>

    <sect2 id="zend.form.decorators.operation">
        <title>Operation</title>

        <para>
            To configure a decorator, pass an array of options or a
            <code>Zend_Config</code> object to its constructor, an array to
            <code>setOptions()</code>, or a <code>Zend_Config</code> object to
            <code>setConfig()</code>.
        </para>

        <para>
            Standard options include:
        </para>

        <itemizedlist>
            <listitem><para>
                    <code>placement</code>: Placement can be either 'append' or
                    'prepend' (case insensitive), and indicates whether content
                    passed to <code>render()</code> will be appended or
                    prepended, respectively. In the case that a decorator
                    replaces the content, this setting is ignored. The default
                    setting is to append.
            </para></listitem>

            <listitem><para>
                    <code>separator</code>: The separator is used between the
                    content passed to <code>render()</code> and new content
                    generated by the decorator, or between items rendered by the
                    decorator (e.g. FormElements uses the separator between each
                    item rendered). In the case that a decorator replaces the
                    content, this setting may be ignored. The default value is
                    <code>PHP_EOL</code>.
            </para></listitem>
        </itemizedlist>

        <para>
            The decorator interface specifies methods for interacting with
            options. These include:
        </para>

        <itemizedlist>
            <listitem><para>
                    <code>setOption($key, $value)</code>: set a single option.
            </para></listitem>

            <listitem><para>
                    <code>getOption($key)</code>: retrieve a single option
                    value.
            </para></listitem>

            <listitem><para>
                    <code>getOptions()</code>: retrieve all options.
            </para></listitem>

            <listitem><para>
                    <code>removeOption($key)</code>: remove a single option.
            </para></listitem>

            <listitem><para>
                    <code>clearOptions()</code>: remove all options.
            </para></listitem>
        </itemizedlist>

        <para>
            Decorators are meant to interact with the various
            <code>Zend_Form</code> class types: <code>Zend_Form</code>,
            <code>Zend_Form_Element</code>, <code>Zend_Form_DisplayGroup</code>,
            and all classes deriving from them. The method
            <code>setElement()</code> allows you to set the object the
            decorator is currently working with, and <code>getElement()</code>
            is used to retrieve it.
        </para>

        <para>
            Each decorator's <code>render()</code> method accepts a string,
            <code>$content</code>. When the first decorator is called, this
            string is typically empty, while on subsequent calls it will be
            populated. Based on the type of decorator and the options passed in,
            the decorator will either replace this string, prepend the string,
            or append the string; an optional separator will be used in the
            latter two situations.
        </para>
    </sect2>

    <sect2 id="zend.form.decorators.standard">
        <title>Standard Decorators</title>

        <para>
            <code>Zend_Form</code> ships with several standard decorators.
        </para>

        <sect3 id="zend.form.decorators.standard.callback">
            <title>Callback</title>

            <para>
                The Callback decorator can execute an arbitrary callback to
                render content. Callbacks should be specified via the 'callback'
                option passed in the decorator configuration, and can be any
                valid PHP callback type. Callbacks should accept three
                arguments, <code>$content</code> (the original content passed to
                the decorator), <code>$element</code> (the item being
                decorated), and an array of <code>$options</code>. As an example
                callback:
            </para>

            <programlisting role="php"><![CDATA[<?php
class Util
{
    public static function label($content, $element, array $options)
    {
        return '<span class="label">' . $element->getLabel() . "</span>";
    }
}
?>]]></programlisting>

            <para>
                This callback would be specified as <code>array('Util',
                    'label')</code>, and would generate some (bad) HTML markup
                for the label. The Callback decorator would then either replace,
                append, or prepend the original content with the return value of
                this.
            </para>

            <para>
                The Callback decorator allows specifying a null value for the
                placement option, which will replace the original content with
                the callback return value; 'prepend' and 'append' are still
                valid as well.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.dtddwrapper">
            <title>DtDdWrapper</title>

            <para>
                The default decorators utilize definition lists
                (<code>&lt;dl&gt;</code>) to render form elements. Since form
                items can appear in any order, display groups and sub forms can
                be interspersed with other form items. To keep these particular
                item types within the definition list, the DtDdWrapper creates a
                new, empty definition term (<code>&lt;dt&gt;</code>) and wraps
                its content in a new definition datum (<code>&lt;dd&gt;</code>).
                The output looks something like this:
            </para>

            <programlisting role="html"><![CDATA[
<dt></dt>
<dd><fieldset id="subform">
    <legend>User Information</legend>
    ...
</fieldset></dd>
]]></programlisting>

            <para>
                This decorator replaces the content provided to it by wrapping
                it within the <code>&lt;dd&gt;</code> element.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.errors">
            <title>Errors</title>

            <para>
                Element errors get their own decorator with the Errors
                decorator. This decorator proxies to the FormErrors view helper,
                which renders error messages in an unordered list
                (<code>&lt;ul&gt;</code>) as list items. The
                <code>&lt;ul&gt;</code> element receives a class of "errors".
            </para>

            <para>
                The Errors decorator can either prepend or append the content
                provided to it.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.fieldset">
            <title>Fieldset</title>

            <para>
                Display groups and sub forms render their content within
                fieldsets by default. The Fieldset decorator checks for either a
                'legend' option or a <code>getLegend()</code> method in the
                registered element, and uses that as a legend if non-empty. Any
                content passed in is wrapped in the HTML fieldset, replacing the
                original content. Any attributes set in the decorated item are
                passed to the fieldset as HTML attributes.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.form">
            <title>Form</title>

            <para>
                <code>Zend_Form</code> objects typically need to render an HTML
                form tag. The Form decorator proxies to the Form view helper. It
                wraps any provided content in an HTML form element, using the
                <code>Zend_Form</code> object's action and method, and any
                attributes as HTML attributes.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.formelements">
            <title>FormElements</title>

            <para>
                Forms, display groups, and sub forms are collections of
                elements. In order to render these elements, they utilize the
                FormElements decorator, which iterates through all items,
                calling <code>render()</code> on each and joining them with the
                registered separator. It can either append or prepend content
                passed to it.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.htmltag">
            <title>HtmlTag</title>

            <para>
                The HtmlTag decorator allows you to utilize HTML tags to
                decorate content; the tag utilized is passed in the 'tag'
                option, and any other options are used as HTML attributes to
                that tag. The tag by default is assumed to be block level, and
                replaces the content by wrapping it in the given tag. However,
                you can specify a placement to append or prepend a tag as well.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.label">
            <title>Label</title>

            <para>
                Form elements typically have labels, and the Label decorator is
                used to render these labels. It proxies to the FormLabel view
                helper, and pulls the element label using the
                <code>getLabel()</code> method of the element. If no label is
                present, none is rendered.
            </para>

            <para>
                You may optionally specify a 'tag' option; if provided, it wraps
                the label in that block-level tag. If the 'tag' option is
                present, and no label present, the tag is rendered with no
                content.
            </para>

            <para>
                By default, the Label decorator prepends to the provided
                content; specify a 'placement' option of 'append' to place it
                after the content.
            </para>
        </sect3>

        <sect3 id="zend.form.decorators.standard.viewhelper">
            <title>ViewHelper</title>

            <para>
                Most elements utilize <code>Zend_View</code> helpers for
                rendering, and this is done with the ViewHelper decorator. With
                it, you may specify a 'helper' tag to explicitly set the view
                helper to utilize; if none is provided, it uses the last segment
                of the element's class name to determine the helper, prepending
                it with the string 'form': e.g., 'Zend_Form_Element_Text' would
                look for a view helper of 'formText'. 
            </para>

            <para>
                Any attributes of the provided element are passed to the view
                helper as element attributes.
            </para>

            <para>
                By default, this decorator appends content; use the 'placement'
                option to specify alternate placement.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.form.decorators.custom">
        <title>Custom Decorators</title>

        <para>
            If you find your rendering needs are complex or need heavy
            customization, you should consider creating a custom decorator.
        </para>

        <para>
            Decorators need only implement
            <code>Zend_Decorator_Interface</code>. The interface specifies the
            following:
        </para>

        <programlisting role="php"><![CDATA[<?php
interface Zend_Decorator_Interface
{
    public function __construct($options = null);
    public function setElement($element);
    public function getElement();
    public function setOptions(array $options);
    public function setConfig(Zend_Config $config);
    public function setOption($key, $value);
    public function getOption($key);
    public function getOptions();
    public function removeOption($key);
    public function clearOptions();
    public function render($content);
}
?>]]></programlisting>

        <para>
            To make this simpler, you can simply extend
            <code>Zend_Decorator_Abstract</code>, which implements all methods
            except <code>render()</code>. 
        </para>

        <para>
            As an example, if you wanted to have labels append a ':', and also
            display a '*' when required, you could write a decorator like the
            following:
        </para>

        <programlisting role="php"><![CDATA[<?php
class My_Decorator_Label extends Zend_Form_Decorator_Abstract
{
    public function getLabel()
    {
        $label = $this->getOption('label');
        if (null === $label) {
            if ((null !== ($element = $this->getElement()))
                && ($element instanceof Zend_Form_Element) )
            {
                $label = $element->getLabel();
            } 
        }
        
        return (string) $label;
    }

    public function render($content)
    {
        $element = $this->getElement();
        if (!$element instanceof Zend_Form_Element) {
            return $content;
        }

        $label = $this->getLabel();
        if ($translator = $element->getTranslator()) {
            $label = $translator->translate($label);
        }
        if ($element->getRequired()) {
            $label .= '*';
        }
        $label .= ':';

        $separator = $this->getSeparator();
        $placement = $this->getPlacement();
        $view      = $element->getView();
        if (null !== $view) {
            $label = $view->formLabel($element->getName(), $label, $this->getOptions());
        }

        switch ($placement) {
            case (self::PREPEND):
                return $label . $separator . $content;
            case (self::APPEND):
            default:
                return $content . $separator . $label;
        }
    }
}
?>]]></programlisting>

        <para>
            You can then place this in the decorator path:
        </para>

        <programlisting role="php"><![CDATA[<?php
// for an element:
$element->addPrefixPath('My_Decorator', 'My/Decorator/', 'decorator');

// for all elements:
$form->addElementPrefixPath('My_Decorator', 'My/Decorator/', 'decorator');
?>]]></programlisting>

        <para>
            In this particular example, because the decorator's final segment,
            'Label' matches the same as <code>Zend_Form_Decorator_Label</code>,
            it will be rendered <emphasis>in place of</emphasis> that decorator
            -- meaning you would not need to change any decorators to modify the
            output. (Needless to say, you can create decorators with different
            names; this simply shows how you can quickly and simply override
            existing rendering functionality through custom decorators.)
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
