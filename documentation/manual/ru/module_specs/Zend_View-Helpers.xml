<sect1 id="zend.view.helpers">

    <title>Вспомогательные классы вида<!--View Helpers--></title>

    <para>
        В скрипте вида часто бывает так, что необходимо выполнять
        определенный набор функций повторно; например, формирование даты,
        генерация элементов формы, отображение ссылок. Вы можете использовать
        вспомогательные классы для выполнения этих действий.
<!--
        In your view scripts, often it is necessary to perform certain
        complex functions over and over; e.g., formatting a date,
        generating form elements, or displaying action links.  You can
        use helper classes to perform these behaviors for you.
-->
    </para>

    <para>
        Чтобы применять вспомогательные классы ("помощников") в своем скрипте вида,
        вызывайте их, используя <code>$this->имяПомощника()</code>.
        <code>Zend_View</code> загрузит класс <code>Zend_View_Helper_ИмяПомощника</code>,
        создаст его объект, и вызовет его метод <code>имяПомощника()</code>.
        Этот объект находится постоянно внутри экземпляра <code>Zend_View</code>
        и повторно используется во всех вызовах <code>$this->имяПомощника()</code>.
<!--
        To use a helper in your view script, call it using
        $this->helperName(). Behind the scenes, Zend_View will load the
        Zend_View_Helper_HelperName class, create an object instance of
        it, and call its helperName() method.  The object instance is
        persistent within the Zend_View instance, and is reused for all
        future calls to $this->helperName().
-->
    </para>

    <sect2 id="zend.view.helpers.initial">

        <title>Начальные вспомогательные классы<!--Initial Helpers--></title>

        <para>
            <code>Zend_View</code> снабжен начальным набором вспомогательных
            классов, все они имеют отношение к генерации элементов форм.
            Каждый из них автоматически выполняет соответствующее экранирование
            выходных данных. Это:
<!--
            Zend_View comes with an initial set of helper classes, all of
            which relate to form element generation.  They each perform the
            appopriate output escaping automatically.  They are:
-->
        </para>

        <itemizedlist>

            <listitem><para>
                <code>formButton($name, $value, $attribs)</code>: Создает элемент
                <code>&lt;input type="button" /&gt;</code>.
<!--
                Creates an &lt;input
                type="button" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formCheckbox($name, $value, $attribs, $options)</code>:
                Создает элемент <code>&lt;input type="checkbox" /&gt;</code>
                (флажок опций). Параметр <code>$options</code> является массивом,
                в котором первым значением является "выбранное" (checked) значение,
                вторым — "невыбранное" значение (по умолчанию это '1' и '0').
                Если <code>$value</code> соответствует "выбранному" значению,
                то этот флажок опций будет выбран.
<!--
                Creates
                an &lt;input type="checkbox" /&gt; element.  The
                $options param is an array where the first value is the
                "checked" value, and the second is the "unchecked" value
                (the defaults are '1' and '0').  If $value matches the
                "checked" value, the box will be checked for you.
-->
            </para></listitem>

            <listitem><para>
                <code>formFile($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="file" /&gt;</code>.
<!--
                Creates an &lt;input
                type="file" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formHidden($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="hidden" /&gt;</code>.
<!--
                Creates an &lt;input
                type="hidden" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formPassword($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="password" /&gt;</code>.
<!--
                Creates an &lt;input
                type="password" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formRadio($name, $value, $attribs, $options)</code>: Создает
                последовательность элементов <code>&lt;input type="radio" /&gt;</code>
                (переключатель опций). В массиве <code>$options</code> ключ
                элемента является значением переключателя, значение
                элемента является текстом к переключателю. Переключатель опций
                со значением <code>$value</code> будет предварительно выбран.
<!--
                Creates a
                series of &lt;input type="radio" /&gt; elements, one for
                each of the $options elements.  In the $options array, the
                element key is the radio value, and the element value is the
                radio label.  The $value radio will be preselected for you.
-->
            </para></listitem>

            <listitem><para>
                <code>formReset($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="password" /&gt;</code>.
<!--
                Creates an &lt;input
                type="reset" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formSelect($name, $value, $attribs, $options)</code>:
                Создает блок <code>&lt;select&gt;...&lt;/select&gt;</code>,
                с одной опцией <code>&lt;option&gt;</code> на каждый
                элемент массива <code>$options</code>. В массиве
                <code>$options</code> ключ элемента является значением опции,
                значение элемента является текстом опции. Опция со значением
                <code>$value</code> будет предварительно выбрана.
<!--
                Creates a
                &lt;select&gt;...&lt;/select&gt; block, with one
                &lt;option&gt;one for each of the $options elements.  In
                the $options array, the element key is the option value,
                and the element value is the option label.  The $value
                option(s) will be preselected for you.
-->
            </para></listitem>

            <listitem><para>
                <code>formSubmit($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="submit" /&gt;</code>.
<!--
                Creates an &lt;input
                type="submit" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formText($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="text" /&gt;</code>.
<!--
                Creates an &lt;input
                type="text" /&gt; element.
-->
            </para></listitem>

            <listitem><para>
                <code>formTextarea($name, $value, $attribs)</code>: Создает
                блок <code>&lt;textarea&gt;...&lt;/textarea&gt;</code>.
<!--
                Creates a
                &lt;textarea&gt;...&lt;/textarea&gt; block.
-->
            </para></listitem>

        </itemizedlist>

        <para>
            Использование их в скрипте вида очень простое, вот пример.
            Обратите внимание, что это все, что вам нужно для их вызова — они
            будут загружаться и инстанцироваться самостоятельно, когда
            будут нужны.

<!--
            Using these in your view scripts is very easy, here is an example.
            Note that you all you need to to is call them; they will load
            and instantiate themselves as they are needed.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// внутри вашего скрипта вида $this ссылается на экземпляр Zend_View
//
// предположим, что вы уже имеете последовательность опций
// в виде массива ('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany') именем $countries
<!--
// inside your view script, $this refers to the Zend_View instance.
//
// say that you have already assigned a series of select options under
// the name $countries as array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
-->
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no')) ?>
    </label></p>
</form>]]>
        </programlisting>

        <para>
            Результирующие выходные данные этого скрипта вида будут выглядеть
            наподобие этого:
<!--
            The resulting output from the view script will look something like this:
-->
        </para>

        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.helpers.paths">

        <title>Пути к вспомогательным классам<!--Helper Paths--></title>

        <para>
            Как и для скриптов вида, ваш контроллер может задать
            стек путей, в которых <code>Zend_View</code> должен искать
            вспомогательные классы. По умолчанию <code>Zend_View</code>
            ищет вспомогательные классы в <code>Zend/View/Helper/*</code>. Вы
            можете приказать <code>Zend_View</code> искать в других местах,
            используя методы <code>setHelperPath()</code> и
            <code>addHelperPath()</code>. Кроме этого, вы можете указать префикс
            класса, используемый для вспомогательных классов, он
            обеспечивает пространство имен. Если префикс не указан, то по
            умолчанию используется 'Zend_View_Helper_'.
<!--
            As with view scripts, your controller can specify a stack of paths
            for Zend_View to search for helper classes. By default, Zend_View
            looks in "Zend/View/Helper/*" for helper classes. You can tell
            Zend_View to look in other locations using the setHelperPath() and
            addHelperPath() methods.  Additionally, you can indicate a class
            prefix to use for helpers in the path provided, to allow namespacing
            your helper classes. By default, if no class prefix is provided,
            'Zend_View_Helper_' is assumed.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// Устанавливает путь /path/to/more/helpers с префиксом 'My_View_Helper'
$view->setHelperPath('/path/to/more/helpers', 'My_View_Helper');
?>]]>
        </programlisting>

        <para>
            Вы можете "складывать" в стек пути, используя метод
            <code>addHelperPath()</code>. Если вы добавили
            пути в стек, то <code>Zend_View</code> будет искать запрошенный
            вспомогательный класс в этих путях, начиная с пути, добавленного
            последним. Это дает возможность добавлять (или даже замещать)
            к начальному набору свои собственные вспомогательные классы.
<!--
            In fact, you can "stack" paths using the addHelperPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested helper
            class.  This allows you to add to (or even override) the
            initial distribution of helpers with your own custom
            helpers.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
// Добавить /path/to/some/helpers с префиксом для классов 'My_View_Helper'
$view->addHelperPath('/path/to/some/helpers', 'My_View_Helper);
// Добавить /other/path/to/helpers с префиксом для классов 'Your_View_Helper'
$view->addHelperPath('/other/path/to/helpers', 'Your_View_Helper');

// теперь, когда вы вызываете $this->helperName(), Zend_View будет искать
// "/other/path/to/helpers/HelperName.php" с классом "My_View_Helper_HelperName",
// затем "/path/to/some/helpers/HelperName" с классом "Your_View_Helper_HelperName",
// и под конец "Zend/View/Helper/HelperName.php" с классом "Zend_View_Helper_HelperName".
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.helpers.custom">

        <title>Написание собственных вспомогательных классов<!--Writing Custom Helpers--></title>

        <para>
            Написание собственных вспомогательных классов является довольно простым делом —
            просто следуйте этим правилам:
<!--
            Writing custom helpers is easy; just follow these rules:
-->
        </para>

        <itemizedlist>

            <listitem><para>
                Имя класса должно быть <code>Zend_View_Helper_*</code>,
                где * является именем самого "помощника". Например, если
                вы написали "помощника", называющегося "specialPurpose",
                имя класса должно быть "Zend_View_Helper_SpecialPurpose"
                (обратите внимание на использование главных букв).

                Имя класса должно быть, как минимум, заканчиваться именем
                "помощника", в котором имена начинаются с заглавной буквы. Т.е.
                если вы написали "помощника" с именем "specialPurpose", то
                минимальное имя класса должно быть "SpecialPurpose". Вы можете
                (и должны) давать классам имена с префиксом, рекомендуется
                использовать 'View_Helper' как часть этого префикса с или без
                завершающего знака подчеркивания.
<!--
                The class name must, at the very minimum, end with the helper
                name itself, using CamelCaps.  E.g., if you were writing a
                helper called "specialPurpose", the class name would minimally
                need to be "SpecialPurpose". You may, and should, give the class
                name a prefix, and it is recommended that you use 'View_Helper'
                as part of that prefix: "My_View_Helper_SpecialPurpose". (You
                will need to pass in the prefix, with or without the trailing
                underscore, to <code>addHelperPath()</code> or
                <code>setHelperPath()</code>).
-->
            </para></listitem>

            <listitem><para>
                Класс должен иметь открытый метод, имя которого
                соответствует имени "помощника". Это метод, который будет
                вызываться, когда ваш шаблон вызывает
                <code>$this->specialPurpose()</code>. В нашем примере с помощником
                "specialPurpose" объявление требуемого метода должно быть
                <code>public function specialPurpose()</code>.
<!--
                The class must have a public method that matches the
                helper name; this is the method that will be called when
                your template calls "$this->specialPurpose()".  In our
                "specialPurpose" helper example, the required method
                declaration would be "public function specialPurpose()".
-->
            </para></listitem>

            <listitem><para>
                Обычно класс не должен выполнять вывод, вместо этого
                он должен возвращать значение для вывода. Возвращаемое значение
                должно быть экранировано должным образом.
<!--
                In general, the class should not echo or print or otherwise
                generate output.  Instead, it should return values to be
                printed or echoed.  The returned values should be escaped
                appropriately.
-->
            </para></listitem>

            <listitem><para>
                Класс должен быть в файле, названном по имени метода.
                Снова используя пример с помощником "specialPurpose", мы
                должны дать файлу имя "SpecialPurpose.php".
<!--
                The class must be in file named after the helper method.
                Again using our "specialPurpose" helper example, the file
                has to be named "SpecialPurpose.php".
-->
            </para></listitem>
        </itemizedlist>

        <para>
            Размещайте вспомогательный класс где-либо в одном из находящихся в стеке путей
            к "помощникам", и <code>Zend_View</code> будет автоматически загружать,
            инстанцировать, сохранять и выполнять его.
<!--
            Place the helper class file somewhere in your helper path stack,
            and Zend_View will automatically load, instantiate, persist,
            and execute it for you.
-->
        </para>

        <para>
            Вот пример кода нашего помощника "SpecialPurpose":
<!--
            Here is an example of our SpecialPurpose helper code:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
class My_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>

        <para>
            Далее в скрипте вида вы можете вызывать помощника SpecialPurpose
            столько раз, сколько вам нужно. Он будет инстанцирован один раз,
            и сохраняется в течение существования экземпляра Zend_View.
<!--
            Then in a view script, you can call the SpecialPurpose helper
            as many times as you like; it will be instantiated once, and
            then it persists for the life of that Zend_View instance.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// помните, что в скрипте вида $this ссылается на экземпляр Zend_View
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>

        <para>
            Результат должен выглядеть наподобие этого:
<!--
            The output would look something like this:
-->
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
