<sect1 id="zend.controller.migration">
    <title>Переход с предыдущих версий<!--Migrating from Previous Versions--></title>

    <para>
        API компонент системы MVC изменялся от версии к версии. Если вы начали
        использование Zend Framework с его ранних версий, то следуйте
        рекомендациям по переводу вашего кода на новую архитектуру, приведенным
        ниже.
<!--
        The API of the MVC components has changed over time. If you started
        using Zend Framework in an early version, follow the guidelines below to
        migrate your scripts to use the new architecture.
-->
    </para>

    <sect2 id="zend.controller.migration.fromzerosix">
        <title>Переход с 0.6.0 на 0.8.0<!--Migrating from 0.6.0 to 0.8.0--></title>

        <para>
            Базовое использование компонент MVC не изменилось:
<!--
            Per previous changes, the most basic usage of the MVC components
            remains the same:
-->
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <para>
            Тем не менее, структура директорий подверглась пересмотру, некоторые
            компоненты были удалены, другие добавлены или переименованы.
            Изменения включают в себя следующее:
<!--
            However, the directory structure underwent an overhaul, several
            components were removed, and several others either renamed or added.
            Changes include:
-->
        </para>

        <itemizedlist>
            <listitem>

                <para>
                    <code>Zend_Controller_Router</code> удален в пользу
                    использования Rewrite Router.
<!--
                    <code>Zend_Controller_Router</code> was removed in favor of
                    the rewrite router.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_RewriteRouter</code> переименован в
                    <code>Zend_Controller_Router_Rewrite</code>, теперь это
                    стандартный маршрутизатор, поставляемый с фреймворком.
                    <code>Zend_Controller_Front</code> будет использовать его по
                    умолчанию, если не был установлен другой маршрутизатор.
<!--
                    <code>Zend_Controller_RewriteRouter</code> was renamed to
                    <code>Zend_Controller_Router_Rewrite</code>, and promoted to
                    the standard router shipped with the framework;
                    <code>Zend_Controller_Front</code> will use it by default if
                    no other router is supplied.
-->
                </para>

            </listitem>

            <listitem>
                <para>
                    Внедрен новый класс маршрута для использования с Rewrite
                    Router - <code>Zend_Controller_Router_Route_Module</code>.
                    Он предусматривает маршрут по умолчанию, используемый
                    компонентами MVC, и поддерживает <link
                        linkend="zend.controller.modular">модули контроллеров</link>.
<!--
                    A new route class for use with the rewrite router was
                    introduced,
                    <code>Zend_Controller_Router_Route_Module</code>; it covers
                    the default route used by the MVC, and has support for <xref
                        linkend="zend.controller.modular">controller
                        modules</xref>.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_Router_StaticRoute</code> переименован
                    в <code>Zend_Controller_Router_Route_Static</code>.
<!--
                    <code>Zend_Controller_Router_StaticRoute</code> was renamed
                    to <code>Zend_Controller_Router_Route_Static</code>.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>Zend_Controller_Dispatcher</code> переименован в <code>Zend_Controller_Dispatcher_Standard</code>.
<!--
                    <code>Zend_Controller_Dispatcher</code> was renamed
                    <code>Zend_Controller_Dispatcher_Standard</code>.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    Аргументы метода <code>Zend_Controller_Action::_forward()</code> изменились. Его сигнатура теперь:
<!--
                    <code>Zend_Controller_Action::_forward()</code>'s arguments
                    have changed. The signature is now:
-->
                </para>

                <programlisting role="php"><![CDATA[
final protected function _forward($action, $controller = null, $module = null, array $params = null);
]]></programlisting>

                <para>
                    <code>$action</code> - обязательный аргумент. Если не был определен контроллер, то предполагается, что вызывается действие в текущем контроллере. <code>$module</code> всегда игнорируется, если не определен контроллер. Все переданные в аргументе <code>$params</code> параметры будут добавлены в объект запроса. Если вам не нужно передавать контроллер или модуль, но нужно передать параметры, то просто укажите null на месте соответствующих аргументов.
<!--
                    <code>$action</code> is always required; if no controller is
                    specified, an action in the current controller is assumed.
                    <code>$module</code> is always ignored unless
                    <code>$controller</code> is specified. Finally, any
                    <code>$params</code> provided will be appended to the
                    request object. If you do not require the controller or
                    module, but still need to pass parameters, simply specify
                    null for those values.
-->
                </para>

            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Переход с 0.2.0 или более ранних версий на 0.6.0<!--Migrating from 0.2.0 or before to 0.6.0--></title>

        <para>
            Самые основы использования компонент системы MVC не изменились,
            следующий код будет корректно выполняться и в версии 0.6.0:
<!--
            The most basic usage of the MVC components has not changed; you can
            still do each of the following:
-->
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- create a router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- set it in a controller -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- set controller directory and dispatch -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            Рекомендуется использовать объект ответа для сбора содержимого и
            заголовков. Это предоставляет большую гибкость при переключении
            между разными форматами вывода (например, JSON или XML вместо XHTML)
            в приложениях. По умолчанию <code>dispatch()</code> будет выводить
            ответ, отправляя заголовки и выводя весь контент. Можно также
            сделать так, чтобы фронт-контроллер возвращал ответ, используя метод
            <code>returnResponse()</code>, и затем выводить ответ так, как нужно
            вам. Будущая версия фронт-контроллер может принуждать к
            использованию объекта ответа посредством буферизации вывода.
<!--
            We encourage use of the Response object to aggregate content and
            headers. This will allow for more flexible output format switching
            (for instance, JSON or XML instead of XHTML) in your applications.
            By default, <code>dispatch()</code> will render the response, sending both
            headers and rendering any content. You may also have the front
            controller return the response using <code>returnResponse()</code>,
            and then render the response using your own logic. A future version
            of the front controller may enforce use of the response object via
            output buffering.
-->
        </para>

        <para>
            Есть также много дополнительных инструментов, расширяющих
            существующий API, они описаны в этой документации.
<!--
            There are many additional features that extend the existing API,
            and these are noted in the documentation.
-->
        </para>

        <para>
            Основные изменения, о которых следует знать, касаются расширения
            существующих компонент. Наиболее важные из них следующие:
<!--
            The main changes you will need to be aware of will be found when
            subclassing the various components. Key amongst these are:
-->
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Controller_Front::dispatch()</code> по умолчанию
                    отлавливает все исключения в объекте ответа и не отображает
                    их для предотвращения раскрытия данных о системе. Вы
                    можете переопределить это поведение несколькими способами:
<!--
                    <code>Zend_Controller_Front::dispatch()</code> by default
                    traps exceptions in the response object, and does not render
                    them, in order to prevent sensitive system information from
                    being rendered. You can override this in several ways:
-->
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            Установка <code>throwExceptions()</code> во
                            фронт-контроллере:
<!--
                            Set <code>throwExceptions()</code> in the front
                            controller:
-->
                        </para>
                        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            Установка <code>renderExceptions()</code> в объекте
                            ответа:
<!--
                            Set <code>renderExceptions()</code> in the response
                            object:
-->
                        </para>
                        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->setResponse($response);
$front->dispatch();

// или:
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions(true);
echo $response;
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                теперь принимает и возвращает объект запроса
                <xref linkend="zend.controller.overview.request" />
                вместо метки <code>Zend_Controller_Dispatcher_Token</code>.
<!--
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
-->
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                теперь принимает и возвращает объект ответа
                <xref linkend="zend.controller.overview.request" />
                вместо метки <code>Zend_Controller_Dispatcher_Token</code>
<!--
                <code>Zend_Controller_Router_Interface::route()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
-->
            </para></listitem>

            <listitem>
                <para>
                    Среди изменений <code>Zend_Controller_Action</code> есть
                    следующие:
<!--
                    <code>Zend_Controller_Action</code> changes include:
-->
                </para>

                <itemizedlist>
                    <listitem><para>
                        Его конструктор теперь включает в себя три аргумента,
                        <code>Zend_Controller_Request_Abstract $request</code>,
                        <code>Zend_Controller_Response_Abstract $response</code>,
                        и <code>array $params</code> (необязательный).
                        <code>Zend_Controller_Action::__construct()</code>
                        использует их для установки запроса, ответа и свойств
                        объекта
                        Еще лучше использовать метод <code>init()</code> для
                        выполнения любого начального конфигурирования, так
                        как этот метод вызывается в конце конструктора.
<!--
                        The constructor now accepts exactly three arguments,
                        <code>Zend_Controller_Request_Abstract $request</code>,
                        <code>Zend_Controller_Response_Abstract $response</code>,
                        and <code>array $params (optional)</code>.
                        <code>Zend_Controller_Action::__construct()</code> uses
                        these to set the request, response, and invokeArgs
                        properties of the object, and if overriding the
                        constructor, you should do so as well. Better yet, use
                        the <code>init()</code> method to do any instance
                        configuration, as this method is called as the final
                        action of the constructor.
-->
                    </para></listitem>

                    <listitem><para>
                        Метод <code>run()</code> теперь не определен с ключевым
                        словом final, но он также и не используется во
                        фронт-контроллере; единственным его назначением
                        является использование класса как контроллера страниц.
                        Теперь он принимает два необязательных аргумента –
                        <code>Zend_Controller_Request_Abstract $request</code>
                        и <code>Zend_Controller_Response_Abstract $response</code>.
<!--
                        <code>run()</code> is no longer defined as final, but is
                        also no longer used by the front controller; it's sole
                        purpose is for using the class as a page controller. It
                        now takes two optional arguments, a
                        <code>Zend_Controller_Request_Abstract $request</code>
                        and a <code>Zend_Controller_Response_Abstract $response</code>.
-->
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> уже не обязателен для
                        определения, но рекомендуется определять его в качестве
                        действия по умолчанию. Это позволяет использовать
                        RewriteRouter и контроллеры для указания различных
                        методов действий, используемых по умолчанию.
<!--
                        <code>indexAction()</code> no longer needs to be
                        defined, but is encouraged as the default action. This
                        allows using the RewriteRouter and action controllers to
                        specify different default action methods.
-->
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> должен замещаться для обработки
                        вызовов не определенных в классе действий.
<!--
                        <code>__call()</code> should be overridden to handle any
                        undefined actions automatically.
-->
                    </para></listitem>

                    <listitem><para>
                        Метод <code>_redirect()</code> теперь принимает второй
                        необязательный аргумент, HTTP-код для возвращения при
                        перенаправлении, и третий необязательный аргумент,
                        <code>$prependBase</code>, который указывает, что
                        базовый URL, зарегистрированный в объекте запроса,
                        должен предшествовать URL, указанному в первом
                        аргументе.
<!--
                        <code>_redirect()</code> now takes an optional second
                        argument, the HTTP code to return with the redirect, and
                        an optional third argument, <code>$prependBase</code>,
                        that can indicate that the base URL registered with the
                        request object should be prepended to the url specified.
-->
                    </para></listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                Метод
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> был
                удален. Вместо него используйте
                <code>Zend_Controller_Front::setBaseUrl()</code> (или
                Zend_Controller_Request_Http::setBaseUrl(), если используется
                объект запроса).
<!--
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> has
                been removed. Use <code>Zend_Controller_Front::setBaseUrl()</code>
                instead (or Zend_Controller_Request_Http::setBaseUrl(), if using
                that request class).
-->
            </para></listitem>

            <listitem><para>
                Интерфейс <code>Zend_Controller_Plugin_Interface</code> заменен
                классом <code>Zend_Controller_Plugin_Abstract</code>. Все его
                методы теперь принимают и возвращают
                <xref linkend="zend.controller.overview.request" />
                вместо метки диспетчеризации.
<!--
                <code>Zend_Controller_Plugin_Interface</code> was replaced
                by <code>Zend_Controller_Plugin_Abstract</code>. All methods now
                accept and return a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
-->
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
