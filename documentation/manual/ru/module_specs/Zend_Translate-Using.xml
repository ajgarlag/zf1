<sect1 id="zend.translate.using">

    <title>Using Translation Adapters</title>

    <para>
        The next step is to use the adapter within your code.
    </para>

    <example id="zend.translate.using.example1">
        <title>Example of single-language PHP code</title>
        <programlisting role="php"><![CDATA[<?php
print "Example\n";
print "=======\n";
print "Here is line one\n";
print "Today is the " . date("d.m.Y") . "\n";
print "\n";
print "Fix language here is line two\n";
?>]]></programlisting>
    </example>

    <para>
        The example above shows some output with no support for translation.
        You probably write your code in your native language.
        Generally you need to translate not only the output,
        but also error messages and log messages.
    </para>

    <para>
        The next step is to include Zend Translate in your existing code.
        Of course it is much easier if you are writing your code using
        Zend_Translate instead of changing your code afterwards.
    </para>

    <example id="zend.translate.using.example2">
        <title>Example of multi-lingual PHP code</title>
        <programlisting role="php"><![CDATA[<?php
require_once("Zend/Translate.php");

$translate = new Zend_Translate('gettext', '/my/path/source-de.mo', 'de');
$translate->addTranslation('//my/path/fr-source.mo', 'fr');

print $translate->_("Example")."\n";
print "=======\n";
print $translate->_("Here is line one")."\n";
printf($translate->_("Today is the %1\$s") . "\n", date("d.m.Y"));
print "\n";

$translate->setLocale('fr');
print $translate->_("Fix language here is line two") . "\n";
?>]]></programlisting>
    </example>

    <para>
        Now let's get a deeper look into what has been done and how to
        integrate Zend_Translate into your code.
    </para>

    <para>
        Create a new Translation object and define the base adapter:

<programlisting role="php"><![CDATA[<?php
require_once("Zend/Translate.php");

$translate = new Zend_Translate('gettext', '/my/path/source-de.mo', 'de');
?>]]></programlisting>

        In this example we decided the
        <emphasis role="strong">Gettext Adapter</emphasis>.
        We place our file <emphasis role="strong">source-de.mo</emphasis>
        into the directory <emphasis role="strong">/my/path</emphasis>.
        The gettext file will have German translation included.
        And we also added another language source for French.
    </para>

    <para>
        The next step is to wrap all strings which are to be translated.
        The simplest approach is to have only simple strings or sentences
        like this:

<programlisting role="php"><![CDATA[<?php
print $translate->_("Example")."\n";
print "=======\n";
print $translate->_("Here is line one")."\n";
?>]]></programlisting>

        Some strings do not needed to be translated.
        The seperating line is always a seperating line,
        even in other languages.
    </para>

    <para>
        Having data values integrated into a translation string is also
        supported through the use of embedded parameters.

<programlisting role="php"><![CDATA[<?php
printf($translate->_("Today is the %1\$s") . "\n", date("d.m.Y"));
?>]]></programlisting>

        Instead of <code>print()</code>, use the <code>printf()</code>
        function and replace all parameters with <code>%1\$s</code> parts.
        The first is <code>%1\$s</code>, the second <code>%2\$s</code>,
        and so on. This way a translation can be done without knowing
        the exact value. In our example, the date is always the actual day,
        but the string can be translated without the knowledge of the actual
        day.
    </para>

    <para>
        Each string is identified in the translation storage by a message id.
        You can use message id's instead of strings in your code, like this:

<programlisting role="php"><![CDATA[<?php
print $translate->_(1)."\n";
print "=======\n";
print $translate->_(2)."\n";
?>]]></programlisting>

        But doing this has several disadvantages:
    </para>

    <para>
        You can not see what your code should output just by viewing your code.
    </para>

    <para>
        Also you will get problems if some strings are not translated.
        You always must imagine how translation works.
        First Zend_Translate looks if the set language has a translation
        for the given message id or string.
        If no translation string has been found it refers to the next lower
        language as defined within Zend_Locale.
        So "<emphasis role="strong">de_AT</emphasis>" becomes
        "<emphasis role="strong">de</emphasis>" only.
        If there is no translation found for
        "<emphasis role="strong">de</emphasis>" either,
        then the original message is returned.
        This way you always have an output, in case the message translation
        does not exist in your message storage.
        Zend_Translate never throws an error or exception when translating
        strings.
    </para>

    <sect2 id="zend.translate.using.structure">

        <title>Translation Source Structures</title>

        <para>
            Your next step is to create the translation sources for the several
            languages to which you translate.
            Every adapter is created its own way as described here.
            But there are some general features that are relevant for all adapters.
        </para>

        <para>
            You should know where to store your translation source files.
            With Zend_Translate you are not bound to any restriction.
            The following structures are preferable:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Single structured source
                </para>

                <programlisting><![CDATA[
/application
/languages
  lang.en
  lang.de
/library
]]></programlisting>

                <para>
                    Positive: All source files for every languages can be
                    found in one directory.  No splitting of related files.
                </para>
            </listitem>
            <listitem>
                <para>
                    Language structured source
                </para>

                <programlisting><![CDATA[
/application
/languages
  /en
    lang.en
    other.en
  /de
    lang.de
    other.de
/library
]]></programlisting>

                <para>
                    Positive: Every language is based in one directory.
                    Easy translation as only one directory has to be
                    translated by a language team.
                    Also the usage of multiple files is transparent.
                </para>
            </listitem>
            <listitem>
                <para>
                    Application structured source
                </para>

                <programlisting><![CDATA[
/application
  /languages
    lang.en
    lang.de
    other.en
    other.de
]]></programlisting>

                <para>
                    Positive: All source files for every languages can be
                    found in one directory.  No splitting of related files.
                </para>

                <para>
                    Negative: Having multiple files for the same language is
                    problematic.
                </para>
            </listitem>
            <listitem>
                <para>
                    Gettext structured source
                </para>

                <programlisting><![CDATA[
/languages
  /de
    /LC_MESSAGES
      lang.mo
      other.mo
  /en
    /LC_MESSAGES
      lang.mo
      other.mo
]]></programlisting>

                <para>
                    Positive: Old gettext sources can be used without changing
                    structure.
                </para>

                <para>
                    Negative: Having sub-sub directories may be confusing
                    for people who have not used gettext before.
                </para>
            </listitem>
            <listitem>
                <para>
                   File structured source
                </para>

                <programlisting><![CDATA[
/application
  /models
    mymodel.php
    mymodel.de
    mymodel.en
  /views
  /controllers
    mycontroller.de
/document_root
  /images
  /styles
  .htaccess
  index.php
  index.de
/library
  /Zend
]]></programlisting>
                <para>
                    Positive: Every file is related to its own translation
                    source.
                </para>

                <para>
                    Negative: Multiple small translation source files make
                    it harder to translate.
                    Also every file has to be added as translation source.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Single structured and language structured source files are most
            usable for Zend_Translate.
        </para>

        <para>
            So now, that we know which structure we want to have,
            we should create our translation source files.
        </para>

    </sect2>

    <sect2 id="zend.translate.using.source.array">

        <title>Creating array source files</title>

        <para>
            Array source files are just arrays.  But you have to define them
            manually because there is no tool for this.
            But because they are so simple, it's the fastest way to look up
            messages if your code works as expected.  It's generally the best
            adapter to get started with translation business.
        </para>

        <programlisting role="php"><![CDATA[
$english = array('message1' => 'message1',
                 'message2' => 'message2',
                 'message3' => 'message3');
$german = array('message1' => 'Nachricht1',
                'message2' => 'Nachricht2',
                'message3' => 'Nachricht3');

$translate = new Zend_Translate('array', $english, 'en');
$translate->addTranslation($deutsch, 'de');
]]></programlisting>
    </sect2>

    <sect2 id="zend.translate.using.source.gettext">

        <title>Creating Gettext Source Files</title>

        <para>
            Gettext source files are created by GNU's gettext library.
            There are several free tools available that can parse your
            code files and create the needed gettext source files.
            These files have the ending <emphasis role="strong">*.mo</emphasis>
            and they are binary files.
            One freeware tool for creating the files is
            <ulink url="http://sourceforge.net/projects/poedit/">poEdit</ulink>.
            This tool also supports you for the translation process itself.
        </para>

        <programlisting role="php"><![CDATA[
// We expect that we have created the mo files and translated them
$translate = new Zend_Translate('gettext', 'path/to/english.mo', 'en');
$translate->addTranslation('path/to/german.mo', 'de');
]]></programlisting>

        <para>
            As you can see the adapters are used exactly the same way,
            with only just one small difference.
            Change 'array' to 'gettext'.  All other usages are exactly
            the same as with all other adapters.
            With the gettext adapter you no longer have to be aware of
            gettext's standard directory structure,
            bindtextdomain and textdomain.
            Just give the path and filename to the adapter.
        </para>

        <note>
            <para>
                 You should always use UTF-8 as source encoding.
                 Otherwise you will have problems if you are using two
                 different source encodings.
                 For example, if one of your source files is encoded
                 with ISO-8815-11 and another file is encoded with CP815.
                 You can set only one encoding for your source file,
                 so one of your languages probably will not display correctly.
            </para>
            <para>
                 UTF-8 is a portable format which supports all languages.
                 If you use UTF-8 encoding for all languages, you eliminate
                 the problem of incompatible encodings.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.translate.using.source.tmx">

        <title>Creating TMX Source Files</title>

        <para>
            TMX source files are a new industry standard.
            They have the advantage of being XML files and so they are
            readable by every editor and of course they are human-readable.
            You can either create TMX files manually with a text editor,
            or you can use a tool. But most tools currently available for
            developing TMX source files are not freeware.
        </para>

        <example id="zend.translate.using.source.tmx.example">
            <title>Example TMX file</title>
            <programlisting role="xml"><![CDATA[
<?xml version="1.0" ?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
 <header creationtoolversion="1.0.0" datatype="winres" segtype="sentence" adminlang="en-us" srclang="de-at" o-tmf="abc" creationtool="XYZTool" >
 </header>
 <body>
  <tu tuid='message1'>
   <tuv xml:lang="de"><seg>Nachricht1</seg></tuv>
   <tuv xml:lang="en"><seg>message1</seg></tuv>
  </tu>
  <tu tuid='message2'>
   <tuv xml:lang="en"><seg>message2</seg></tuv>
   <tuv xml:lang="de"><seg>Nachricht2</seg></tuv>
  </tu>
]]></programlisting>

            <programlisting role="php"><![CDATA[
$translate = new Zend_Translate('tmx', 'path/to/mytranslation.tmx', 'en');
// TMX can have several languages within one TMX file.
]]></programlisting>
        </example>

        <para>
            TMX files can have several languages within the same file.
            All other included languages are added automatically,
            so you do not have to call <code>addLanguage()</code>.
        </para>

        <para>
            If you want to have only spezified languages from the source translated
            you can set the option <code>defined_language</code> to <code>true</code>.
            With this option you can add the wished languages explicit with
            <code>addLanguage()</code>. The default value for this option is to add all
            languages.
        </para>
    </sect2>

    <sect2 id="zend.translate.using.source.csv">

        <title>Creating CSV Source Files</title>

        <para>
            CSV source files are small and human readable.
            If your customers want to translate their own,
            you will probably use the CSV adapter.
        </para>

        <example id="zend.translate.using.source.csv.example">
            <title>Example CSV file</title>
            <programlisting><![CDATA[
﻿#Example csv file
message1;Nachricht1
message2;Nachricht2
]]></programlisting>

            <programlisting role="php"><![CDATA[
$translate = new Zend_Translate('csv', 'path/to/mytranslation.csv', 'de');
$translate->addTranslation('path/to/other.csv', 'fr');
]]></programlisting>
        </example>

        <para>
            The standard separator for CSV string is the '<code>;</code>' sign.
            But it has not to be that sign. With the option '<code>separator</code>'
            you can decide to use another separator sign.
        </para>

        <para>
            If you have to have the separator sign within your translation string you
            just have to double it to be included within the translation. One separator
            sign will separate the origin and translation strings and two separator signs
            will write the separator signs within the string. See the following example
            for details
        </para>

        <example id="zend.translate.using.source.csv.example2">
            <title>Example CSV file two</title>
            <programlisting><![CDATA[
﻿#Example csv file
# original 'message,1'
message,,1,Nachricht1
# translation 'Nachricht,2'
message2,Nachricht,,2
# original 'message3,'
message3,,,Nachricht3
]]></programlisting>

            <programlisting role="php"><![CDATA[
$translate = new Zend_Translate('csv', 'path/to/mytranslation.csv', 'de', array('separator' => ','));
$translate->addTranslation('path/to/other.csv', 'fr');
]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.translate.using.options">

        <title>Options for adapters</title>

        <para>
            Options can be used with all adapters. Of course the options are different for all adapters.
            You can set options when you create the adapter. Actually there is one option which is avaiable
            to all adapters. '<code>clear</code>' decides if translation data shold be added to existing
            one or not. Standard behaviour is to add new translation data to existing one. But the
            translation data is only cleared for the selected language. So all other languages will not be
            touched.
        </para>

        <para>
            You can set options temporary when using <code>addTranslation($data, $locale, array $options = array())</code>.
            as third and optional parameter. And you can use the <code>setOptions()</code> function to
            set the options fix.
        </para>

        <example id="zend.translate.using.options.example">
            <title>Using translation options</title>
            <programlisting role="php"><![CDATA[
$options = array('clear' => true);
$translate = new Zend_Translate('csv', 'path/to/mytranslation.csv', 'de');
$translate->addTranslation('path/to/other.csv', 'fr');
... // do something
$translate->addTranslation('path/to/new.csv', 'fr', $options); // clear language fr, use new translation
]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.translate.using.istranslated">

        <title>Checking for translations</title>

        <para>
            Normally text will be translated without any computations. But sometimes it is necessary to
            know if a text is translated or not within the source. Therefor the <code>isTranslated()</code>
            method can be used.
        </para>

        <para>
            <code>isTranslated($messageId, $original = false, $locale = null)</code> takes as first parameter
            the text from which you want to know if it can be translated. And as optional third parameter the locale
            for which you want to know the translation. The optional second parameter declares if translation
            is fix to the declared language or a lower set of translations can be used. If you have a text which
            can be translated by 'en' but not for 'en_US' you will normally get the translation returned, but by
            setting <code>$original</code> to true, the <code>isTranslated()</code> method will return false in
            such cases.
        </para>

        <example id="zend.translate.using.istranslated.example">
            <title>Checking if a text is translateable</title>
            <programlisting role="php"><![CDATA[
$english = array('message1' => 'Nachricht 1',
                 'message2' => 'Nachricht 2',
                 'message3' => 'Nachricht 3');
$translate = new Zend_Translate('array', $english, 'de_AT');

if ($translate->isTranslated('message1')) {
    print "'message1' can be translated";
}
if (!($translate->isTranslated('message1', true, 'de'))) {
    print "'message1' can not be translated in 'de' as it's only avaiable in 'de_AT'";
}
if ($translate->isTranslated('message1', false, 'de')) {
    print "'message1' can be translated in 'de_AT' falls back to 'de'";
}
]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
