<sect1 id="zend.controller.modular">
    <title>Использование определенной соглашением модульной структуры директорий<!--Using a Conventional Modular Directory Structure--></title>

    <sect2 id="zend.controller.modular.introduction">
        <title>Введение<!--Introduction--></title>
        <para>
            Определенная соглашением модульная структура директорий позволяет
            разделять различные приложения MVC в автономные единицы и повторно
            использовать их с различными фронт-контроллерами. Ниже показан
            пример такой структуры:
<!--
            The Conventional Modular directory structure allows you to separate
            different MVC applications into self-contained units, and re-use
            them with different front controllers. To illustrate such a
            directory structure:
-->
        </para>

        <programlisting role="php"><![CDATA[
docroot/
    index.php
application/
    default/
        controllers/
            IndexController.php
            FooController.php
    blog/
        controllers/
            IndexController.php
        models/
        views/
    news/
        controllers/
            IndexController.php
            ListController.php
        models/
        views/]]>
        </programlisting>

        <para>
            В этой парадигме имена модулей используются как префиксы к
            контроллерам в этих модулях. Пример выше содержит три контроллера в
            модулях: 'Blog_IndexController', 'News_IndexController' и
            'News_ListController'. Также определены два глобальных контроллера:
            'IndexController' и 'FooController', для них не используются
            пространства имен. Эта структура директорий будет
            использоваться для примеров в данном разделе.
<!--
            In this paradigm, the module name serves as a prefix to the
            controllers it contains. The above example contains three
            module controllers, 'Blog_IndexController', 'News_IndexController', and
            'News_ListController'. Two global controllers, 'IndexController' and
            'FooController' are also defined; neither of these will be
            namespaced. This directory structure will be used for examples in
            this chapter.
-->
        </para>

        <note>
            <title>Нет пространств имен в модуле, используемом по умолчанию<!--No namespacing in the default module--></title>
            <para>
                Обратите внимание, что в модуле, используемом по умолчанию,
                контролеры не нуждаются в префиксе пространства имен. В примере
                выше контроллеры в модуле по умолчанию не нуждаются в префиксе
                'Default_' - они просто вызываются по их базовым именам
                контроллера: 'IndexController' and 'FooController'. Но для
                других модулей использование префикса пространства имен
                обязательно.
<!--
                Note that in the default module, controllers do not need a
                namespace prefix. Thus, in the example above, the controllers in
                the default module do not need a prefix of 'Default_' - they
                are simply dispatched according to their base controller name:
                'IndexController' and 'FooController'. A namespace prefix is
                used in all other modules, however.
-->
            </para>
        </note>

        <para>
            Итак, как можно реализовать такую организацию на уровне директорий,
            используя компоненты MVC в Zend Framework?
<!--
            So, how do you implement such a directory layout using the Zend
            Framework MVC components?
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.modular.directories">
        <title>Определение директорий контроллеров в модулях<!--Specifying Module Controller Directories--></title>

        <para>
            Первым шагом в использовании модулей является изменение способа
            определения списка директорий во фронт-контроллере. При обычном
            использовании MVC вы передаете массив или строку методу
            <code>setControllerDirectory()</code>, либо путь методу
            <code>addControllerDirectory()</code>. При использованиии модулей
            нужно несколько изменить вызовы этих методов.
<!--
            The first step to making use of modules is to modify how you specify
            the controller directory list in the front controller. In the basic
            MVC series, you pass either an array or a string to
            <code>setControllerDirectory()</code>, or a path to
            <code>addControllerDirectory()</code>.  When using modules, you need
            to alter your calls to these methods slightly.
-->
        </para>

        <para>
            Методу <code>setControllerDirectory()</code> передается
            ассоциативный массив, в котором пары ключ/значение содержат имя
            модуля и путь к директории соответственно. Специальный ключ
            'default' используется для глобальных контроллеров (которым не нужно
            пространство имен модуля). Все записи должны содержать строковой
            ключ, указывающий на единственный путь, при этом должен
            присутствовать ключ <code>default</code>. Например:
<!--
            With <code>setControllerDirectory()</code>, you will need to pass an
            associative array and specify key/value pairs of module
            name/directory paths.  The special key <code>default</code> will be
            used for global controllers (those not needing a module namespace).
            All entries should contain a string key pointing to a single path,
            and the <code>default</code> key must be present. As an example:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$front->setControllerDirectory(array(
      'default' => '/path/to/application/controllers',
      'blog'    => '/path/to/application/blog/controllers'
));]]>
        </programlisting>

        <para>
            Метод <code>addControllerDirectory()</code> принимает необязательный
            второй параметр. Если используются модули, то передавайте имя модуля
            в качестве второго аргумента; если он не определен, то путь будет
            добавлен в пространство имен <code>default</code>. Например:
<!--
            <code>addControllerDirectory()</code> will take an optional second
            argument. When using modules, pass the module name as the second
            argument; if not specified, the path will be added to the
            <code>default</code> namespace. As an example:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$front->addControllerDirectory('/path/to/application/news/controllers', 'news');]]>
        </programlisting>

        <para>
            Лучшее напоследок: самый легкий способ определения
            директорий модулей состоит в их одновременном определении, со всеми
            модулями под общей директорией и использующими одну и ту же
            структуру. Это может быть сделано с помощью
            <code>addModuleDirectory()</code>:
<!--
            Saving the best for last, the easiest way to specify module
            directories is to do so en masse, with all modules under a common
            directory and sharing the same structure. This can be done with
            <code>addModuleDirectory()</code>:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
/**
 * Предполагается следующая структура директорий:
 * application/
 *     modules/
 *         default/
 *             controllers/
 *         foo/
 *             controllers/
 *         bar/
 *             controllers/
 */
$front->addModuleDirectory('/path/to/application/modules');]]>
        </programlisting>

        <para>
            Пример выше определит модули <code>default</code>, <code>foo</code>
            и <code>bar</code>, все они указывают на поддиректорию
            <code>controllers</code> соответствующих модулей.
<!--
            The above example will define the <code>default</code>,
            <code>foo</code>, and <code>bar</code> modules, each pointing to the
            <code>controllers</code> subdirectory of their respective module.
-->
        </para>

        <para>
            Через метод <code>setModuleControllerDirectoryName() можно указать
            другую поддиректорию контроллеров для использования внутри
            модулей</code>:
<!--
            You may customize the controller subdirectory to use within your
            modules by using <code>setModuleControllerDirectoryName()</code>:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
/**
 * Изменяем поддиректорию для контроллеров на 'con'
 * application/
 *     modules/
 *         default/
 *             con/
 *         foo/
 *             con/
 *         bar/
 *             con/
 */
$front->setModuleControllerDirectoryName('con');
$front->addModuleDirectory('/path/to/application/modules');]]>
        </programlisting>

        <note><para>
            Вы можете указать, что для модулей не должна использоваться
            поддиректория для контроллеров путем передачи пустого значения
            методу <code>setModuleControllerDirectoryName()</code>.
<!--
            You can indicate that no controller subdirectory be used for your
            modules by passing an empty value to
            <code>setModuleControllerDirectoryName()</code>.
-->
        </para></note>
    </sect2>

    <sect2 id="zend.controller.modular.router">
        <title>Маршрутизация применительно к модулям<!--Routing to modules--></title>

        <para>
            Маршрут, используемый по умолчанию в
            <code>Zend_Controller_Router_Rewrite</code>, является объектом типа
            <code>Zend_Controller_Router_Route_Module</code>. Этот маршрут
            использует один из следующих шаблонов маршрутизации:
<!--
            The default route in <code>Zend_Controller_Router_Rewrite</code> is
            an object of type <code>Zend_Controller_Router_Route_Module</code>.
            This route expects one of the following routing schemas:
-->
        </para>

        <itemizedlist>
            <listitem><para>
                <code>:module/:controller/:action/*</code>
            </para></listitem>
            <listitem><para>
                <code>:controller/:action/*</code>
            </para></listitem>
        </itemizedlist>

        <para>
            Другими словами, он будет соответсвовать контроллеру и действию без
            модуля или контроллеру и действию с предшествующим модулем. Правила
            сопоставления предписывают, что URL должен только тогда
            соответствовать модулю, если ключ с тем же именем существует в
            массиве директорий контроллеров, переданного фронт-контроллеру и
            диспетчеру.
<!--
            In other words, it will match a controller and action by themselves
            or with a preceding module. The rules for matching specify that a
            module will only be matched if a key of the same name exists in the
            controller directory array passed to the front controller and
            dispatcher.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.modular.defaultcontroller">
        <title>Молуль или глобальный контроллер по умолчанию<!--Module or Global Default Controller--></title>

        <para>
            В маршрутизаторе, используемом по умолчанию, если контроллер не был
            указан в URL, то используется контроллер по умолчанию
            (<code>IndexController</code>, если не был установлен другой). В
            случае использования модулей, если был указан модуль без
            контроллера, то диспетчер сначала ищет используемый по умолчанию
            контроллер в директории модуля, затем в глобальном пространстве имен
            'default'.
<!--
            In the default router, if a controller was not specified in the URL,
            a default controller is used (<code>IndexController</code>, unless
            otherwise requested). With modular controllers, if a module has been
            specified but no controller, the dispatcher first looks for this
            default controller in the module path, and then falls back on the
            default controller found in the 'default', global, namespace.
-->
        </para>

        <para>
            Если вы хотите всегда использовать глобальное пространство имен, то
            установите параметр <code>useGlobalDefault</code> во
            фронт-контроллере:
<!--
            If you wish to always default to the global namespace, set the
            <code>useDefaultControllerAlways</code> parameter in the front controller:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$front->setParam('useDefaultControllerAlways', true);]]>
        </programlisting>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
