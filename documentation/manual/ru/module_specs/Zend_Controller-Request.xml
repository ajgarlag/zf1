<sect1 id="zend.controller.request">
    <title>Объект запроса<!--The Request Object--></title>
    <sect2 id="zend.controller.request.introduction">
        <title>Введение<!--Introduction--></title>
        <para>
            Объект запроса - это простой "объект значений"
            (<ulink url="http://www.patternsforphp.com/wiki/Value_Object">value
            object</ulink>), который передается между
            <code>Zend_Controller_Front</code>, маршрутизатором,
            диспетчером и контроллерами. Он хранит в себе имена запрошенных
            модуля, контроллера, действия и необязательные параметры, а также
            остальную среду (переменные) запроса, будь это HTTP, CLI или
            PHP-GTK.
<!--
            The request object is a simple value object that is passed between
            <code>Zend_Controller_Front</code> and the router, dispatcher, and
            controller classes.  It packages the names of the requested module,
            controller, action, and optional parameters, as well as the rest of
            the request environment, be it HTTP, the CLI, or PHP-GTK.
-->
        </para>

        <itemizedlist>
            <listitem><para>
                Доступ к имени модуля производится через
                <code>getModuleName()</code> и <code>setModuleName()</code>.
<!--
                The module name is accessed by
                <code>getModuleName()</code> and
                <code>setModuleName()</code>.
-->
            </para></listitem>

            <listitem><para>
                Доступ к имени контроллера производится через
                <code>getControllerName()</code> и
                <code>setControllerName()</code>.
<!--
                The controller name is accessed by
                <code>getControllerName()</code> and
                <code>setControllerName()</code>.
-->
            </para></listitem>

            <listitem><para>
                Доступ к имени действия производится через
                <code>getControllerName()</code> и
                <code>setControllerName()</code>.
<!--
                The name of the action to call within that controller is
                accessed by <code>getActionName()</code> and
                <code>setActionName()</code>.
-->
            </para></listitem>

            <listitem><para>
                Параметры, доступные через действие, являются ассоциативным
                массивом пар ключ/значение, который извлекается целиком через
                метод <code>getParams()</code> и устанавливается через метод
                <code>setParams()</code>. Его элементы можно извлекать и
                устанавливать по отдельности через те же методы
                <code>getParam()</code> и <code>setParam()</code>
                соответственно.
<!--
                Parameters to be accesible by the action are an associative array
                of key/value pairs that are retrieved by <code>getParams()</code>
                and set with <code>setParams()</code>, or individually by
                <code>getParam()</code> and <code>setParam()</code>.
-->
            </para></listitem>
        </itemizedlist>

        <para>
            Методов, которые можно использовать в запросе, может быть больше, в
            зависимости от типа запроса. Например, используемый по умолчанию
            запрос <code>Zend_Controller_Request_Http</code> имеет методы для
            получения URI запроса, пути в нем, параметров <code>$_GET</code> и
            <code>$_POST</code>, и т.д.
<!--
            Based on the type of request, there may be more methods available.
            The default request used, <code>Zend_Controller_Request_Http</code>,
            for instance, has methods for retrieving the request URI, path
            information, <code>$_GET</code> and <code>$_POST</code> parameters,
            etc.
-->
        </para>

        <para>
            Объект запроса передается фронт-контроллеру, или, если не был
            передан, инициализируется в начале процесса диспетчеризации, до
            того, как будет произведена маршрутизация. Он передается всем
            объектам в цепочке диспетчеризации.
<!--
            The request object is passed to the front controller, or if none is
            provided, it is instantiated at the beginning of the dispatch
            process, before routing occurs. It is passed through to every object
            in the dispatch chain.
-->
        </para>

        <para>
            Кроме этого, объект запроса очень полезен в тестировании.
            Разработчик может вручную установить переменные запроса, включая
            модуль, контроллер, действие, параметры, URI и т.д., и передать
            объект запроса фронт-контроллеру для проверки процесса выполнения
            приложения. Если комбинировать его с
            <link linkend="zend.controller.response">объектом ответа</link>,
            то становится возможным тщательное и точное юнит-тестирование
            приложений MVC.
<!--
            Additionally, the request object is particularly useful in testing.
            The developer may craft the request environment, including module,
            controller, action, parameters, URI, etc, and pass the request
            object to the front controller to test application flow. When paired
            with the <link linkend="zend.controller.response">response
                object</link>, elaborate and precise unit testing of MVC
            applications becomes possible.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.request.http">
        <title>HTTP-запросы<!--HTTP Requests--></title>

        <sect3 id="zend.controller.request.http.dataacess">
            <title>Доступ к данным запроса<!--Accessing Request Data--></title>

            <para>
                <code>Zend_Controller_Request_Http</code> инкапсулирует доступ к
                соответствующим значениям, таким, как имя и значение ключа для
                переменных контроллера и действия, и все дополнительные
                параметры, полученные из URI. Он также позволяет обращаться
                к значениям, содержащимся в суперглобальных массивах, как к
                своим открытым членам, и управляет текущими базовым URL и URI
                запроса. Суперглобальные значения не могут устанавливаться в
                объекте запроса, вместо этого используйте методы
                setParam/getParam для установки или получения пользовательских
                параметров.
<!--
                <code>Zend_Controller_Request_Http</code> encapsulates access to
                relevant values such as the key name and value for the
                controller and action router variables, and all additional
                parameters parsed from the URI. It additionally allows access to
                values contained in the superglobals as public members, and
                manages the current Base URL and Request URI.  Superglobal
                values cannot be set on a request object, instead use the
                setParam/getParam methods to set or retrieve user parameters.
-->
            </para>

            <note>
                <title>Суперглобальные данные<!--Superglobal data--></title>
                <para>
                    Когда получаете доступ к суперглобальным данным через
                    <code>Zend_Controller_Request_Http</code> как к публичным
                    свойствам, то необходимо помнить, что имя свойства (ключ
                    суперглобального массива) сопоставляются с суперглобальными
                    массивами в определенной последовательности: 1. GET,
                    2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
<!--
                    When accessing superglobal data through
                    <code>Zend_Controller_Request_Http</code> as public member
                    properties, it is necessary to keep in mind that the
                    property name (superglobal array key) is matched to a
                    superglobal in a specific order of precedence: 1. GET, 2.
                    POST, 3. COOKIE, 4. SERVER, 5. ENV.
-->
                </para>
            </note>

            <para>
                Отдельные значения из суперглобальных массивов можно также
                получить через открытые методы. Например, необработанное
                значение <code>$_POST['user']</code> может быть получено через
                вызов метода <code>getPost('user')</code> объекта запроса. Эти
                методы включают в себя <code>getQuery()</code> для получения
                элементов массива <code>$_GET</code> и <code>getHeader()</code>
                для получения заголовков запроса.
<!--
                Specific superglobals can be accessed using a public method as
                an alternative. For example, the raw value of
                <code>$_POST['user']</code> can be accessed by calling
                <code>getPost('user')</code> on the request object. These
                include <code>getQuery()</code> for retrieving
                <code>$_GET</code> elements, and <code>getHeader()</code> for
                retrieving request headers.
-->
            </para>

            <note>
                <title>Данные GET и POST<!--GET and POST data--></title>
                <para>
                    Будьте осторожны, когда извлекаете данные из объекта
                    запроса, поскольку они совсем не фильтруются. Маршрутизатор
                    и диспетчер проводят валидацию и фильтрацию данных для
                    использования в своих целях, но оставляют их нетронутыми
                    данные в объекте запроса.
<!--
                    Be cautious when accessing data from the request object as
                    it is not filtered in any way. The router and dispatcher
                    validate and filter data for use with their tasks, but leave
                    the data untouched in the request object.
-->
                </para>
            </note>

            <para>
                Вы можете также устанавливать пользовательские параметры в
                объекте запроса, используя <code>setParam()</code>, и извлекать
                их после, используя <code>getParam()</code>. Маршрутизатор
                использует этот функционал для установки параметров,
                обнаруженных в URI запроса, в объекте запроса.
<!--
                You may also set user parameters in the request object using
                <code>setParam()</code> and retrieve these later using
                <code>getParam()</code>. The router makes use of this
                functionality to set parameters matched in the request URI into
                the request object.
-->
            </para>

            <note>
                <title>getParam() возвращает не только пользовательские параметры<!--getParam() retrieves more than user params--></title>

                <para>
                    <code>getParam()</code> извлекает значения из нескольких
                    источников. В порядке следования эти источники влкючают в
                    себя: пользовательские параметры, установленные через
                    <code>setParam()</code>, параметры
                    <code>GET</code>, <code>POST</code> и <code>COOKIE</code>.
                    Помните об этом, когда извлекаете данные через этот метод.
<!--
                    In order to do some of its work, <code>getParam()</code> actually
                    retrieves from several sources. In order of priority, these
                    include: user parameters set via <code>setParam()</code>,
                    <code>GET</code> parameters, <code>POST</code> parameters,
                    and finally <code>COOKIE</code> parameters. Be aware of this
                    when pulling data via this method.
-->
                </para>
            </note>

            <note>
                <title>Причуды Apache<!--Apache Quirks--></title>
                <para>
                    Если вы используете обработчик ошибок 404 веб-сервера Apache
                    для передачи приходящих запросов фронт-контроллеру или
                    используете флаг PT с правилами перезаписи, то нужный вам
                    URI будет содержаться в
                    <code>$_SERVER['REDIRECT_URL']</code>, а не в
                    <code>$_SERVER['REQUEST_URI']</code>. Если вы используете
                    такие установки и получаете неверную маршрутизацию, то
                    должны использовать для своего объекта запроса класс
                    <code>Zend_Controller_Request_Apache404</code> вместо 
                    <code>Zend_Controller_Request_Http</code>, используемого по
                    умолчанию.
<!--
                    If you are using Apache's 404 handler to pass incoming
                    requests to the front controller, or using a PT flag with
                    rewrite rules, <code>$_SERVER['REDIRECT_URL']</code>
                    contains the URI you need, not
                    <code>$_SERVER['REQUEST_URI']</code>. If you are using such
                    a setup and getting invalid routing, you should use the
                    <code>Zend_Controller_Request_Apache404</code> class instead
                    of the default Http class for your request object:
-->
                </para>

                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Request/Apache404.php';
$request = new Zend_Controller_Request_Apache404();
$front->setRequest($request);]]>
                </programlisting>

                <para>
                    Этот класс расширяет
                    <code>Zend_Controller_Request_Http</code> и просто изменяет
                    автоопределение URI запроса. Он может использоваться в
                    качестве замены.
<!--
                    This class extends the
                    <code>Zend_Controller_Request_Http</code> class and simply
                    modifies the autodiscovery of the request URI. It can be
                    used as a drop-in replacement.
-->
                </para>
            </note>

        </sect3>

        <sect3 id="zend.controller.request.http.baseurl">
            <title>Базовый URL и поддиректории<!--Base Url and Subdirectories--></title>

            <para>
                <code>Zend_Controller_Request_Http</code> позволяет использовать
                Zend_Controller_Router_Rewrite в поддиректориях.
                Zend_Controller_Request_Http попытается автоматически
                определить ваш базовый URL и сответствующим образом установить
                его.
<!--
                <code>Zend_Controller_Request_Http</code> allows
                Zend_Controller_Router_Rewrite to be used in subdirectories.
                Zend_Controller_Request_Http will attempt to automatically
                detect your base URL and set it accordingly.
-->
            </para>

            <para>
                Например, если вы храните ваш <code>index.php</code> в
                поддиректории <code>/projects/myapp/index.php</code>
                веб-сервера, то базовый URL (основа перезаписи) должен быть
                установлен в <code>/projects/myapp</code>. Эта строка будет
                удаляться из начала пути до того, как будут производиться поиск
                соответствующего маршрута.
                Это освобождает от необходимости ее указания в начале каждого
                маршрута. Маршрут <code>'user/:username'</code> будет
                соответствовать URI вида
                <code>http://localhost/projects/myapp/user/martel</code> и
                <code>http://example.com/user/martel</code>.
<!--
                For example, if you keep your <code>index.php</code> in a
                webserver subdirectory named
                <code>/projects/myapp/index.php</code>, base URL (rewrite base)
                should be set to <code>/projects/myapp</code>. This string will
                then be stripped from the beginning of the path before
                calculating any route matches. This frees one from the necessity
                of prepending it to any of your routes. A route of
                <code>'user/:username'</code> will match URIs like
                <code>http://localhost/projects/myapp/user/martel</code> and
                <code>http://example.com/user/martel</code>.
-->
            </para>

            <note>
                <title>Определение URL чувствительно к регистру<!--URL detection is case sensitive--></title>
                <para>
                    Автоматическое определение базового URL чувствительно к
                    регистру, поэтому убедитесь, что ваш URL соответствует имени
                    поддиректории в файловой системе (даже на платформе
                    Windows). Если не соответствует, то будет сгенерировано
                    исключение.
<!--
                    Automatic base URL detection is case sensitive, so make sure your URL
                    will match a subdirectory name in a filesystem (even on Windows
                    machines). If it doesn't, an exception will be raised.
-->
                </para>
            </note>

            <para>
                Если базовый URL определяется некорректно, то вы можете заменить
                его своим базовым путем с помощью метода
                <code>setBaseUrl()</code>, который есть в классах
                <code>Zend_Http_Request</code>,
                <code>Zend_Controller_Request_Http</code> и
                <code>Zend_Controller_Front</code>. Легче всего установить его
                через <code>Zend_Controller_Front</code>, который в свою очередь
                установит его в объекте запроса. Пример установки своего
                базового URL: 
<!--
                Should base URL be detected incorrectly you can override it
                with your own base path with the help of the
                <code>setBaseUrl()</code> method of either the
                <code>Zend_Controller_Request_Http</code> class, or the
                <code>Zend_Controller_Front</code> class. The easiest
                method is to set it in <code>Zend_Controller_Front</code>,
                which will proxy it into the request object. Example usage to
                set a custom base URL:
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
/**
 * Обработка запроса со своим базовым URL через Zend_Controller_Front
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // установка базового URL!
$response   = $controller->dispatch();]]>
            </programlisting>

        </sect3>
    </sect2>

    <sect2 id="zend.controller.request.subclassing">
        <title>Создание подклассов объекта запроса<!--Subclassing the Request Object--></title>

        <para>
            Базовый класс запроса, используемый для всех объектов запроса, -
            абстрактный класс <code>Zend_Controller_Request_Abstract</code>.
            Он определяет следующие методы:
<!--
            The base request class used for all request objects is the abstract
            class <code>Zend_Controller_Request_Abstract</code>. At its most
            basic, it defines the following methods:
-->
        </para>

        <programlisting role="php"><![CDATA[
abstract class Zend_Controller_Request_Abstract
{
    /**
     * @return string
     */
    public function getControllerName();

    /**
     * @param string $value 
     * @return self
     */
    public function setControllerName($value);

    /**
     * @return string
     */
    public function getActionName();

    /**
     * @param string $value 
     * @return self
     */
    public function setActionName($value);

    /**
     * @return string
     */
    public function getControllerKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setControllerKey($key);

    /**
     * @return string
     */
    public function getActionKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setActionKey($key);

    /**
     * @param string $key 
     * @return mixed
     */
    public function getParam($key);

    /**
     * @param string $key 
     * @param mixed $value 
     * @return self
     */
    public function setParam($key, $value);

    /**
     * @return array
     */
     public function getParams();

    /**
     * @param array $array 
     * @return self
     */
    public function setParams(array $array);

    /**
     * @param boolean $flag 
     * @return self
     */
    public function setDispatched($flag = true);

    /**
     * @return boolean
     */
    public function isDispatched();
}]]>
        </programlisting>

        <para>
            Объект запроса является контейнером для переменных запроса. Цепочке
            контроллеров надо знать только то, как устанавливать и получать
            контроллер, действие, опциональные параметры и флаг
            диспетчеризации. По умолчанию объект запроса будет искать в своих
            параметрах, используя ключи контроллера и действия, для определения
            текущих контроллера и действия.
<!--
            The request object is a container for the request environment. The
            controller chain really only needs to know how to set and retrieve the
            controller, action, optional parameters, and dispatched status. By
            default, the request will search its own parameters using the
            controller or action keys in order to determine the controller and
            action.
-->
        </para>

        <para>
            Расширяйте этот класс или один из его производных классов, если вам
            нужен класс запроса, взаимодействующий с определенной средой для
            получения данных, использующихся в упомянутых выше задачах.
            Примерами могут быть <link
            linkend="zend.controller.request.http">среда
            HTTP</link>, среда CLI или PHP-GTK.
<!--
            Extend this class, or one of its derivatives, when you need the
            request class to interact with a specific environment in order to
            retrieve data for use in the above tasks. Examples include <link
                linkend="zend.controller.request.http">the HTTP
                environment</link>, a CLI environment, or a PHP-GTK environment.
-->
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
