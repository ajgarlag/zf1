<sect1 id="zend.cache.introduction">
    <title>Введение</title>
    <para>
        <code>Zend_Cache</code> предназначен для кэширования любых данных.
        <!-- provides a generic way to cache any data. -->
    </para>
    <para>
        Управление кэшированием в Zend Framework производится через фронтэнды
        (интерфейсные части), записи кэша сохраняются через бэкэнды
        (адаптеры <code>File</code>, <code>Sqlite</code>, <code>Memcache</code>
        и др.), с использованием гибкой системы идентификаторов и тегов,
        благодаря которым можно потом легко удалять определенные типы записей
        (например: "удалить все записи кэша, помеченные данным тегом").
<!--
        Caching in Zend Framework is operated by frontends while cache
        records are stored through backend adapters (<code>File</code>,
        <code>Sqlite</code>, <code>Memcache</code>...) through a flexible
        system of IDs and tags. Using those, it is easy to delete specific
        types of records afterwards (for example: "delete all cache
        records marked with a given tag").
-->
    </para>
    <para>
        Ядро модуля (<code>Zend_Cache_Core</code>) является гибким,
        универсальным и конфигурируемым. Кроме этого, для особых нужд есть
        фронтэнды, расширяющие
        <code>Zend_Cache_Core</code>: <code>Output</code>, <code>File</code>,
        <code>Function</code> и <code>Class</code>.
<!--
        The core of the module (<code>Zend_Cache_Core</code>) is generic, flexible and configurable.
        Yet, for your specific needs there are cache frontends that extend <code>Zend_Cache_Core</code>
        for convinience: <code>Output</code>, <code>File</code>, <code>Function</code> and <code>Class</code>.
-->
    </para>
    <example>
        <title>
            Получение фронтэнда с помощью <code>Zend_Cache::factory()</code>
            <!--Getting a frontend with <code>Zend_Cache::factory()</code>--></title>
        <para>
            <code>Zend_Cache::factory()</code> инстанцирует нужные объекты и
            связывает их. В этом первом примере мы будем использовать
            фронтэнд <code>Core</code> с бэкэндом <code>File</code>.
<!--
            <code>Zend_Cache::factory()</code> instantiates correct objects and ties them together.
            In this first example, we will use <code>Core</code> frontend together with <code>File</code>
            backend.
-->
       </para>
       <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifetime' => 7200, // время жизни кэша - 2 часа
   'automatic_serialization' => true
);

$backendOptions = array(
    'cache_dir' => './tmp/' // директория, в которой размещаются файлы кэша
);

// получение объекта Zend_Cache_Core
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

?>]]>  </programlisting>
       <para>
           Теперь, имея фронтэнд, мы можем кэшировать любые типы данных,
           используя сериализацию. Например, мы можем кэшировать результат
           очень ресурсоемкого запроса к БД. После его добавления
           в кэш не нужно будет даже подключаться к базе данных: записи
           извлекаются из кэша и выполняется процедура, обратная сериализации.
<!--
            Now that we have a frontend, we can cache any type of data (we turned on serialization). For
            example, we can cache a result from a very expensive database query. After it is cached, there
            is no need to even connect to the database; records are fetched from cache and unserialized.
-->
       </para>
       <programlisting role="php"><![CDATA[<?php

// $cache определен в предыдущем примере

// проверка, есть ли уже запись в кэше:
if(!$result = $cache->load('myresult')) {

    // промах кэша
    // установка соединения с базой данных

    $db = Zend_Db::factory( [...] );

    $result = $db->fetchAll('SELECT * FROM huge_table');

    $cache->save($result, 'myresult');

} else {

    // попадание в кэш
    echo "This one is from cache!\n\n";

}

print_r($result);

?>]]>  </programlisting>
    </example>
    <example>
        <title>
            Кэширование выходных данных с помощью фронтэнда <code>Zend_Cache</code>
            <!--Caching output with <code>Zend_Cache</code> output frontend-->
        </title>
        <para>
            Мы размечаем участки, внутри которых хотим поместить в кэш выходные
            данные, добавлением условной логики, окружая участок методами
            <code>start()</code> и <code>end()</code>. Этот пример похож на
            первый и является основной стратегией кэширования.
<!--
            We 'mark up' sections in which we want to cache output by adding some conditional logic,
            encapsulating the section within <code>start()</code> and <code>end()</code> methods (this
            resembles the first example and is the core strategy for caching).
-->
        </para><para>
            Внутри выводим данные как обычно — весь вывод будет добавлен в кэш,
            когда будет достигнут метод <code>end()</code>. При следующем
            запуске весь участок кода будет пропущен, вместо этого извлекаются
            данные из кэша (до тех пор, пока записи действительны).
<!--
            Inside, output your data as usual - all output will be cached when execution hits the <code>end()</code>
            method. On the next run, the whole section will be skipped in favor of fetching data from cache
            (as long as the cache record is valid).
-->
       </para>
       <programlisting role="php"><![CDATA[<?php

$frontendOptions = array(
   'lifetime' => 30,                  // время жизни кэша - половина минуты
   'automatic_serialization' => false  // уже установлено по умолчанию
);

$backendOptions = array('cache_dir' => './tmp/');

$cache = Zend_Cache::factory('Output', 'File', $frontendOptions, $backendOptions);

// передаем уникальный идентификатор методу start()
if(!$cache->start('mypage')) {
    // производим вывод, как обычно:

    echo 'Hello world! ';
    echo 'This is cached ('.time().') ';

    $cache->end(); // выходные данные сохранены и отправлены броузеру
}

echo 'This is never cached ('.time().').';

?>]]>  </programlisting>
       <para>
           Обратите внимание, что мы выводим результат <code>time()</code>
           дважды: это демонстрация на примере динамических данных. Попробуйте
           запустить это и обновить страницу несколько раз. Вы заметите,
           что первое число не изменяется, в то время как второе меняется в
           зависимости от текущего времени. Это потому, что первое число
           было выведено в кэшируемой части и сохранено среди других выходных
           данных. После того, как пройдет полминуты (мы установили время жизни
           кэша равным 30 секундам) числа снова должны стать одинаковыми, потому
           что срок действия кэша истек, сразу после этого производится новое
           сохранение в кэш.
<!--
           Notice that we output the result of <code>time()</code> twice; this is something dynamic
           for demonstration purposes. Try running this and then refreshing several times; you will notice
           that the first number doesn't change while second changes as time passes. That is because the first
           number was output in the cached section and is saved among other output.
           After half a minute (we've set lifetime to 30 seconds) the
           numbers should match again because the cache record expired - only to be cached again. You
           should try this in your brower or console.
-->
       </para>
    </example>
    <note><para>
        Когда используете <code>Zend_Cache</code>, уделяйте внимание
        идентификатору кэша (передается методам <code>save()</code> и
        <code>start()</code>). Он должен быть уникальным для каждого ресурса,
        который вы кэшируете, иначе не связанные записи кэша могут затирать друг
        друга, или, что еще хуже, отображаться вместо других.
<!--
        When using Zend_Cache, pay attention to the important cache identifier (passed to <code>save()</code>
        and <code>start()</code>). It must be unique for every resource you cache, otherwise unrelated
        cache records may wipe each other or, even worse, be displayed in place of the other.
-->
    </para></note>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
