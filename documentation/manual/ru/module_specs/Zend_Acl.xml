<sect1 id="zend.acl.introduction">
    <title>Введение</title>

    <para>
        Zend_Acl предоставляет легковесный и гибкий набор функциональных возможностей списка прав доступа (ACL) и управления привилегиями.
    Приложение может использовать этот функционал для контроля доступа одних объектов к другим - защищенным.
<!--
    Zend_Acl provides lightweight and flexible access control list (ACL) functionality
        and privileges management. In general, an application may utilize such functionality
        to control access to certain protected objects by other requesting objects.
-->
    </para>

    <para>
        В рамках данной документации,
<!--
    For the purposes of this documentation,
-->

        <itemizedlist>
            <listitem>
                <para>
        <emphasis role="strong">Ресурс</emphasis> - объект, доступ к которому контролируется.
<!--
                    a <emphasis role="strong">Resource</emphasis> is an object
                    to which access is controlled.
-->
                </para>
            </listitem>
            <listitem>
                <para>
        <emphasis role="strong">Роль</emphasis> - объект, который может запросить доступ к Ресурсу.
<!--
                    a <emphasis role="strong">Role</emphasis> is an object
                    that may request access to a Resource.
-->
                </para>
            </listitem>
        </itemizedlist>
    Говоря проще, <emphasis role="strong">Роли запрашивают доступ к Ресурсу</emphasis>.
    Например, если человек запрашивает доступ к автомобилю, тогда человек - это Роль, а автомобиль - Ресурс,
    поскольку доступ к автомобилю находится под контролем
<!--
        Put simply, <emphasis role="strong">Roles request access to Resources</emphasis>.
        For example, if a person requests access to a car, then the person is the requesting Role,
        and the car is the Resource, since access to the car is under control.
-->
    </para>

    <para>
        Благодаря спецификации и использованию списка прав доступа(ACL),
    приложение получает контроль над тем, как запрашивающие объекты (Роли) получают доступ к защищенным объектам (Ресурсам).
<!--
        Through the specification and use of an access control list (ACL), an application may control
        how requesting objects (Roles) are granted access to protected objects (Resources).

 -->    </para>

    <sect2 id="zend.acl.introduction.resources">
        <title>О Ресурсах
    <!-- About Resources -->
    </title>
        <para>
        В Zend_Acl создавать Ресурс очень просто. Zend_Acl предоставляет
            <code>Zend_Acl_Resource_Interface</code>, чтобы облегчить разработчикам процесс создания Ресурса. Класс должен только
        реализовать этот интерфейс, который состоит из одного метода, <code>getResourceId()</code>,
            для того, чтобы Zend_Acl рассматривал объект как Ресурс. Дополнительно, Zend_Acl также содержит <code>Zend_Acl_Resource</code>,
        как базовый класс, который разработчики могут расширять по желанию.
<!--
            In Zend_Acl, creating a Resource is very simple. Zend_Acl provides
            <code>Zend_Acl_Resource_Interface</code> to facilitate developers' creating Resources. A class need only
            implement this interface, which consists of a single method, <code>getResourceId()</code>, in order
            for Zend_Acl to consider the object to be a Resource. Additionally, <code>Zend_Acl_Resource</code> is
            included with Zend_Acl as a basic Resource implementation for developers to extend where desirable.
-->
        </para>
        <para>
        Zend_Acl предусматривает структуру в виде дерева, в которое могут добавляться
        многочисленные Ресурсы (или "подконтрольные зоны"). Так как Ресурсы добавлены в такую структуру,
        они могут быть организованы от общих (в направлении корня дерева) к специфическим (в направлении листьев дерева).
        При запросах к определенным ресурсам, в иерархии будет выполнен автоматический поиск правил, относящихся к Ресурсам-предкам,
        учитывающий простое наследование правил. Например, если некое общее правило должно действовать в каждом здании города,
        то проще прикрепить его к городу, нежели крепить к каждому зданию в городе.
        Однако, для некоторых зданий потребуются исключения из этого правила, в Zend_Acl это достигается путем
        закрепления исключений из правила за каждым зданием, которое нуждается в этом.
        Ресурс может наследоваться только от одного родительского Ресурса, однако сам родительский Ресурс может,
        в свою очередь, наследоваться от своего родительского Ресурса и т.д.
<!--
            Zend_Acl provides a tree structure to which multiple Resources (or "areas under access control")
            can be added. Since Resources are stored in such a tree structure, they can be organized from the
            general (toward the tree root) to the specific (toward the tree leaves). Queries upon
            a specific Resource will automatically search the Resource's hierarchy for rules assigned to ancestor
            Resources, allowing for simple inheritance of rules. For example, if a default rule is to be
            applied to each building in a city, one would simply assign the rule to the city, instead of
            assigning the same rule to each building. Some buildings may require exceptions to such a
            rule, however, and this is achieved easily in Zend_Acl by assigning such exception rules to
            each such building that requires an exception to the rule. a Resource may inherit from only one
            parent Resource, though this parent Resource can have its own parent Resource, and so on.
 -->
        </para>
        <para>
        Zend_Acl также поддерживает права доступа к Ресурсам (например, "создание", "чтение", "обновление", "удаление"), и
            разработчик может закреплять правила, которые будут влиять на все или определенные права доступа к Ресурсу.
<!--
            Zend_Acl also supports privileges upon Resources (e.g., "create", "read", "update", "delete"), and
            the developer can assign rules that affect all privileges or specific privileges upon a Resource.
 -->
        </para>
    </sect2>

    <sect2 id="zend.acl.introduction.roles">
        <title>О Ролях
<!--
    About Roles
-->
    </title>
        <para>
        Как и в случае с Ресурсами, создавать Роль также очень просто. Zend_Acl предоставляет
            <code>Zend_Acl_Role_Interface</code> чтобы облегчить разработчикам процесс создания Ролей. Класс должен только
        реализовать этот интерфейс, который состоит из одного метода, <code>getRoleId()</code>,
            для того, чтобы Zend_Acl рассматривал объект как Роль. Дополнительно, Zend_Acl также содержит <code>Zend_Acl_Role</code>,
        как базовый класс, который разработчики могут расширять по желанию.
<!--
            Like with Resources, creating a Role is also very simple. Zend_Acl provides
            <code>Zend_Acl_Role_Interface</code> to facilitate developers' creating Roles. A class need only
            implement this interface, which consists of a single method, <code>getRoleId()</code>, in order
            for Zend_Acl to consider the object to be a Role. Additionally, <code>Zend_Acl_Role</code> is
            included with Zend_Acl as a basic Role implementation for developers to extend where desirable.
 -->
        </para>
        <para>
        В Zend_Acl Роль может наследоваться от одной или от нескольких Ролей. Это реализовано для поддержки
        наследования правил между Ролями. Например, пользовательская Роль, такая как "салли",
        может принадлежать одной или нескольким родительским Ролям, таким как "редактор" и "администратор".
        Разработчик может привязывать правила к "редактору" и администратору раздельно, и "салли" будет наследовать
        правила обоих Ролей. Нет необходимости привязывать правила непосредственно к "салли".
<!--
        In Zend_Acl, a Role may inherit from one or more Roles. This is to support inheritance of rules
            among Roles. For example, a user Role, such as "sally", may belong to one or more parent Roles,
            such as "editor" and "administrator". The developer can assign rules to "editor" and
            "administrator" separately, and "sally" would inherit such rules from both, without having to
            assign rules directly to "sally".
 -->
        </para>
        <para>
        Хотя наследование от множества Ролей - очень полезная возможность, она также усложняет разработку.
        Следующий пример демонстрирует неопределенное условие и показывает как Zend_Acl решает эту проблему.
<!--
            Though the ability to inherit from multiple Roles is very useful, multiple inheritance also
            introduces some degree of complexity. The following example illustrates the ambiguity condition and how Zend_Acl solves it.
 -->
        </para>
        <example id="zend.acl.introduction.roles.example.multiple_inheritance">
            <title>Множественное наследование Ролей
<!--
        Multiple inheritance between Roles
 -->

        </title>
            <para>
            Следующий код определяет три базовые Роли  - "<code>guest</code>", "<code>member</code>", и
                "<code>admin</code>" - от которых другие роли будут наследоваться. Затем, Роль
                "<code>someUser</code>" создается и наследуется от трех других Ролей. Порядок,
                в котором эти роли появляются в массиве <code>$parents</code>, важен. При необходимости,
                Zend_Acl ищет правила доступа не только для запрашиваемых Ролей (в нашем случае,
                "<code>someUser</code>"), но также и для ролей, от которых запрашиваемая Роль унаследована
                (в нашем примере, "<code>guest</code>", "<code>member</code>", и "<code>admin</code>"):
<!--
                The following code defines three base Roles - "<code>guest</code>", "<code>member</code>", and
                "<code>admin</code>" - from which other Roles may inherit. Then, a Role identified by
                "<code>someUser</code>" is established and inherits from the three other Roles. The order in
                which these Roles appear in the <code>$parents</code> array is important. When necessary,
                Zend_Acl searches for access rules defined not only for the queried Role (herein,
                "<code>someUser</code>"), but also upon the Roles from which the queried Role inherits
                (herein, "<code>guest</code>", "<code>member</code>", and "<code>admin</code>"):
 -->
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';
$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';
$acl->addRole(new Zend_Acl_Role('guest'))
    ->addRole(new Zend_Acl_Role('member'))
    ->addRole(new Zend_Acl_Role('admin'));

$parents = array('guest', 'member', 'admin');
$acl->addRole(new Zend_Acl_Role('someUser'), $parents);

require_once 'Zend/Acl/Resource.php';
$acl->add(new Zend_Acl_Resource('someResource'));

$acl->deny('guest', 'someResource');
$acl->allow('member', 'someResource');

echo $acl->isAllowed('someUser', 'someResource') ? 'allowed' : 'denied';]]></programlisting>
            <para>
            Поскольку нет правил, определенных специально для Роли "<code>someUser</code>" и Ресурса
                "<code>someResource</code>", Zend_Acl должен производить поиск правил, которые могут быть определены для Ролей,
        от которых "<code>someUser</code>" наследуется. Сперва, проверяется Роль "<code>admin</code>", и
                для нее не определены правила доступа. Затем, проверяется Роль "<code>member</code>", и
                Zend_Acl находит, что есть правило разрешающее доступ для "<code>member</code>" к "<code>someResource</code>".
<!--
                Since there is no rule specifically defined for the "<code>someUser</code>" Role and
                "<code>someResource</code>", Zend_Acl must search for rules that may be defined for Roles that
                "<code>someUser</code>" inherits. First, the "<code>admin</code>" role is visited, and there
                is no access rule defined for it. Next, the "<code>member</code>" role is visited, and
                Zend_Acl finds that there is a rule specifying that "<code>member</code>" is allowed access to
                "<code>someResource</code>".
 -->
            </para>
            <para>
            Если бы Zend_Acl продолжил поиск правил, определенных для родительских Ролей, то он бы
        обнаружил, что для "<code>guest</code>" запрещен доступ к "<code>someResource</code>". Этот
        факт показывает противоречие, так как теперь для "<code>someUser</code>" доступ к
        "<code>someResource</code>" разрешен и запрещен одновременно. Конфликт произошел по причине
        наследования от нескольких Ролей.

<!--
                If Zend_Acl were to continue examining the rules defined for other parent Roles, however, it
                would find that "<code>guest</code>" is denied access to "<code>someResource</code>". This
                fact introduces an ambiguity because now "<code>someUser</code>" is both denied and allowed
                access to "<code>someResource</code>", by reason of having inherited conflicting rules from
                different parent Roles.
 -->
            </para>
            <para>
             Zend_Acl решает эту неоднозначность завершая запрос как только находит первое правило,
         которое может быть применено к запросу. В этом случае, если Роль "<code>member</code>"
         проверяется раньше, чем Роль "<code>guest</code>", то приведенный пример выведет "<code>allowed</code>".
<!--
                Zend_Acl resolves this ambiguity by completing a query when it finds the first rule that is
                directly applicable to the query. In this case, since the "<code>member</code>" Role is
                examined before the "<code>guest</code>" Role, the example code would print
                "<code>allowed</code>".
 -->
            </para>
        </example>
        <note>
            <para>
            Когда определяем нескольких родительских Ролей, не забывайте, что последний указанный родитель,
            является первым в списке поиска правил для запроса авторизации.
<!--
                    When specifying multiple parents for a Role, keep in mind that the last parent listed is
                    the first one searched for rules applicable to an authorization query.
 -->
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.creating">
        <title>Создание списка контроля доступа (ACL)
<!--
    Creating the Access Control List (ACL)
-->
    </title>

        <para>
        ACL может представлять любое множество физических либо виртуальных объектов.
        В целях демонстрации, мы создадим базовую функциональность ACL для Системы Управления Контентом (CMS),
        которая будет поддерживать нескольких уровней групп к множеству областей. Чтобы создать новый объект ACL,
        производим инстанцирование без параметров:
<!--
            An ACL can represent any set of physical or virtual objects that you wish.
            For the purposes of demonstration, however, we will create a basic Content Management System ACL
            that maintains several tiers of groups over a wide variety of areas. To create a new ACL object,
            we instantiate the ACL with no parameters:
 -->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();]]></programlisting>

        <note>
            <para>
            По умолчанию Zend_Acl реализует "белый список", это значит, что пока обратное не указано разработчиком,
        Zend_Acl запрещает доступ ко всем Ресурсам для всех Ролей
<!--
                Zend_Acl is a "whitelist" implementation by default, which means that unless otherwise
                specified by the developer, Zend_Acl denies access to every privilege upon every Resource by
                every Role.
 -->
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.role_registry">
        <title>
    Регистрация Ролей
<!--
    Registering Roles
 -->
     </title>

        <para>
        Система Управления Контентом почти всегда нуждается в иерархии доступа для определения
        авторских возможностей своих пользователей. Это может быть группа "Гость",
        предоставляющая ограниченный доступ для демонстрации, группа "Сотрудник" - группа большинства пользователей CMS,
        которые производят каждодневные операции, группа "Редактор" - для тех кто публикует и редактирует,
        архивирует и удаляет контент, и, наконец, группа "Администратор", участники группы могут выполнять все те же операции,
        что и участники других групп, а также управлять другой, специфической, информацией, пользователями,
        конфигурацией адинистративной части, а также делать резервное копирование/восстановление данных.
        Этот набор прав доступа может быть представлен в реестре Ролей, позволяя каждой группе наследовать привилегии
        родительской группы, при этом имея индивидуальные права доступа.
        Права доступа могут быть представлены в таком виде:

<!--
            Content Management Systems will nearly always require a hierarchy of permissions
            to determine the authoring capabilities of its users. There may be a 'Guest' group to
            allow limited access for demonstrations, a 'Staff' group for the majority of CMS users
            who perform most of the day-to-day operations, an 'Editor' group for those responsible for publishing,
            reviewing, archiving and deleting content, and finally an 'Administrator' group whose tasks may
            include all of those of the other groups as well as maintenance of sensitive information,
            user management, back-end configuration data and backup/export. This set of permissions can be
            represented in a Role registry, allowing each group to inherit privileges from 'parent' groups,
            as well as providing distinct privileges for their unique group only.
            The permissions may be expressed as follows:
 -->
        </para>

        <table id="zend.acl.introduction.role_registry.table.example_cms_access_controls">
          <title>
      Контроль доступа для демонстрационной CMS
<!--
      Access Controls for an Example CMS
 -->
      </title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
        Название
<!--
        Name
 -->
        </entry>
                <entry>
        Индивидуальные права
<!--
        Unique permissions
 -->
        </entry>
                <entry>
        Права унаследованные от
<!--
        Inherit permissions from
 -->
        </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
        Гость
<!--
        Guest
 -->
        </entry>
                <entry>
        Просмотр
<!--
        View
 -->
        </entry>
                <entry>
        Не определено
<!--
        N/A
 -->
        </entry>
              </row>
              <row>
                <entry>
        Сотрудник
<!--
        Staff
 -->
        </entry>
                <entry>
        Редактирование, предложение на публикацию, исправление
<!--
        Edit, Submit, Revise
 -->
        </entry>
                <entry>
        Гость
<!--
        Guest
 -->
        </entry>
              </row>
              <row>
                <entry>
        Редактор
<!--
        Editor
 -->
        </entry>
                <entry>
        Публикация, архивирование, удаление
<!--
        Publish, Archive, Delete
 -->
        </entry>
                <entry>
        Сотрудник
<!--
        Staff
 -->
        </entry>
              </row>
              <row>
                <entry>
        Администратор
<!--
        Administrator
 -->
        </entry>
                <entry>
        (Обладает всеми правами)
<!--
        (Granted all access)
 -->
        </entry>
                <entry>
        Не определено
<!--
        N/A
 -->
        </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
        Для этого примера мы используем <code>Zend_Acl_Role</code>, но можно было бы использовать любой класс,
        который реализует интерфейс <code>Zend_Acl_Role_Interface</code>. Эти группы могут быть добавлены в реестр Ролей
        таким образом:
<!--
            For this example, <code>Zend_Acl_Role</code> is used, but any object that implements
            <code>Zend_Acl_Role_Interface</code> is acceptable. These groups can be added to the
            Role registry as follows:
 -->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

//Добавить группы в реестр Ролей используя Zend_Acl_Role
require_once 'Zend/Acl/Role.php';

// Гость не наследует управление доступом
$roleGuest = new Zend_Acl_Role('guest');
$acl->addRole($roleGuest);

//Сотрудник наследуется от Гостя
$acl->addRole(new Zend_Acl_Role('staff'), $roleGuest);

/*
Альтернатива тому, что написано выше:
$roleGuest = $acl->addRole(new Zend_Acl_Role('staff'), 'guest');
//*/

//Редактор наледуется от Посетителя
$acl->addRole(new Zend_Acl_Role('editor'), 'staff');

//Администатор не наследует управление доступом
$acl->addRole(new Zend_Acl_Role('administrator'));]]></programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.defining">
        <title>Определение контроля доступа
<!--
    Defining Access Controls
 -->
    </title>

        <para>
        Теперь, когда ACL содержит необходимые Роли, можно определять правила,
        по которым Роли будут иметь доступ к Ресурсам. Вы должно быть заметили,
        что мы не определили ни одного отдельного Ресурса для этого примера,
        это упрощает демонстрацию того, что правила применяются ко всем Ресурсам.
        Zend_Acl предоставляет реализацию, посредством которой правила должны передаваться
        от общих к специфическим, минимизируя таким образом количество необходимых правил, так как
        Ресурсы и Роли наследуют правила, которые определены для их предков.
<!--
            Now that the ACL contains the relevant Roles, rules can be established that define how
            Resources may be accessed by Roles. You may have noticed that we have not defined any particular
            Resources for this example, which is simplified to illustrate that the rules apply to all Resources.
            Zend_Acl provides an implementation whereby rules need only be assigned from general to specific,
            minimizing the number of rules needed, because Resources and Roles inherit rules that are defined upon
            their ancestors.
 -->
        </para>

        <para>
        В результате, мы можем определить умеренно сложный набор правил минимальным кодом.
        Для определения базовых прав доступа, описанных выше:
<!--
            Consequently, we can define a reasonably complex set of rules with a minimum amount of code.
            To apply the base permissions as defined above:
 -->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';

$roleGuest = new Zend_Acl_Role('guest');
$acl->addRole($roleGuest);
$acl->addRole(new Zend_Acl_Role('staff'), $roleGuest);
$acl->addRole(new Zend_Acl_Role('editor'), 'staff');
$acl->addRole(new Zend_Acl_Role('administrator'));

// Гость может только просматривать контент
$acl->allow($roleGuest, null, 'view');

/* другим способом, предыдущий блок кода может быть записан в таком виде:
$acl->allow('guest', null, 'view');
//*/

// Сотрудник наследует привилегии просмотра у Гостя, но также нуждается в дополнительных привилегиях
$acl->allow('staff', null, array('edit', 'submit', 'revise'));

// Редактор наследует привилегии просмотра, редактирования, отправки и исправлений у Посетителя
// но также нуждается в дополнительных привилегиях
$acl->allow('editor', null, array('publish', 'archive', 'delete'));

// Администратор не наследует ничего, но обладает всеми привилегиями
$acl->allow('administrator');]]></programlisting>

        <para>
        Значение <code>null</code> в вызовах функции <code>allow()</code>используются для
        того чтобы показать, что правила предоставляющие доступ применяются ко всем ресурсам.
<!--
            The <code>null</code> values in the above <code>allow()</code> calls are used to indicate
            that the allow rules apply to all Resources.
 -->
        </para>

    </sect2>

    <sect2 id="zend.acl.introduction.querying">
        <title>Запрос к ACL
<!--
    Querying the ACL
 -->
    </title>

        <para>
        Теперь у нас есть гибкий ACL, который может использоваться для того чтобы определить, достаточно ли прав
        имеет запрашивающий, чтобы выполнить функции в веб-приложении. Выполнять запросы достаточно просто, используя
        метод <code>isAllowed()</code>:
<!--
            We now have a flexible ACL that can be used to determine whether requesters have permission
            to perform functions throughout the web application. Performing queries is quite simple using
            the <code>isAllowed()</code> method:
 -->
        </para>

        <programlisting role="php"><![CDATA[<?php
echo $acl->isAllowed('guest', null, 'view') ?
     "allowed" : "denied"; // allowed

echo $acl->isAllowed('staff', null, 'publish') ?
     "allowed" : "denied"; // denied

echo $acl->isAllowed('staff', null, 'revise') ?
     "allowed" : "denied"; // allowed

echo $acl->isAllowed('editor', null, 'view') ?
     "allowed" : "denied"; // allowed из-за наследования от Гостя

echo $acl->isAllowed('editor', null, 'update') ?
     "allowed" : "denied"; // denied, так как нет разрешающего правила для 'обновления'

echo $acl->isAllowed('administrator', null, 'view') ?
     "allowed" : "denied"; // allowed, т.к. администратор обладает всеми привилегиями

echo $acl->isAllowed('administrator') ?
     "allowed" : "denied"; // allowed, т.к. администратор обладает всеми привилегиями

echo $acl->isAllowed('administrator', null, 'update') ?
     "allowed" : "denied"; // allowed, т.к. администратор обладает всеми привилегиями]]></programlisting>

    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
