<sect1 id="zend.config.introduction">
    <title>Введение</title>
    <para>
        <code>Zend_Config</code> спроектирован для того, чтобы сделать более
        простым доступ и использование конфигурационных данных внутри приложения.
        Он предоставляет основанный на вложенных свойствах объектов пользовательский
        интерфейс для доступа к конфигурационным данным внутри приложения.
        Конфигурационные данные могут храниться на различных носителях информации,
        поддерживающих иерархическое хранение данных. На данный момент
        <code>Zend_Config</code> предоставляет адаптеры для конфигурационных
        данных, хранящихся в текстовых файлах:
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
        и <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
<!--
        <code>Zend_Config</code> is designed to simplify access to and use of
        configuration data within applications. It provides a nested object
        property based user interface for accessing such configuration data
        within application code. The configuration data may come from a variety
        of media supporting hierarchical data storage. Currently
        <code>Zend_Config</code> provides adapters for configuration data that
        are stored in text files with
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
        and <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
-->
    </para>
    <example id="zend.config.introduction.example.using">
        <title>Использование Zend_Config без адаптеров<!--Using Zend_Config Per Se--></title>
        <para>
            Обычно предполагается, что используется один из классов адаптеров
            <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
            или <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
            Но если конфигурационные данные доступны в виде массива PHP,
            то можно просто передавать эти данные конструктору <code>Zend_Config</code>,
            чтобы использовать преимущества простого объектно-ориентированного
            интерфейса.
<!--
            Normally it is expected that users would use one of the adapter
            classes such as
            <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
            or <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>,
            but if configuration data are available in a PHP array, one may simply
            pass the data to the <code>Zend_Config</code> constructor in order
            to utilize a simple object-oriented interface:
-->
        </para>
        <programlisting role="php"><![CDATA[<?php
// Массив конфигурационных данных
$configArray = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Создание объектно-ориентированной обертки для конфигурационных данных
require_once 'Zend/Config.php';
$config = new Zend_Config($configArray);

// Вывод элемента конфигурационных данных (результатом будет 'www.example.com')
echo $config->webhost;

// Использование конфигурационных данных для соединения с базой данных
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);]]></programlisting>
    </example>
    <para>
        Как показано в предыдущем примере, в <code>Zend_Config</code> для
        доступа к конфигурационным данным, переданным его конструктору,
        используется синтаксис вложенных свойств объектов.
<!--
        As illustrated in the example above, <code>Zend_Config</code> provides
        nested object property syntax to access configuration data passed to
        its constructor.
-->
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
