<sect1 id="zend.config.adapters.xml">
    <title>Zend_Config_Xml</title>
    <para>
        <code>Zend_Config_Xml</code> дает разработчикам возможность хранить
        конфигурационные данные в простом формате XML и читать их посредством синтаксиса
        вложенных свойств объектов. Корневой элемент файла XML не имеет значения
        и ему может быть дано любое имя. Первый уровень элементов XML
        соответствует разделам конфигурационных данных. Формат XML поддерживает
        иерархическую организацию данных через вложенность элементов
        ниже элементов уровня разделов. Содержимое конечного элемента соответствует
        значению элемента конфигурационных данных. Наследование разделов
        поддерживается через специальный атрибут <code>extends</code>, значение
        атрибута соответствует разделу, данные которого наследуются в
        раздел с этим атрибутом.
<!--
        <code>Zend_Config_Xml</code> enables developers to store configuration
        data in a simple XML format and read them via nested object property syntax.
        The root element of the XML file is irrelevant and may be named arbitrarily.
        The first level of XML elements correspond with configuration data sections.
        The XML format supports hierarchical organization through nesting of XML
        elements below the section-level elements. The content of a leaf-level
        XML element corresponds to the value of a configuration datum. Section
        inheritance is supported by a special XML attribute named
        <code>extends</code>, and the value of this attribute corresponds with
        the section from which data are to be inherited by the extending section.
-->
    </para>
    <note>
        <title>Тип возвращаемых данных<!--Return type--></title>
        <para>
            Конфигурационные данные, прочитанные в <code>Zend_Config_Xml</code>,
            всегда возвращаются как строки. Приведение данных из строк к другим
            типам под свои нужды предоставляется разработчикам.
<!--
            Configuration data read into <code>Zend_Config_Xml</code> are always
            returned as strings. Conversion of data from strings to other types is
            left to developers to suit their particular needs.
-->
        </para>
    </note>
    <example id="zend.config.adapters.xml.example.using">
        <title>Использование Zend_Config_Xml<!--Using Zend_Config_Xml--></title>
        <para>
            Данный пример демонстрирует основы использования <code>Zend_Config_Xml</code>
            для загрузки конфигурационных данных из файла XML. В этом примере
            используются конфигурационные данные для производственной и
            промежуточной систем. Поскольку конфигурационные данные
            промежуточной системы очень похожи на конфигурационные данные для
            производственной системы, то "промежуточный" (staging) раздел наследует от
            "производственного" (production) раздела. В данном случае выбор
            произвольный, т.е. может быть и наоборот — "производственный"
            раздел наследует от "промежуточного", но это может не подходить в
            более сложных случаях. Допустим, конфигурационные данные
            находятся в файле <code>/path/to/config.xml</code>:
<!--
            This example illustrates a basic use of <code>Zend_Config_Xml</code>
            for loading configuration data from an XML file. In this example
            there are configuration data for both a production system and for
            a staging system. Because the staging system configuration data are
            very similar to those for production, the staging section inherits
            from the production section. In this case, the decision is arbitrary
            and could have been written conversely, with the production section
            inheriting from the staging section, though this may not be the case
            for more complex situations. Suppose, then, that the following
            configuration data are contained in <code>/path/to/config.xml</code>:
-->
        </para>
        <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<configdata>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</configdata>]]></programlisting>
        <para>
            Далее предположим, что разработчику приложения нужны "промежуточные"
            конфигурационные данные из файла XML. Загрузить эти данные через
            указание файла XML и нужного раздела довольно просто:
<!--
            Next, assume that the application developer needs the staging
            configuration data from the XML file. It is a simple matter to load
            these data by specifying the XML file and the staging section:
-->
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config_Xml('/path/to/config.xml', 'staging');

echo $config->database->host; // выведет "dev.example.com"
echo $config->database->name; // выведет "dbname"]]></programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
