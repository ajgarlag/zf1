<sect1 id="zend.controller.plugins" xmlns:xi="http://www.w3.org/2003/XInclude">
    <title>Плагины<!--Plugins--></title>

    <sect2 id="zend.controller.plugins.introduction">
        <title>Введение<!--Introduction--></title>

        <para>
            Архитектура контроллеров включает в себя систему плагинов, которая
            позволяет добавлять свой код, который будет вызываться при
            определенных событиях в процессе жизни контроллера. Фронт-контроллер
            использует брокер плагинов (plugin broker) в качестве реестра
            пользовательских плагинов, брокер плагинов также обеспечивает вызов
            методов событий в каждом плагине, зарегистрированном через
            фронт-контроллер.
<!--
            The controller architecture includes a plugin system that allows
            user code to be called when certain events occur in the controller
            process lifetime.  The front controller uses a plugin broker as a
            registry for user plugins, and the plugin broker ensures that event
            methods are called on each plugin registered with the front
            controller.
-->
        </para>

        <para>
            Методы событий определены в абстрактном классе
            <code>Zend_Controller_Plugin_Abstract</code>, от которого должны
            наследовать все пользовательские плагины:
<!--
            The event methods are defined in the abstract class
            <code>Zend_Controller_Plugin_Abstract</code>, from which user plugin
            classes inherit:
-->
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>routeStartup()</code> вызывается до того, как
                    <code>Zend_Controller_Front</code> вызовет
                    <link linkend="zend.controller.router">маршрутизатор</link>
                    для сопоставления запроса с зарегистрированными маршрутами.
<!--
                    <code>routeStartup()</code> is called before
                    <code>Zend_Controller_Front</code> calls on <link
                        linkend="zend.controller.router">the router</link>
                    to evaluate the request against the registered routes.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>routeShutdown()</code> вызывается после того, как
                    <link linkend="zend.controller.router">маршрутизатор</link>
                    завершит обработку запроса.
<!--
                    <code>routeShutdown()</code> is called after <link
                        linkend="zend.controller.router">the router</link>
                    finishes routing the request.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>dispatchLoopStartup()</code> вызывается до того,
                    как <code>Zend_Controller_Front</code> войдет в цикл
                    диспетчеризации. 
<!--
                    <code>dispatchLoopStartup()</code> is called before
                    <code>Zend_Controller_Front</code> enters its dispatch loop.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>preDispatch()</code> вызывается до того, как
                    <link linkend="zend.controller.dispatcher">диспетчером</link>
                    будет вызвано действие. Этот обратный
                    вызов (callback) позволяет реализовать поведение посредника
                    или фильтра. Через изменение запроса и сброс его
                    флага диспетчеризации (методом
                    <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>)
                    текущее действие может быть пропущено и/или заменено на
                    другое.
<!--
                    <code>preDispatch()</code> is called before an action is
                    dispatched by <link linkend="zend.controller.dispatcher">the
                        dispatcher</link>. This callback allows for proxy or
                    filter behavior. By altering the request and resetting its
                    dispatched flag (via
                    <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>),
                    the current action may be skipped and/or replaced.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>postDispatch()</code> вызывается после того, как
                    действие было вызвано
                    <link linkend="zend.controller.dispatcher">диспетчером</link>.
                    Этот обратный вызов позволяет реализовать поведение фильтра
                    или посредника. Через изменение запроса и сброс его
                    флага диспетчеризации (методом
                    <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>)
                    может быть определено новое действие для
                    диспетчеризации.
<!--
                    <code>postDispatch()</code> is called after an action is
                    dispatched by <link linkend="zend.controller.dispatcher">the
                        dispatcher</link>. This callback allows for proxy or
                    filter behavior. By altering the request and resetting its
                    dispatched flag (via
                    <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>),
                    a new action may be specified for dispatching.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>dispatchLoopShutdown()</code> вызывается после выхода
                    <code>Zend_Controller_Front</code> из его цикла
                    диспетчеризации.
<!--
                    <code>dispatchLoopShutdown()</code> is called after
                    <code>Zend_Controller_Front</code> exits its dispatch loop.
-->
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.plugins.writing">
        <title>Написание плагинов<!--Writing Plugins--></title>

        <para>
            Для того, чтобы написать класс плагина, просто включите и расширьте
            абстрактный класс <code>Zend_Controller_Plugin_Abstract</code>:
<!--
            In order to write a plugin class, simply include and extend the
            abstract class <code>Zend_Controller_Plugin_Abstract</code>:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Plugin/Abstract.php';

class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    // ...
}]]>
        </programlisting>

        <para>
            Ни один из методов класса
            <code>Zend_Controller_Plugin_Abstract</code> не является
            абстрактным, поэтому классы плагинов не обязательно должны
            реализовывать все из перечисленных выше методов событий.
            Разработчики плагинов могут реализовывать только те методы, которые
            требуются для их конкретных нужд.
<!--
            None of the methods of <code>Zend_Controller_Plugin_Abstract</code>
            are abstract, and this means that plugin classes are not forced to
            implement any of the available event methods listed above. Plugin
            writers may implement only those methods required by their
            particular needs.
-->
        </para>

        <para>
            <code>Zend_Controller_Plugin_Abstract</code> также делает объекты
            запроса и ответа доступными плагинам контроллеров через методы
            <code>getRequest()</code> и <code>getResponse()</code>,
            соответственно.
<!--
            <code>Zend_Controller_Plugin_Abstract</code> also makes the request
            and response objects available to controller plugins via the
            <code>getRequest()</code> and <code>getResponse()</code> methods,
            respectively.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.plugins.using">
        <title>Использование плагинов<!--Using Plugins--></title>

        <para>
            Классы плагинов регистрируются через
            <code>Zend_Controller_Front::registerPlugin()</code>, их можно
            регистрировать в любой момент времени. Следующий пример
            демонстрирует использование плагина в цепочке контроллеров:  
<!--
            Plugin classes are registered with
            <code>Zend_Controller_Front::registerPlugin()</code>, and may be
            registered at any time.  The following snippet illustrates how a
            plugin may be used in the controller chain:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Front.php';
require_once 'Zend/Controller/Router.php';
require_once 'Zend/Controller/Plugin/Abstract.php';

class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    public function routeStartup()
    {
        $this->getResponse()->appendBody("<p>routeStartup() called</p>\n");
    }

    public function routeShutdown($request)
    {
        $this->getResponse()->appendBody("<p>routeShutdown() called</p>\n");
    }

    public function dispatchLoopStartup($request)
    {
        $this->getResponse()->appendBody("<p>dispatchLoopStartup() called</p>\n");
    }

    public function preDispatch($request)
    {
        $this->getResponse()->appendBody("<p>preDispatch() called</p>\n");
    }

    public function postDispatch($request)
    {
        $this->getResponse()->appendBody("<p>postDispatch() called</p>\n");
    }

    public function dispatchLoopShutdown()
    {
        $this->getResponse()->appendBody("<p>dispatchLoopShutdown() called</p>\n");
    }
}

$front = Zend_Controller_Front::getInstance();
$front->setControllerDirectory('/path/to/controllers')
      ->setRouter(new Zend_Controller_Router_Rewrite())
      ->registerPlugin(new MyPlugin());
$front->dispatch();]]>
        </programlisting>

        <para>
            При условии, что вызываемые действия не производят вывод, и
            что вызвано только одно действие, с плагином выше должен получиться
            следующий вывод:
<!--
            Assuming that no actions called emit any output, and only one action
            is called, the functionality of the above plugin would still create
            the following output:
-->
        </para>

        <programlisting role="php"><![CDATA[
<p>routeStartup() called</p>
<p>routeShutdown() called</p>
<p>dispatchLoopStartup() called</p>
<p>preDispatch() called</p>
<p>postDispatch() called</p>
<p>dispatchLoopShutdown() called</p>]]>
        </programlisting>

        <note>
            <para>
                Плагины могут регистрироваться в любой точке выполнения
                фронт-контроллера. Однако, если событие, для которого
                плагин имеет зарегистрированный метод события, уже произошло, то
                этот метод не будет запущен.
<!--
                Plugins may be registered at any time during the front controller
                execution. However, if an event has passed for which the plugin has
                a registered event method, that method will not be triggered.
-->
            </para>
        </note>
    </sect2>

    <sect2 id="zend.controller.plugins.manipulating">
        <title>Извлечение и работа с плагинами<!--Retrieving and Manipulating Plugins--></title>

        <para>
            Иногда может понадобиться отменить регистрацию плагина или извлечь
            его. Следующие методы фронт-контроллера позволяют сделать это:
<!--
            On occasion, you may need to unregister or retrieve a plugin. The
            following methods of the front controller allow you to do so:
-->
        </para>

        <itemizedlist>
            <listitem><para>
                <code>getPlugin($class)</code> позволяет извлекать плагин по
                имени класса. Если не найден соответствующий плагин, то
                возвращается false. Если зарегистрировано более одного плагина
                этого класса, то будет возвращен массив.
<!--
                    <code>getPlugin($class)</code> allows you to retrieve a
                    plugin by class name. If no plugins match, it returns false.
                    If more than one plugin of that class is registered, it
                    returns an array.
-->
            </para></listitem>

            <listitem><para>
                <code>getPlugins()</code> возвращает весь стек плагинов.
<!--
                    <code>getPlugins()</code> retrieves the entire plugin stack.
-->
            </para></listitem>

            <listitem><para>
                <code>unregisterPlugin($plugin)</code> производит удаление
                плагина из стека. Вы можете передавать объект плагина или имя
                класса плагина, регистрацию которого вы хотите отменить. Если вы
                передаете имя класса, то будут удалены все плагины этого класса.
<!--
                    <code>unregisterPlugin($plugin)</code> allows you to remove
                    a plugin from the stack. You may pass a plugin object, or
                    the class name of the plugin you wish to unregister. If you
                    pass the class name, any plugins of that class will be
                    removed.
-->
            </para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.plugins.standard">
        <title>Плагины, включенные в стандартную поставку<!--Plugins Included in the Standard Distribution--></title>

        <para>
            Zend Framework в его стандартной поставке включает в себя плагин для
            обработки ошибок.
<!--
            Zend Framework includes a plugin for error handling in its standard
            distribution.
-->
        </para>

        <xi:include href="Zend_Controller-Plugins-ErrorHandler.xml" />
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
