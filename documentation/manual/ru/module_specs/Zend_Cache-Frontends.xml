<sect1 id="zend.cache.frontends">
    <title>Фронтэнды Zend_Cache<!--Zend_Cache frontends--></title>

    <sect2 id="zend.cache.core">
        <title>Zend_Cache_Core</title>
        <sect3 id="zend.cache.core.introduction">
            <title>Введение</title>
            <para>
                Фронтэнд <code>Zend_Cache_Core</code> является особым,
                так как это ядро всего модуля. Это фронтэнд общего назначения и
                он расширяется другими классами.
<!--
                <code>Zend_Cache_Core</code> is a special frontend because it is the core
                of the module. It is a generic cache frontend and is extended by other classes.
-->
            </para>
            <note>
                <para>
                    Все фронтэнды наследуют от класса
                    <code>Zend_Cache_Core</code>, поэтому его методы и опции,
                    описанные ниже, должны быть доступны в других фронтэндах и
                    не будут описываться далее.
<!--
                    All frontends inherit from <code>Zend_Cache_Core</code> so that its methods and options
                    (described below) would also be available in other frontends, therefore they won't be
                    documented there.
-->
                </para>
            </note>
        </sect3>
        <sect3 id="zend.cache.core.options">
            <title>Доступные опции<!--Available options--></title>
            <para>
                Эти опции передаются фабричному методу, как было показано в
                предыдущих примерах.
<!--
                These options are passed to the factory method as demonstrated in previous examples.
-->
            </para>
            <table>
                <title>Доступные опции</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Опция</entry>
                            <entry>Тип данных</entry>
                            <entry>Значение по умолчанию</entry>
                            <entry>Описание</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>caching</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  Включает / отключает кэширование (может быть очень полезным при
                                  отладке кэшируемых скриптов).
                                  <!--enable / disable caching (can be very usefull for the debug of
                                  cached scripts)-->
                              </entry>
                          </row>
                          <row>
                              <entry><code>lifetime</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>3600</code></entry>
                              <entry>
                                Время жизни кэша (в секундах), если установлен в
                                <code>null</code>, то кэш имеет бесконечное время жизни.
                                <!--cache lifetime (in seconds), if set to <code>null</code>, the
                                cache is valid forever.-->
                              </entry>
                          </row>
                          <row>
                              <entry><code>logging</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                          Если установлен в <code>true</code>, то включается логирование через
                                <code>Zend_Log</code> (но система будет работать медленнее).
                                <!--if set to true, logging through <code>Zend_Log</code> is activated
                                (but the system is slower)-->
                              </entry>
                          </row>
                          <row>
                              <entry><code>write_сontrol</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                Включает / отключает контроль записи (кэш
                                читается сразу после записи для выявления
                                поврежденных записей), включение writeControl
                                немного замедлит запись кэша, но не чтение. Этот
                                контроль может выявить некоторые поврежденные
                                файлы кэша, но не является совершенным.
                                <!--Enable / disable write control (the cache is read
                                just after writing to detect corrupt entries), enabling writeControl
                                will lightly slow the cache writing but not the cache reading (it
                                can detect some corrupt cache files but it's not a perfect control)-->
                              </entry>
                          </row>
                          <row>
                              <entry><code>automatic_serialization</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                Включает / отключает автоматическую
                                сериализацию, она может использоваться для
                                сохранения напрямую данных, которые не являются
                                строками (но это будет меденнее).
                                <!--Enable / disable automatic serialization, it can be used to save directly datas
                                which aren't strings (but it's slower)-->
                              </entry>
                          </row>
                          <row>
                              <entry><code>automatic_cleaning_factor</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>10</code></entry>
                              <entry>
                                          Отключает / настраивает автоматический процесс
                                очистки (сборщик мусора) :
                                          <code>0</code> означает, что автоматическая
                                чистка кэша не производится,
                                <code>1</code> означает систематическую очистку
                                кэша,
                                <code>x (integer) &gt; 1</code> означает, что
                                автоматическая чистка производится случайным
                                образом 1 раз на x записей кэша.
                                <!--Disable / Tune the automatic cleaning process (garbage collector):
                                0 means no automatic cache cleaning, 1 means systematic cache cleaning
                                and x &gt; 1 means automatic random cleaning 1 times in x write operations.-->
                              </entry>
                          </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.core.examples">
            <title>Примеры</title>
            <para>
                Пример был дан в самом начале данного раздела руководства.
<!--
                An example is given in the manual at the very beginning.
-->
            </para>
            <para>
                  Если вы храните в кэше только строки (с опцией
                <code>automatic_serialization</code> возможно хранить некоторые
                булевы значения), вы можете использовать более компактную
                конструкцию, похожую на:
<!--
                If you store only strings into cache (because with "automatic_serialization" option, it's possible
                to store some booleans), you can use a more compact construction like:
-->
            </para>
            <programlisting role="php"><![CDATA[<?php

// предполагается, что переменная $cache уже установлена

$id = 'myBigLoop'; // идентификатор того, что мы хотим закэшировать

if (!($data = $cache->load($id))) {
    // промах кэша

    $data = '';
    for ($i = 0; $i < 10000; $i++) {
        $data = $data . $i;
    }

    $cache->save($data);

}

// [...] делаем что-либо с данными (отображение, передача и т.д.)

?>]]>       </programlisting>
            <para>
                Если вы хотите закэшировать несколько блоков или экземпляров
                данных, то принцип будет тот же:
<!--
                If you want to cache multiple blocks or data instances, the idea is the same:
-->
            </para>
            <programlisting role="php"><![CDATA[<?php

// убедитесь, что используете уникальные идентификаторы:
$id1 = 'foo';
$id2 = 'bar';

// блок 1
if (!($data = $cache->load($id1))) {
    // промах кэша

    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    }

    $cache->save($data);

}
echo($data);

// эта часть не кэшируется
echo('НЕ КЭШИРУЕТСЯ! ');

// блок 2
if (!($data = $cache->load($id2))) {
    // промах кэша

    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . '!';
    }

    $cache->save($data);

}
echo($data);

?>]]>       </programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.output">
        <title>Zend_Cache_Frontend_Output</title>
        <sect3 id="zend.cache.frontend.output.introduction">
            <title>Введение</title>
            <para>
                <code>Zend_Cache_Frontend_Output</code> является фронтэндом,
                собирающим выходные данные. Он использует буферизацию вывода
                (output buffering) в PHP для сохранения всего, что выводится
                между его методами <code>start()</code> и <code>end()</code>.
<!--
                <code>Zend_Cache_Frontend_Output</code> is an output-capturing frontend. It utilizes
                output buffering in PHP to capture everything between its <code>start()</code> and
                <code>end()</code> methods.
-->
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.output.options">
            <title>Доступные опции</title>
            <para>
                Этот фронтэнд не имеет специальных опций, отличных
                от опций <code>Zend_Cache_Core</code>.
<!--
             This frontend doesn't have any specific options other than those of
                <code>Zend_Cache_Core</code>.
-->
            </para>
        </sect3>

        <sect3 id="zend.cache.frontend.output.examples">
            <title>Примеры</title>
            <para>
                Пример был дан в самом начале данного раздела руководства. Здесь
                он с небольшими изменениями:
<!--
                An example is given in the manual at the very beginning. Here it is with minor changes:
-->
            </para>
            <programlisting role="php"><![CDATA[<?php

// если имеет место промах кэша,
// то начинается буферизация вывода
if (!($cache->start('mypage'))) {

    // все выводится, как обычно
    echo 'Hello world! ';
    echo 'This is cached ('.time().') ';

    $cache->end(); // завершение буферизации вывода

}

echo 'This is never cached ('.time().').';

?>]]>       </programlisting>
            <para>
                Используя эту форму, довольно легко установить кэширование
                вывода в уже работающем проекте с незначительным рефакторингом
                кода или совсем без него.
<!--
                Using this form it is fairly easy to set up output caching in your already working project
                with little or no code refactoring.
-->
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.function">
        <title>Zend_Cache_Frontend_Function</title>
        <sect3 id="zend.cache.frontend.function.introduction">
            <title>Введение</title>
            <para>
                <code>Zend_Cache_Frontend_Function</code> сохраняет в кэш
                результаты вызова функции. Он имеет единственный основной метод
                <code>call()</code> который принимает имя функции и параметры
                вызова в массиве.
<!--
                <code>Zend_Cache_Frontend_Function</code> caches the results of function calls. It has
                a single main method named <code>call()</code> which takes a function name and parameters
                for the call in an array.
-->
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.function.options">
            <title>Доступные опции</title>
            <table>
                <title>Доступные опции</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Опция</entry>
                            <entry>Тип данных</entry>
                            <entry>Значение по умолчанию</entry>
                            <entry>Описание</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  Если равен true, то вызовы функции по
                                  умолчанию кэшируются.
                                  <!--if true, function calls will be cached by default-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  Имена функций, которые всегда кэшируются.
                                  <!--function names which will always be cached-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  Имена функций, которые никогда не должны
                                  кэшироваться.
                                  <!--function names which must never be cached-->
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.frontend.function.examples">
            <title>Примеры</title>
            <para>
                Функция <code>call()</code> используется так же, как и
                <code>call_user_func_array()</code> в PHP:
<!--
                Using the <code>call()</code> function is the same as using
                <code>call_user_func_array()</code> in PHP:
-->
            </para>
           <programlisting role="php"><![CDATA[<?php

$cache->call('veryExpensiveFunc', $params);

# $params является массивом
# например, если нужно вызвать (с кэшированием) veryExpensiveFunc(1, 'foo', 'bar'),
# то вы должны использовать $cache->call('veryExpensiveFunc', array(1, 'foo', 'bar'))

?>]]>       </programlisting>
            <para>
                <code>Zend_Cache_Frontend_Function</code> достаточно
                интеллектуален, чтобы кэшировать как возвращаемое функцией
                значение, так и данные, выводимые внутри нее.
<!--
                <code>Zend_Cache_Frontend_Function</code> is smart enough to cache both the
                return value of the function and its internal output.
-->
            </para>
            <note>
                <para>
                    Вы можете передавать любые встроенные, так и определенные
                    пользователем функции, за исключением <code>array()</code>,
                    <code>echo()</code>, <code>empty()</code>,
                    <code>eval()</code>, <code>exit()</code>,
                    <code>isset()</code>, <code>list()</code>,
                    <code>print()</code> и <code>unset()</code>.
<!--
                    You can pass any builtin or user defined function with the exception of
                    <code>array()</code>, <code>echo()</code>, <code>empty()</code>, <code>eval()</code>,
                    <code>exit()</code>, <code>isset()</code>, <code>list()</code>, <code>print()</code>
                    and <code>unset()</code>.
-->
                </para>
            </note>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.class">
        <title>Zend_Cache_Frontend_Class</title>
        <sect3 id="zend.cache.frontend.class.introduction">
            <title>Введение</title>
            <para>
                <code>Zend_Cache_Frontend_Class</code> отличается от
                <code>Zend_Cache_Frontend_Function</code> тем, что позволяет
                кэшировать объекты и статические вызовы методов.
<!--
                <code>Zend_Cache_Frontend_Class</code> is different from <code>Zend_Cache_Frontend_Function</code>
                because it allows caching of object and static method calls.
-->
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.class.options">
            <title>Доступные опции</title>
            <table>
                <title>Доступные опции</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Опция</entry>
                            <entry>Тип данных</entry>
                            <entry>Значение по умолчанию</entry>
                            <entry>Описание</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cachedEntity</code> (required)</entry>
                              <entry><code>mixed</code></entry>
                              <entry></entry>
                              <entry>
                                  Если установлен как имя класса, то будет
                                  кэшироваться абстрактный класс и будут использоваться
                                  только статические вызовы; если установлен как объект,
                                  то будут кэшироваться методы объекта.
                                  <!--if set to a class name, we will cache an abstract class and will use
                                  only static calls; if set to an object, we will cache this object methods-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  Если установлен в <code>true</code>, то вызовы
                                  будут кэшироваться по умолчанию.
                                  <!--if true, calls will be cached by default-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  Имена методов, которые должны всегда кэшироваться.
                                  <!--method names which will always be cached-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  Имена методов, которые никогда не должны кэшироваться.
                                  <!--method names which must never be cached-->
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.frontend.class.examples">
            <title>Примеры</title>
            <para>
                Кэширование статических вызовов:
<!--
                For example, to cache static calls :
-->
            </para>
            <programlisting role="php"><![CDATA[<?php

class test {

    # статический метод
    public static function foobar($param1, $param2) {
        echo "foobar_output($param1, $param2)";
        return "foobar_return($param1, $param2)";
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => 'test' // имя класса
);
// [...]

# кэшируемый вызов
$res = $cache->foobar('1', '2');

?>]]>       </programlisting>
            <para>
                Кэширование обычных вызовов методов:
<!--
                To cache classic method calls :
-->
            </para>
            <programlisting role="php"><![CDATA[<?php

class test {

    private $_string = 'hello !';

    public function foobar2($param1, $param2) {
        echo($this->_string);
        echo "foobar2_output($param1, $param2)";
        return "foobar2_return($param1, $param2)";
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => new test() // экземпляр класса
);
// [...]

# кэшируемый вызов
$res = $cache->foobar2('1', '2');

?>]]>       </programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontends.file">
        <title>Zend_Cache_Frontend_File</title>
        <sect3 id="zend.cache.frontends.file.introduction">
            <title>Введение</title>
            <para>
                <code>Zend_Cache_Frontend_File</code> является фронтэндом,
                который управляется временем изменения "главного файла".
                Он очень полезен для конфигурации или шаблонов.
<!--
                <code>Zend_Cache_Frontend_File</code> is a frontend driven by the
                modification time of a "master file". It's really interesting for examples
                in configuration or templates issues.
-->
            </para>
            <para>
                Например, у вас есть конфигурационный файл XML, он парсится
                функцией, которая возвращает объект конфигурации
                (наподобие <code>Zend_Config</code>). С помощью
                <code>Zend_Cache_Frontend_File</code> вы можете сохранять объект
                конфигурации в кэш (чтобы избежать повторного парсинга
                конфигурационного файла XML), но с сильной зависимостью
                от "главного файла". Если конфигурационный файл XML изменяется,
                то кэш сразу становится недействительным.
<!--
                  For instance, you have an XML configuration file which is parsed by a function
                  which returns a "config object" (like with <code>Zend_Config</code>). With
                  <code>Zend_Cache_Frontend_File</code>, you can store the "config object" into
                  cache (to avoid the parsing of the XML config file at each time) but with a
                  sort of strong dependency on the "master file". So, if the XML config file
                  is modified, the cache is immediatly invalidated.
-->
            </para>
        </sect3>
        <sect3 id="zend.cache.frontends.file.options">
            <title>Доступные опции</title>
            <table>
                <title>Доступные опции</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Опция</entry>
                            <entry>Тип данных</entry>
                            <entry>Значение по умолчанию</entry>
                            <entry>Описание</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>masterFile (обязательный)</code></entry>
                              <entry><code>string</code></entry>
                              <entry><code></code></entry>
                              <entry>
                                  Полные путь и имя главного файла
                                  <!--the complete path and name of the master file-->
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        <sect3 id="zend.cache.frontends.file.examples">
            <title>Примеры</title>
            <para>
                Этот фронтэнд используется так же, как и
                <code>Zend_Cache_Core</code>. Специальные примеры не нужны,
                единственное, что надо сделать — это определить
                <code>masterFile</code> при использовании фабричного метода.
<!--
                Use of this frontend is the same than of <code>Zend_Cache_Core</code>. There
                is no need of a specific example - the only thing to do is to
                define the <code>masterFile</code> when using the factory.
-->
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontends.page">
        <title>Zend_Cache_Frontend_Page</title>
        <sect3 id="zend.cache.frontends.page.introduction">
            <title>Введение</title>
            <para>
                <code>Zend_Cache_Frontend_Page</code> похожа на <code>Zend_Cache_Frontend_Output</code>,
                но предназначена для кэширования целых страниц. <code>Zend_Cache_Frontend_Page</code>
              нельзя использовать для кэширования отдельных блоков.
<!--
                <code>Zend_Cache_Frontend_Page</code> is like <code>Zend_Cache_Frontend_Output</code>
                but designed for a complete page. It's impossible to use <code>Zend_Cache_Frontend_Page</code>
                for caching only a single block.
-->
            </para>
            <para>
              Идентификатор кэша вычисляется автоматически
            с использованием <code>$_SERVER['REQUEST_URI']</code> и
            (в зависимости от опций) <code>$_GET</code>, <code>$_POST</code>,
            <code>$_SESSION</code>, <code>$_COOKIE</code>, <code>$_FILES</code>.
            Кроме этого, вы используете только один метод для вызова
            (<code>start()</code>), потому что <code>end()</code> вызывается
            автоматически, когда страница заканчивается.
<!--
                On the other hand, the "cache id" is calculated automatically with
                <code>$_SERVER['REQUEST_URI']</code> and (depending on options)
                <code>$_GET</code>, <code>$_POST</code>, <code>$_SESSION</code>, <code>$_COOKIE</code>, <code>$_FILES</code>.
                More over, you have only one method to call (<code>start()</code>) because the
                <code>end()</code> call is fully automatic when the page is ended.
-->
            </para>
            <para>
              На данный момент мы планируем добавить условную систему HTTP для
              сохранения пропускной способности (система будет отправлять
            HTTP 304 Not Modified, если есть попадание в кэш и броузер уже имеет
            правильную версию страницы).
<!--
                For the moment, it's not implemented but we plan to add a HTTP conditional system
                to save bandwith (the system will send a HTTP 304 Not Modified if the cache is hit
                and if the browser has already the good version).
-->
            </para>
            <note><para>
                  Zend_Cache_Frontend_Page сейчас находится на стадии
                "альфа", это означает, что она и в дальнейшем будет
                совершенствоваться.
<!--
                Zend_Cache_Frontend_Page is really "alpha stuff" and is meant to be improved further down the road.
-->
            </para></note>
        </sect3>
        <sect3 id="zend.cache.frontends.page.options">
            <title>Доступные опции (для этого фронтэнда части в фабрике Zend_Cache)<!--Available options (for this frontend in Zend_Cache factory)--></title>
            <table>
                <title>Доступные опции</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Опция</entry>
                            <entry>Тип данных</entry>
                            <entry>Значение по умолчанию</entry>
                            <entry>Описание</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>http_conditional</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                  Использовать условную систему HTTP (не
                                реализовано на данный момент)
                                  <!--use the httpConditional system (not implemented for the moment)-->
                              </entry>
                         </row>
                         <row>
                              <entry><code>debug_header</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                  Если установлен в <code>true</code>, то
                                отладочный текст включается перед каждой
                                кэшируемой страницей.
                                  <!--if true, a debug text is added before each cached pages-->
                              </entry>
                         </row>
                         <row>
                                 <entry><code>default_options</code></entry>
                              <entry><code>array</code></entry>
                              <entry><code>array(...смотрите далее...)</code></entry>
                              <entry>
                                  Ассоциативный массив опций, включаемых по
                                умолчанию
                                  <!--an associative array of default options :-->
                                  <itemizedlist>
                                      <listitem>
                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию) <code>cache</code> :
                                            если <code>true</code>, то
                                            кэширование включено
                                             <!--cache is on if true-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, false</code> по
                                            умолчанию)
                                            <code>cache_with_get_variables</code> :
                                            если <code>true</code>, кэширование
                                            включено, даже если в массиве
                                            <code>$_GET</code> есть переменные
                                            <!--if true, cache is still on even if there are some variables in <code>$_GET</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, false</code> по
                                            умолчанию)
                                            <code>cache_with_post_variables</code> :
                                            если <code>true</code>, кэширование
                                            включено, даже если в массиве
                                            <code>$_POST</code> есть переменные
                                            <!--if true, cache is still on even if there are some variables in <code>$_POST</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, false</code> по
                                            умолчанию)
                                            <code>cache_with_session_variables</code> :
                                            если <code>true</code>, кэширование
                                            включено, даже если в массиве
                                            <code>$_SESSION</code> есть
                                            переменные
                                            <!--if true, cache is still on even if there are some variables in <code>$_SESSION</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, false</code> по
                                            умолчанию)
                                            <code>cache_with_files_variables</code> :
                                            если <code>true</code>, кэширование
                                            включено, даже если в массиве
                                            <code>$_FILES</code> есть переменные
                                            <!--if true, cache is still on even if there are some variables in <code>$_FILES</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, false</code> по
                                            умолчанию)
                                            <code>cache_with_cookie_variables</code> :
                                            если <code>true</code>, кэширование
                                            включено, даже если в массиве
                                            <code>$_COOKIE</code> есть
                                            переменные
                                            <!--if true, cache is still on even if there are some variables in <code>$_COOKIE</code> array-->
                                        </para>
                                    </listitem>
                                                      <listitem>
                                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию)
                                            <code>make_id_with_get_variables</code> :
                                            если <code>true</code>, то
                                            идентификатор кэша будет зависеть
                                            от содержимого массива
                                            <code>$_GET</code>
                                            <!--if true, the cache id will be dependent of the content of the <code>$_GET</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию)
                                            <code>make_id_with_post_variables</code> :
                                            если <code>true</code>, то
                                            идентификатор кэша будет зависеть
                                            от содержимого массива
                                            <code>$_POST</code>
                                            <!--if true, the cache id will be dependent of the content of the <code>$_POST</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию)
                                            <code>make_id_with_session_variables</code> :
                                            если <code>true</code>, то
                                            идентификатор кэша будет зависеть
                                            от содержимого массива
                                            <code>$_SESSION</code>
                                            <!--if true, the cache id will be dependent of the content of the <code>$_SESSION</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию)
                                            <code>make_id_with_files_variables</code> :
                                            если <code>true</code>, то
                                            идентификатор кэша будет зависеть от
                                            содержимого массива
                                            <code>$_FILES</code>
                                            <!--if true, the cache id will be dependent of the content of the <code>$_FILES</code> array-->
                                        </para>
                                    </listitem>
                                      <listitem>
                                          <para>
                                            (<code>boolean, true</code> по
                                            умолчанию)
                                            <code>make_id_with_cookie_variables</code> :
                                            если <code>true</code>, то
                                            идентификатор кэша будет зависеть от
                                            содержимого массива
                                            <code>$_COOKIE</code>
                                            <!--if true, the cache id will be dependent of the content of the <code>$_COOKIE</code> array-->
                                        </para>
                                    </listitem>
                                  </itemizedlist>
                              </entry>
                         </row>
                         <row>
                              <entry><code>regexps</code></entry>
                              <entry><code>array</code></entry>
                              <entry><code>array()</code></entry>
                              <entry>
                                  Ассоциативный массив для установки опций только
                                для некоторых REQUEST_URI. Ключами этого массива
                                являются регулярные выражения (PCRE), значениями —
                                ассоциативные массивы со специальными опциями,
                                которые устанавливаются, если
                                $_SERVER['REQUEST_URI']
                                соответствует регулярному выражению
                                (см. default_options в этом списке доступных
                                опций). Если $_SERVER['REQUEST_URI']
                                соответствует нескольким регулярным выражениям,
                                то используется только последнее из них.
<!--
                                an associative array to set options only for some REQUEST_URI, keys are (PCRE) regexps, values are
                                    associative arrays with specific options to set if the regexp matchs on $_SERVER['REQUEST_URI']
                                (see defaultOptions for the list of available options) ; if several regexps match the $_SERVER['REQUEST_URI'],
                                only the last one will be used
-->
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        <sect3 id="zend.cache.frontends.page.examples">
            <title>Пример</title>
            <para>
                Использование <code>Zend_Cache_Frontend_Page</code> довольно
              простое:
<!--
                Use of Zend_Cache_Frontend_Page is really trivial :
-->
          </para>
            <programlisting role="php"><![CDATA[<?php

// [...]

$cache->start();
// если есть попадание в кэш, то результат отправляется броузеру
// и выполнение скрипта на этом прекращается

// rest of the page ...

?>]]>     </programlisting>
            <para>
                Более сложный пример, который показывает способ создания
              централизованного управления кэшированием в загрузочном файле
              (для использования с <code>Zend_Controller</code>, например).
<!--
                  a more complex example which shows a way to get a centralized cache management in a bootstrap file
                  (for using with Zend_Controller for example)
-->
            </para>
          <programlisting role="php"><![CDATA[<?php

// [...] вы должны избегать слишком большого количества строк кода перед участком кэша
// [...] например, для наибольшей производительности "require_once" или "Zend_Loader::loadClass"
// [...] должны находиться после участка кэша

require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifetime' => 7200,
   'debug_header' => true, // для отладки
   'regexps' => array(
       '^/$' => array('cache' => true),         // кэширование всего IndexController;
       '^/index/' => array('cache' => true),    // кэширование всего IndexController;
       '^/article/' => array('cache' => false), // не кэшируем ArticleController...
       '^/article/view/' => array(              // ...но кэшируем действие "view"
           'cache' => true,                     // контроллера ArticleController;
           'cache_with_post_variables' => true,    // кэшируем, даже если есть переменные $_POST
           'make_id_with_post_variables' => true,   // (но кэш будет зависеть от массива $_POST)
       )
   )
);
$backendOptions = array(
    'cache_dir' => '/tmp/'
);

// получение объекта Zend_Cache_Frontend_Page
$cache = Zend_Cache::factory('Page', 'File', $frontendOptions, $backendOptions);

$cache->start();
// если есть попадание в кэш, результат отправляется броузеру,
// и выполнение скрипта на этом завершается

// [...] конец загрузочного файла (этот код не исполняется, если есть попадание в кэш)

?>]]>     </programlisting>
        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
