<sect1 id="zend.controller.quickstart">
    <title>Zend_Controller - Быстрый старт<!--Zend_Controller Quick Start--></title>

    <sect2 id="zend.controller.quickstart.introduction">
        <title>Введение<!--Introduction--></title>
        <para>
            <code>Zend_Controller</code> является ядром системы MVC в Zend
            Framework. Аббревиатура MVC - сокращение от
            <ulink url="http://en.wikipedia.org/wiki/Model-view-controller">Model-View-Controller</ulink>
            (модель-вид-контроллер), это паттерн проектирования, предназначенный
            для отделения логики приложения от логики представления.
            <code>Zend_Controller_Front</code> реализует паттерн
            <ulink url="http://www.martinfowler.com/eaaCatalog/frontController.html">Front
            Controller</ulink>, в котором все запросы перехватываются
            фронт-контроллером (front controller) и перенаправляются отдельным
            контроллерам действий (action controllers), выбор которых
            производится по запрошенному URL.
<!--
            <code>Zend_Controller</code> is the heart of Zend Framework's MVC
            system. MVC stands for <ulink url="http://en.wikipedia.org/wiki/Model-view-controller">Model-View-Controller</ulink>
            and is a design pattern targeted at separating application logic
            from display logic. <code>Zend_Controller_Front</code> implements a
            <ulink url="http://www.martinfowler.com/eaaCatalog/frontController.html">Front
                Controller</ulink> pattern, in which all requests are
            intercepted by the front controller and dispatched to individual
            Action Controllers based on the URL requested.
-->
        </para>
        <para>
            Система <code>Zend_Controller</code> построена с расчетом на
            расширяемость как через создание подклассов уже существующих классов
            и написание новых классов, реализующих различные интерфейсы и
            абстрактные классы, образующих основу семейства классов
            контроллеров, так и через написание плагинов или помощников действий
            для наращивания функциональности системы или управления ею.
<!--
            The <code>Zend_Controller</code> system was built with extensibility
            in mind, either by subclassing the existing classes, writing new
            classes that implement the various interfaces and abstract classes
            that form the foundation of the controller family of classes, or
            writing plugins or action helpers to augment or manipulate the
            functionality of the system.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.quickstart.go">
        <title>Быстрый старт<!--Quick Start--></title>

        <para>
            Если вам нужна более подробная информация, то сразу переходите к
            следующим разделам. Если хотите сразу начать работу с
            <code>Zend_Controller</code>, то читайте далее.
<!--
            If you need more in-depth information, see the following sections.
            If you just want to get up and running quickly, read on.
-->
        </para>

        <sect3 id="zend.controller.quickstart.go.directory">
            <title>Создайте свою файловую структуру<!--Create your filesystem layout--></title>

            <para>
                Первый шаг состоит в том, чтобы создать файловую
                структуру приложения. Ниже приведено типовое решение:
<!--
                The first step is to create your file system layout. The typical
                layout is as follows:
-->
            </para>

            <programlisting role="php"><![CDATA[
application/
    controllers/
        IndexController.php
    models/
    views/
        scripts/
            index/
                index.phtml
        helpers/
        filters/
html/
    .htaccess
    index.php]]>
            </programlisting>

        </sect3>

        <sect3 id="zend.controller.quickstart.go.docroot">
            <title>Установите корневую директорию для документов<!--Set your document root--></title>

            <para>
                В своем веб-сервере установите директорию <code>html</code> из
                приведенной выше структуры в качестве корневой для
                веб-документов.
<!--
                In your web server, point your document root to the
                <code>html</code> directory of the above file system layout.
-->
            </para>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.rewrite">
            <title>Создайте свои правила перезаписи<!--Create your rewrite rules--></title>

            <para>
                Отредактируйте файл <code>html/.htaccess</code> из
                приведенной выше структуры следующим образом:
<!--
                Edit the <code>html/.htaccess</code> file above to read as
                follows:
-->
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]>
            </programlisting>
            
            <para>
                Эти правила будут направлять запросы, не адресованные к ресурсам
                (изображения, css), ко фронт-контроллеру.
                Если есть файлы с другими расширениями, которые вы не хотите
                адресовать фронт-контроллеру (файлы PDF, текстовые файлы и
                т.д.), то добавьте также эти расширения в соответствующее
                правило или создайте собственные правила перезаписи.
<!--
                The above rules will route any non-resource (images,
                stylesheets) requests to the front controller. If there are
                other extensions you wish to exclude from the front controller
                (PDFs, text files, etc), add their extensions to the switch, or
                create your own rewrite rules.
-->
            </para>

            <note>
                <para>
                    Вышеприведенные правила перезаписи предназначены для
                    веб-сервера Apache. За примерами правил перезаписи для
                    других веб-серверов см. <link linkend="zend.controller.router.introduction">документацию
                    по маршрутизаторам</link>.
<!--
                    The above rewrite rules are for Apache; for examples of
                    rewrite rules for other web servers, see the <link linkend="zend.controller.router.introduction">router
                        documentation</link>.
-->
                </para>
            </note>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.bootstrap">
            <title>Создайте свой файл загрузки<!--Create your bootstrap file--></title>

            <para>
                Файл загрузки - это страница, на которую направляются все
                запросы, в нашем случае это <code>html/index.php</code>.
                Откройте <code>html/index.php</code> в любом текстовом редакторе
                и добавьте следующие строки:
<!--
                The bootstrap file is the page all requests are routed through
                - <code>html/index.php</code> in this case. Open up
                <code>html/index.php</code> in the editor of your choice and add
                the following:
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/app/controllers');]]>
            </programlisting>
            
            <para>
                Этот код выполняет инстанцирование и запуск фронт-контроллера,
                который будет направлять запросы к контроллерам действий.
<!--
                This will instantiate and dispatch the front controller, which
                will route requests to action controllers.
-->
            </para>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.controller">
            <title>Создайте свой контроллер действий, используемый по умолчанию<!--Create your default action controller--></title>

            <para>
                До того, как начать обсуждение контроллеров действий, нужно
                сначала понять, как обрабатываются запросы в Zend Framework. По
                умолчанию первая часть пути в URL соответствует контроллеру, а
                вторая - действию. Например, дан URL
                <code>http://framework.zend.com/roadmap/components</code>. В нем
                путь <code>/roadmap/components</code> будет соответствовать
                контроллеру <code>roadmap</code> и действию
                <code>components</code>. Если не передано имя действия, то
                предполагается действие <code>index</code>; если не передано имя
                контроллера, то предполагается контроллер <code>index</code> (по
                соглашению Apache это соответствует
                <code>DirectoryIndex</code>).
<!--
                Before discussing action controllers, you should first
                understand how requests are routed in Zend Framework. By
                default, the first segment of a URL path maps to a controller,
                and the second to an action. For example, given the URL
                <code>http://framework.zend.com/roadmap/components</code>, the
                path is <code>/roadmap/components</code>, which will map to the
                controller <code>roadmap</code> and the action
                <code>components</code>. If no action is provided, the action
                <code>index</code> is assumed, and if no controller is provided,
                the controller <code>index</code> is assumed (following the
                Apache convention that maps a <code>DirectoryIndex</code>
                automatically).
-->
            </para>

            <para>
                Диспетчер <code>Zend_Controller</code> принимает значение
                контроллера и находит соответствующий ему класс. По умолчанию
                это имя контроллера, начинающееся с заглавной буквы и со словом
                <code>Controller</code> в конце. Таким образом, контроллер
                <code>roadmap</code> будет соответствовать классу
                <code>RoadmapController</code>.
<!--
                <code>Zend_Controller</code>'s dispatcher then takes the
                controller value and maps it to a class. By default, it
                Title-cases the controller name and appends the word
                <code>Controller</code>. Thus, in our example above, the
                controller <code>roadmap</code> is mapped to the class
                <code>RoadmapController</code>.
-->
            </para>

            <para>
                Аналогичным образом устанавливается соответствие значения
                действия методу класса контроллера. По умолчанию значение
                приводится к нижнему регистру и к нему присоединяется слово
                <code>Action</code>. Таким образом, в нашем примере выше
                действие <code>components</code> будет методом с именем
                <code>componentsAction</code>, и в итоге вызов метода
                будет выглядеть следующим образом:
                <code>RoadmapController::componentsAction()</code>.
<!--
                Similarly, the action value is mapped to a method of the
                controller class. By default, the value is lower-cased, and the
                word <code>Action</code> is appended. Thus, in our example
                above, the action <code>components</code> becomes
                <code>componentsAction</code>, and the final method called is
                <code>RoadmapController::componentsAction()</code>.
-->
            </para>

            <para>
                Итак, двигаемся дальше. Теперь приступим к созданию контроллера
                и действия, используемых по умолчанию. Как было замечено ранее,
                эти контроллер и действие должны оба называться
                <code>index</code>. Откройте файл
                <code>application/controllers/IndexController.php</code> и
                введите следующее:
<!--
                So, moving on, let's now create a default action controller and
                action method. As noted earlier, the default controller and
                action called are both <code>index</code>. Open the file
                <code>application/controllers/IndexController.php</code>, and
                enter the following:
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
/** Zend_Controller_Action */
require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action
{
    public function indexAction()
    {
    }
}]]>
            </programlisting>

            <para>
                По умолчанию включен помощник действий <link
                    linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer</link>.
                Это означает, что, просто определив метод действия и
                соответствующий скрипт вида, вы получите рендеринг контента.
                По умолчанию в MVC в качестве "вида" используется
                <code>Zend_View</code>. <code>render()</code> использует имя
                контроллера (например, <code>index</code>) и имя текущего
                действия (например, <code>index</code>) для определения того,
                какой шаблон тянуть. По умолчанию шаблоны имеют расширение
                <code>.phtml</code>, это значит, что в нашем примере будет
                использоваться шаблон <code>index/index.phtml</code>. Кроме
                этого, <code>ViewRenderer</code> автоматически
                предполагает, что директория <code>views</code>, находящаяся на
                том же уровне, что и директория контроллера, будет базовой
                директорией видов, и что действующие скрипты вида будут в
                поддиректории <code>views/scripts/</code>.
                Таким образом, шаблон для рендеринга будет находится в
                <code>application/views/scripts/index/index.phtml</code>.               
<!--
                By default, the <link
                    linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer</link>
                action helper is enabled. What this means is that by simply
                defining an action method and a corresponding view script, you
                will immediately get content rendered.  By default,
                <code>Zend_View</code> is used as the View layer in the MVC. The
                <code>ViewRenderer</code> does some magic, and uses the
                controller name (e.g., <code>index</code>) and the current
                action name (e.g., <code>index</code>) to determine what
                template to pull. By default, templates end in the
                <code>.phtml</code> extension, so this means that, in the above
                example, the template <code>index/index.phtml</code> will be
                rendered. Additionally, the <code>ViewRenderer</code>
                automatically assumes that the directory <code>views</code> at
                the same level as the controller directory will be the base view
                directory, and that the actual view scripts will be in the
                <code>views/scripts/</code> subdirectory. Thus, the template
                rendered will be found in
                <code>application/views/scripts/index/index.phtml</code>.
-->
            </para>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.view">
            <title>Создайте свой скрипт вида<!--Create your view script--></title>

            <para>
                Как было упомянуто в <link linkend="zend.controller.quickstart.go.controller">предыдущем
                разделе</link>, скрипты вида находятся в
                <code>application/views/scripts/</code>. Скриптом вида для
                контроллера и действия, используемых по умолчанию, является
                <code>application/views/scripts/index/index.phtml</code>.
                Создайте этот файл и введите в него какой-либо код HTML:
<!--
                As mentioned <link linkend="zend.controller.quickstart.go.controller">in the
                    previous section</link>, view scripts are found in
                <code>application/views/scripts/</code>; the view script for the
                default controller and action is in
                <code>application/views/scripts/index/index.phtml</code>. Create
                this file, and type in some HTML:
-->
            </para>

            <programlisting role="php"><![CDATA[
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>My first Zend Framework App</title>
</head>
<body>
    <h1>Hello, World!</h1>
</body>
</html>]]>
            </programlisting>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.errorhandler">
            <title>Создайте свой контроллер ошибок<!--Create your error controller--></title>

            <para>
                По умолчанию зарегистрирован <link
                linkend="zend.controller.plugins.standard.errorhandler">плагин-обработчик ошибок</link>. Этот плагин ожидает, что есть контроллер для
                обработки ошибок. По умолчанию он предполагает, что в модуле,
                используемом по умолчанию, имеется контроллер
                <code>ErrorController</code> с методом <code>errorAction</code>.
<!--
                By default, <link
                    linkend="zend.controller.plugins.standard.errorhandler">the
                error handler plugin</link> is registered. This plugin expects
                that a controller exists to handle errors. By default, it
                assumes an <code>ErrorController</code> in the default module
                with an <code>errorAction</code> method:
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
/** Zend_Controller_Action */
require_once 'Zend/Controller/Action.php';

class ErrorController extends Zend_Controller_Action
{
    public function errorAction()
    {
    }
}]]>
            </programlisting>

            <para>
                Согласно уже обсуждаемой выше структуре директорий этот файл
                будет находиться по пути
                <code>application/controllers/ErrorController.php</code>. Нужно
                также создать скрипт вида
                <code>application/views/scripts/error/error.phtml</code>, пример
                его содержимого:
<!--
                Assuming the already discussed directory layout, this file will
                go in <code>application/controllers/ErrorController.php</code>.
                You will also need to create a view script in
                <code>application/views/scripts/error/error.phtml</code>; sample
                content might look like:
-->
            </para>

            <programlisting role="php"><![CDATA[
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Error</title>
</head>
<body>
    <h1>An error occurred</h1>
    <p>An error occurred; please try again later.</p>
</body>
</html>]]>
            </programlisting>
        </sect3>

        <sect3 id="zend.controller.quickstart.go.finish">
            <title>Смотрим сайт!<!--View the site!--></title>

            <para>
                Теперь, имея свои первые контроллер и вид, вы можете
                запустить свой броузер и просматривать сайт. Если ваш домен -
                <code>example.com</code>, то любой из следующих URL-ов будет
                возвращать ту страницу, которую вы только что создали:
<!--
                With your first controller and view under your belt, you can now
                fire up your browser and browse to the site. Assuming
                <code>example.com</code> is your domain, any of the following
                URLs will get to the page we've just created:
-->
            </para>

            <itemizedlist>
                <listitem><para><code>http://example.com/</code></para></listitem>
                <listitem><para><code>http://example.com/index</code></para></listitem>
                <listitem><para><code>http://example.com/index/index</code></para></listitem>
            </itemizedlist>

            <para>
                Теперь вы можете создавать другие контроллеры и методы действий.
                Поздравляем!
<!--
                You're now ready to start creating more controllers and action
                methods. Congratulations!
-->
            </para>
        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->