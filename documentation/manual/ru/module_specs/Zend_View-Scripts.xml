<sect1 id="zend.view.scripts">

    <title>Скрипты вида<!--View Scripts--></title>

    <para>
        После того, как ваш контроллер определил переменные и вызвал
        метод <code>render()</code>, <code>Zend_View</code> включает
        требуемый скрипт представления и выполняет его "внутри" области
        видимости <code>Zend_View</code>. Поэтому в вашем скрипте представления
        ссылки на $this в действительности будут ссылаться на сам экземляр
        <code>Zend_View</code>.
<!--
        Once your controller has assigned variables and called render(),
        Zend_View then includes the requested view script and executes
        it "inside" the scope of the Zend_View instance.  Therefore,
        in your view scripts, references to $this actually point to the
        Zend_View instance itself.
-->
    </para>

    <para>
        Переменные, объявленные для вида в контроллере, ссылаются на
        свойства экземпляра. Например, если контроллер объявил
        переменную 'something', вы можете ссылаться на нее как
        на <code>$this->something</code> в скрипте вида (это дает
        вам возможность отслеживать, какие переменные были объявлены
        для скрипта, и какие были объявлены самим скриптом).
<!--
        Variables assigned to the view from the controller are referred
        to as instance properties.  For example, if the controller were
        to assign a variable 'something', you would refer to it as
        $this->something in the view script.  (This allows you to keep
        track of which values were assigned to the script, and which are
        internal to the script itself.)
-->
    </para>

    <para>
        Для напоминания, здесь приведен пример скрипта представления из
        введения.
<!--
        By way of reminder, here is the example view script from the
        Zend_View introduction.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>

    <!-- Таблица нескольких книг. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>

        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>

    </table>

<?php else: ?>

    <p>Нет книг для отображения.</p>

<?php endif; ?>]]>
    </programlisting>

    <sect2 id="zend.view.scripts.escaping">

        <title>Экранирование вывода<!--Escaping Output--></title>

        <para>
            Одной из наиважнейших задач, которую должен решать скрипт вида,
            является обеспечение того, что выходные данные должным образом
            экранированы; помимо прочего, это помогает
            предотвратить XSS-атаки.
            За исключением тех случаев, когда используете функции,
            методы или вспомогательные классы, которые делают экранирование
            сами, вы должны всегда экранировать переменные, когда выводите их.
<!--
            One of the most important tasks to perform in a view script
            is to make sure that output is escaped properly; among other
            things, this helps to avoid cross-site scripting attacks.
            Unless you are using a function, method, or helper that does
            escaping on its own, you should always escape variables when
            you output them.
-->
        </para>

        <para>
            <code>Zend_View</code> снабжен методом <code>escape()</code>,
            который выполняет экранирование.
<!--
            Zend_View comes with a method called escape() that does such
            escaping for you.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// плохая практика для скриптов вида
echo $this->variable;

// хорошая практика для скриптов вида
echo $this->escape($this->variable);
?>]]>
        </programlisting>

        <para>
            По умолчанию метод <code>escape()</code> использует функцию PHP
            <code>htmlspecialchars()</code> для экранирования. Но, в зависимости
            от вашего окружения, может потребоваться выполнять экранирование
            по-иному. Используйте метод <code>setEscape()</code> на уровне
            контроллера, чтобы указать <code>Zend_View</code>, какую
            экранирующую функцию обратного вызова использовать.
<!--
            By default, the escape() method uses the PHP htmlspecialchars()
            function for escaping.  However, depending on your environment,
            you may wish for escaping to occur in a different way.  Use the
            setEscape() method at the controller level to tell Zend_View
            what escaping callback to use.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// создание экземпляра Zend_View
$view = new Zend_View();

// приказываем ему использовать htmlentities
// в качестве экранирующей функции обратного вызова
$view->setEscape('htmlentities');

// либо приказываем ему использовать статический метод класса
$view->setEscape(array('SomeClass', 'methodName'));

// или даже метод экземпляра
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// и затем воспроизводим вид
echo $view->render(...);
?>]]>
        </programlisting>

        <para>
            Функции или методы обратного вызова должны принимать значение,
            которое требуется экранировать как первый параметр,
            все остальные параметры должны быть необязателными.
<!--
            The callback function or method should take the value to be
            escaped as its first parameter, and all other parameters should
            be optional.
-->
        </para>

    </sect2>

    <sect2 id="zend.view.scripts.templates">

        <title>Использование других шаблонизаторов<!--Using Alternate Template Systems--></title>

        <para>
            Хотя PHP сам по себе представляет собой мощный шаблонизатор,
            многие разработчики считают его избыточным или слишком сложным для
            верстальщиков и поэтому предпочитают использовать другие
            шаблонизаторы. Zend_View предоставляет 2 пути для этого: первый –
            через скрипты вида, второй - посредством реализации интерфейса
            Zend_View_Interface.
<!--
            Although PHP is itself a powerful template system, many developers
            feel it is too powerful or complex for their template designers and
            will want to use an alternate template engine. Zend_View provides
            two mechanisms for doing so, the first through view scripts, the
            second by implementing Zend_View_Interface.
-->
        </para>

        <sect3 id="zend.view.scripts.templates.scripts">
            <title>Шаблонизаторы c использованием скриптов видов<!--Template Systems Using View Scripts--></title>

            <para>
                Скрипт вида может использоваться для инстанцирования и
                манипулирования отдельным объектом шаблона (это могут быть
                шаблоны в стиле PHPLIB).
<!--
                A view script may be used to instantiate and manipulate a
                separate template object, such as a PHPLIB-style template.  The
                view script for that kind of activity might look something like
                this:
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));

    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }

    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]></programlisting>

            <para>
                Это может соответствовать следующему файлу шаблона:
<!--
                These would be the related template files:
-->
            </para>

            <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Нет книг для отображения.</p>
]]></programlisting>

        </sect3>

        <sect3 id="zend.view.scripts.templates.interface">
            <title>Шаблонизаторы с использованием Zend_View_Interface<!--Template Systems Using Zend_View_Interface--></title>

            <para>
                Некоторым может быть удобнее использовать совместимый с
                Zend_View шаблонизатор. <code>Zend_View_Interface</code>
                предоставляет минимальный интерфейс, необходимый для
                совместимости:
<!--
                Some may find it easier to simply provide a Zend_View-compatible
                template engine. <code>Zend_View_Interface</code> defines the
                minimum interface needed for compatability:
-->
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Возвращает объект используемого шаблонизатора
 */
public function getEngine();

/**
 * Устанавливает путь к шаблонам или скриптам вида
 */
public function setScriptPath($path);

/**
 * Переопределение методов для присвоения значений переменным шаблонов как
 * свойствам объекта
 */
public function __set($key, $value);
public function __get($key);
public function __isset($key);
public function __unset($key);

/**
 * "Ручная" установка значения переменной шаблона или одновременное присвоение
 * значений нескольким переменным
 */
public function assign($spec, $value = null);

/**
 * Удаление всех переменных шаблона
 */
public function clearVars();

/**
 * Вывод шаблона с именем $name
 */
public function render($name);
]]></programlisting>

            <para>
                Используя этот интерфейс, можно легко сделать "обертку" для
                шаблонизаторов сторонних разработчиков. В примере показан
                вариант "обертки" для Smarty:
<!--
                Using this interface, it becomes relatively easy to wrap a
                third-party template engine as a Zend_View-compatible class. As
                an example, the following is one potential wrapper for Smarty:
-->
            </para>

            <programlisting role="php"><![CDATA[
require_once 'Zend/View/Interface.php';
require_once 'Smarty.class.php';

class Zend_View_Smarty implements Zend_View_Interface
{
    /**
     * Объект Smarty
     * @var Smarty
     */
    protected $_smarty;

    /**
     * Конструктор
     *
     * @param string $tmplPath
     * @param array $extraParams
     * @return void
     */
    public function __construct($tmplPath = null, $extraParams = array())
    {
        $this->_smarty = new Smarty;

        if (null !== $tmplPath) {
            $this->setScriptPath($tmplPath);
        }

        foreach ($extraParams as $key => $value) {
            $this->_smarty->$key = $value;
        }
    }

    /**
     * Возвращение объекта шаблонизатора
     *
     * @return Smarty
     */
    public function getEngine()
    {
        return $this->_smarty;
    }

    /**
     * Установка пути к шаблонам
     *
     * @param string $path Директория, устанавливаемая как путь к шаблонам
     * @return void
     */
    public function setScriptPath($path)
    {
        if (is_readable($path)) {
            $this->_smarty->template_dir = $path;
            return;
        }

        throw new Exception('Invalid path provided');
    }

    /**
     * Присвоение значения переменной шаблона
     *
     * @param string $key The variable name.
     * @param mixed $val The variable value.
     * @return void
     */
    public function __set($key, $val)
    {
        $this->_smarty->assign($key, $val);
    }

    /**
     * Получение значения переменной
     *
     * @param string $key The variable name.
     * @return mixed The variable value.
     */
    public function __get($key)
    {
        return $this->_smarty->get_template_vars($key);
    }

    /**
     * Позволяет проверять переменные через empty() и isset()
     *
     * @param string $key
     * @return boolean
     */
    public function __isset($key)
    {
        return (null !== $this->_smarty->get_template_vars($key));
    }

    /**
     * Позволяет удалять свойства объекта через unset()
     *
     * @param string $key
     * @return void
     */
    public function __unset($key)
    {
        $this->_smarty->clear_assign($key);
    }

    /**
     * Присвоение переменных шаблону
     *
     * Позволяет установить значение к определенному ключу или передать массив
     * пар ключ => значение
     *
     * @see __set()
     * @param string|array $spec Ключ или массив пар ключ => значение
     * @param mixed $value (необязательный) Если присваивается значение одной
     * переменной, то через него передается значение переменной
     * @return void
     */
    public function assign($spec, $value = null)
    {
        if (is_array($spec)) {
            $this->_smarty->assign($spec);
            return;
        }

        $this->_smarty->assign($spec, $value);
    }

    /**
     * Удаление всех переменных
     *
     * @return void
     */
    public function clearVars()
    {
        $this->_smarty->clear_all_assign();
    }

    /**
     * Обрабатывает шаблон и возвращает вывод
     *
     * @param string $name Шаблон для обработки
     * @return string Вывод
     */
    public function render($name)
    {
        return $this->_smarty->fetch($name);
    }
}
]]></programlisting>

            <para>
                В этом примере вы можете инстанцировать класс
                <code>Zend_View_Smarty</code> вместо <code>Zend_View</code> и
                использовать его подобно тому, как используется
                <code>Zend_View</code>.
<!--
                In this example, you would instantiate the
                <code>Zend_View_Smarty</code> class instead of
                <code>Zend_View</code>, and then use it in roughly the same
                fashion as <code>Zend_View</code>:
-->
            </para>

            <programlisting role="php"><![CDATA[
$view = new Zend_View_Smarty();
$view->setScriptPath('/path/to/templates');
$view->book = 'Zend PHP 5 Certification Study Guide';
$view->author = 'Davey Shafik and Ben Ramsey'
$rendered = $view->render('bookinfo.tpl');
]]></programlisting>

        </sect3>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
