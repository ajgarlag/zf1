<sect1 id="zend.config.theory_of_operation">
    <title>Theory of Operation</title>
    <para>
        Configuration data are made accessible to the <code>Zend_Config</code> constructor
        through an associative array, which may be multidimensional, in order to support
        organizing the data from general to specific. Concrete adapter classes function
        to adapt configuration data from storage to produce the associative array for the
        <code>Zend_Config</code> constructor. User scripts may provide such arrays directly
        to the <code>Zend_Config</code> constructor, without using an adapter class, since
        it may be appropriate to do so in certain situations.
    </para>
    <para>
        <code>Zend_Config</code> implements the <code>Countable</code> and <code>Iterator</code>
        interfaces in order to facilitate simple access to configuration data.
        Thus, one may use the <ulink url="http://php.net/count"><code>count()</code></ulink>
        function and PHP constructs such as
        <ulink url="http://php.net/foreach"><code>foreach</code></ulink> upon
        <code>Zend_Config</code> objects.
    </para>
    <para>
        By default, configuration data made available through <code>Zend_Config</code>
        are read-only, and an assignment (e.g.,
        <code><![CDATA[$config->database->host = 'example.com']]></code>)
        results in a thrown exception. This default behavior may be overridden through the constructor,
        however, to allow modification of data values.
        <note>
            <para>
                It is important not to confuse such in-memory modifications with saving configuration
                data out to specific storage media. Tools for creating and modifying configuration
                data for various storage media are out of scope with respect to <code>Zend_Config</code>.
                Third-party open source solutions are readily available for the purpose of creating and
                modifying configuration data for various storage media.
            </para>
        </note>
    </para>
    <para>
        Adapter classes inherit from the <code>Zend_Config</code> class since they utilize its functionality.
    </para>
    <para>
        The <code>Zend_Config</code> family of classes enables configuration data to be
        organized into sections. <code>Zend_Config</code> adapter objects may be loaded
        with a single specified section, multiple specified sections, or all sections
        (if none are specified).
    </para>
    <para>
        <code>Zend_Config</code> adapter classes support a single inheritance model that
        enables configuration data to be inherited from one section of configuration data
        into another. This is provided in order to reduce or eliminate the need for
        duplicating configuration data for different purposes. An inheriting section
        may also override the values that it inherits through its parent section.
        Like PHP class inheritance, a section may inherit from a parent section,
        which may inherit from a grandparent section, and so on, but multiple inheritance
        (i.e., section C inheriting directly from parent sections A and B) is not supported.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
