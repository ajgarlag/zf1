<sect1 id="zend.controller.migration">
    <title>Migracja z poprzednich wersji</title>

    <para>
        API komponentów MVC zmieniało się z biegiem czasu. Jeśli zacząłeś używać
        Zend Framework we wczesnej wersji, postępuj według poniższych wskazówek
        aby przeprowadzić migrację swoich skryptów aby używały nowej architektury.
    </para>

    <sect2 id="zend.controller.migration.fromzeroninethree">
        <title>Migracja z wersji 0.9.3 do 1.0.0RC1 lub nowszej</title>

        <para>
            Głównymi zmianami, jakie pojawiły się w wersji 1.0.0RC1 jest dodanie
            i domyśle włączenie wtyczki <link
                linkend="zend.controller.plugins.standard.errorhandler">ErrorHandler</link>
            oraz pomocniczej klasy akcji <link
                linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer</link>.
            Proszę przeczytaj uważnie dokumentację obu komponentów aby dowiedzieć
            się jak one działają i jakie efekty mogą one mieć w twoich aplikacjach.
        </para>

        <para>
            Wtyczka <code>ErrorHandler</code> jest uruchamiana jako metoda
            <code>postDispatch()</code> w celu sprawdzenia czy wyrzucone zostały
            wyjątki i ewentualnego przeniesienia żądania do określonego kontrolera
            obsługi błędów. Powinieneś mieć taki kontroler w swojej aplikacji.
            Możesz jednak wyłączyć taką obsługę błędów ustawiając w kontrolerze
            frontowym parametr <code>noErrorHandler</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php
$front->setParam('noErrorHandler', true);]]>
        </programlisting>

        <para>
            Pomocnicza klasa akcji <code>ViewRenderer</code> automatyzuje
            przekazywanie widoków do kontrolerów akcji oraz automatycznie
            renderuje skrypty widoku oparte na nazwie danej akcji. Głównym
            problemem jaki możesz napotkać są akcje, które nie renderują
            skryptów widoków, nie przekierowują i nie przenoszą żądania, z tego
            względu, że klasa <code>ViewRenderer</code> będzie próbować
            renderować skrypt widoku oparty na nazwie akcji.
        </para>

        <para>
            There are several strategies you can take to update your code. 
            In the short term, you can globally disable the
            <code>ViewRenderer</code> in your front controller bootstrap prior
            to dispatching:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Zakładając, że $front jest instancją klasy Zend_Controller_Front
$front->setParam('noViewRenderer', true);]]>
        </programlisting>

        <para>
            Jednak długoterminowo nie jest to dobra strategia, ponieważ będziesz 
            musiał pisać więcej kodu.
        </para>

        <para>
            When you're ready to start using the <code>ViewRenderer</code> functionality,
            there are several things to look for in your controller code. First,
            look at your action methods (the methods ending in 'Action'), and
            determine what each is doing. If none of the following is happening,
            you'll need to make changes:
        </para>

        <itemizedlist>
            <listitem><para>Wywołania metody <code>$this-&gt;render()</code></para></listitem>
            <listitem><para>Wywołania metody <code>$this-&gt;_forward()</code></para></listitem>
            <listitem><para>Wywołania metody <code>$this-&gt;_redirect()</code></para></listitem>
            <listitem><para>Wywołania pomocniczej klasy akcji <code>Redirector</code></para></listitem>
        </itemizedlist>

        <para>
            The easiest change is to disable auto-rendering for that method:
        </para>

        <programlisting role="php"><![CDATA[
$this->_helper->viewRenderer->setNoRender();]]>
        </programlisting>

        <para>
            If you find that none of your action methods are rendering,
            forwarding, or redirecting, you will likely want to put the above
            line in your <code>preDispatch()</code> or <code>init()</code>
            methods:
        </para>

        <programlisting role="php"><![CDATA[
public function preDispatch()
{
    // disable view script autorendering
    $this->_helper->viewRenderer->setNoRender()
    // .. do other things...
}]]>
        </programlisting>

        <para>
            If you are calling <code>render()</code>, and you're using <link
                linkend="zend.controller.modular">the Conventional Modular
                directory structure</link>, you'll want to change your code to
            make use of autorendering:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Jeśli renderujesz wiele skryptów widoków w jednej akcji,
                    nie musisz nic zmieniać w tej kwestii.
                </para>
            </listitem>
            <listitem>
                <para>
                    Jeśli wywołujesz metodę <code>render()</code> bez argumentów,
                    możesz po prostu usunąć te wywołania.
                </para>
            </listitem>
            <listitem>
                <para>
                    If you're calling <code>render()</code> with arguments, and
                    not doing any processing afterwards or rendering multiple
                    view scripts, you can change these calls to read
                    <code>$this-&gt;_helper-&gt;viewRenderer()</code>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            If you're not using the conventional modular directory structure,
            there are a variety of methods for setting the view base path and
            script path specifications so that you can make use of the
            <code>ViewRenderer</code>. Please read the <link
                linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer
                documentation</link> for information on these methods.
        </para>

        <para>
            If you're using a view object from the registry, or customizing your
            view object, or using a different view implementation, you'll want
            to inject the <code>ViewRenderer</code> with this object. This can
            be done easily at any time.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Prior to dispatching a front controller instance:
                </para>

                <programlisting role="php"><![CDATA[<?php
// Zakładając, że obiekt $view został już zdefiniowany
$viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer($view);
Zend_Controller_Action_HelperBroker::addHelper($viewRenderer);]]>
                </programlisting>
            </listitem>

            <listitem>
                <para>
                    W dowolnej chwili podczas procesu ładowania:
                </para>

                <programlisting role="php"><![CDATA[<?php
$viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
$viewRenderer->setView($view);]]>
                </programlisting>
            </listitem>
        </itemizedlist>

        <para>
            There are many ways to modify the <code>ViewRenderer</code>, 
            including setting a different view script to render, specifying 
            replacements for all replaceable elements of a view script path 
            (including the suffix), choosing a response named segment to 
            utilize, and more. If you aren't using the conventional modular 
            directory structure, you can even associate different path 
            specifications with the <code>ViewRenderer</code>.
        </para>

        <para>
            Zalecamy zaadaptowanie w swoim kodzie użycia wtyczki
            <code>ErrorHandler</code> oraz pomocniczej klasy akcji
            <code>ViewRenderer</code> z tego względu, że te funkcjonalności są
            teraz składnikiem jądra.
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzeroninetwo">
        <title>Migracja z wersji 0.9.2 do 0.9.3 lub nowszej</title>

        <para>
            W wersji 0.9.3 pojawiają się <link
            linkend="zend.controller.actionhelpers">klasy pomocnicze akcji</link>.
            W związku z tym, poniższe metody zostały usunięte, z tego względu, że
            teraz są one zawarte w <link
            linkend="zend.controller.actionhelpers.redirector">przekierowującej
            pomocniczej klasie akcji</link>:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setRedirectCode()</code>; użyj
                    <code>Zend_Controller_Action_Helper_Redirector::setCode()</code>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectPrependBase()</code>; użyj
                    <code>Zend_Controller_Action_Helper_Redirector::setPrependBase()</code>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectExit()</code>; użyj
                    <code>Zend_Controller_Action_Helper_Redirector::setExit()</code>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Przeczytaj <link linkend="zend.controller.actionhelpers">dokumentację
            pomocniczych klas akcji</link> aby uzyskać więcej informacji o tym
            jak można pobrać obiekty pomocnicze i jak nimi manipulować, oraz dokumentację
            <link linkend="zend.controller.actionhelpers.redirector">przekierowującej
            pomocniczej klasy akcji</link> w celu uzyskania informacji o ustawianiu
            opcji przekierowania (a także o innych metodach dla przekierowań).
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerosix">
        <title>Migracja z wersji 0.6.0 do 0.8.0 lub nowszej</title>

        <para>
            Od czasu poprzednich zmian, najbardziej podstawowe użycie
            komponentów MVC pozostaje takie same:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');]]>
        </programlisting>

        <para>
            Jakkolwiek, struktura katalogów została przebudowana, kilka
            komponentów usunięto, kilku innym zmieniono nazwy, a także kilka
            dodano. Zmiany to:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Klasa <code>Zend_Controller_Router</code> została usunięta
                    na rzecz rewrite routera.
                </para>
            </listitem>

            <listitem>
                <para>
                    Nazwa klasy <code>Zend_Controller_RewriteRouter</code>
                    została zmieniona na <code>Zend_Controller_Router_Rewrite</code>
                    i awansowała ona na standardowy router dostarczany z frameworkiem;
                    <code>Zend_Controller_Front</code> użyje go domyślnie, jeśli
                    żaden inny router nie zostanie ustawiony.
                </para>
            </listitem>

            <listitem>
                <para>
                    Nowa klasa trasy doa użycia z rewrite routerem została
                    przedstawiona, jest to
                    <code>Zend_Controller_Router_Route_Module</code>; kryje
                    ona w sobie domyślną trasę używaną przez MVC i wspiera <link
                        linkend="zend.controller.modular">moduły
                        kontrolerów</link>.
                </para>
            </listitem>

            <listitem>
                <para>
                    Nazwa klasy <code>Zend_Controller_Router_StaticRoute</code>
                    została zmieniona na
                    <code>Zend_Controller_Router_Route_Static</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    Nazwa klasy <code>Zend_Controller_Dispatcher</code> została
                    zmieniona na <code>Zend_Controller_Dispatcher_Standard</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    Zmieniły się argumenty metody
                    <code>Zend_Controller_Action::_forward()</code>. Sygnatura
                    wygląda teraz następująco:
                </para>

                <programlisting role="php"><![CDATA[
final protected function _forward($action, $controller = null, $module = null, array $params = null);]]>
                </programlisting>

                <para>
                    Parametr <code>$action</code> jest zawsze wymagany; jeśli
                    kontroler nie jest określony, to brana pod uwagę jest akcja
                    z obecnego kontrolera. Parametr <code>$module</code> jest
                    zawsze ignorowany, o ile parametr <code>$controller</code>
                    nie jest określony. Ostatecznie każdy z parametrów w
                    tablicy <code>$params</code> będzie dołączony do obiektu
                    żądania. Jeśli nie potrzebujesz określić kontrolera lub
                    modułu, ale potrzebujesz przekazać parametry, po prostu
                    określ te wartości jako null.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Migracja z wersji 0.2.0 lub z poprzednich do 0.6.0</title>

        <para>
            Podstawowy sposób korzystania z komponentów MVC nie zmienił się;
            nadal możesz użyć poniższego kodu:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');]]>
        </programlisting>

        <programlisting role="php"><![CDATA[
/* -- utwórz router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- ustawić go w kontrolerze -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- ustawić katalog kontrolerów i uruchomić -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();]]>
        </programlisting>

        <para>
            Jakkolwiek, po dodaniu obiektu <xref linkend="zend.controller.overview.response" />,
            będziesz potrzebował zmienić ostatnią linię z tego przykładu na:
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();]]>
        </programlisting>

        <para>
            Zalecamy użycie obiektu odpowiedzi (Response) do łączenia zawartości
            i nagłówków. To pozwala na bardziej elastyczne zmiany formatu danych
            wyjściowych (na przykład JSON lub XML zamiast XHTML) w twoich
            aplikacjach. Domyślnie metoda <code>dispatch()</code> zrenderuje
            całą odpowiedź, wyśle nagłówki i całą zawartość. Możesz także
            użyć kontrolera frontowego aby zwrócił zawartość za pomocą metody
            <code>returnResponse()</code>, a potem zrenderować odpowiedź używając
            twojej własnej logiki. Przyszłe wersje kontrolera frontowego mogą
            forsować użycie obiektu odpowiedzi przez wyświetlenie danych
            wyjściowych.
        </para>

        <para>
            Jest wiele dodatkowych funkcjonalności, które rozszerzają istniejące
            API i są one opisane w dokumentacji.
        </para>

        <para>
            Główne zmiany, na które musisz uważać, nastąpiły przy tworzeniu klas
            pochodnych komponentów. Te zmiany to:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Controller_Front::dispatch()</code> domyślnie
                    łapie wyjątki w obiekcie odpowiedzi i nie renderuje ich
                    aby zapobiec wyświetlaniu ważnych informacji systemowych.
                    Możesz zmienić to zachowanie na kilka sposobów:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            Ustaw <code>throwExceptions()</code> w kontrolerze
                            frontowym:
                        </para>
                        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);]]>
                        </programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            Ustaw <code>renderExceptions()</code> w obiekcie
                            odpowiedzi:
                        </para>
                        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->setResponse($response);
$front->dispatch();

// lub:
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions(true);
echo $response;]]>
                        </programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                zamiast tokena dispatchera przyjmuje i zwraca teraz
                obiekt <xref linkend="zend.controller.request" />.
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                przyjmuje i zwraca obiekt <xref linkend="zend.controller.request" />
                zamiast tokena dispatchera.
            </para></listitem>

            <listitem>
                <para>Zmiany w <code>Zend_Controller_Action</code> to:</para>

                <itemizedlist>
                    <listitem><para>
                        Kontruktor teraz przyjmuje dokładnie trzy argumenty,
                        <code>Zend_Controller_Request_Abstract $request</code>,
                        <code>Zend_Controller_Response_Abstract $response</code>,
                        oraz <code>array $params (opcjonalny)</code>.
                        <code>Zend_Controller_Action::__construct()</code> używa
                        ich aby ustawić żądanie, odpowiedź, i właściwości
                        invokeArgs obiektu i jeśli nadpisujesz konstruktor,
                        powinieneś je także ustawić. Lepiej jednak użyj
                        metody <code>init()</code> aby skonfigurować instancję,
                        ponieważ ta metoda jest wywoływana jako ostatnia akcja
                        konstruktora.
                    </para></listitem>

                    <listitem><para>
                        Metoda <code>run()</code> nie jest już zdefiniowana jako finalna,
                        ale nie jest też już używana przez kontroler frontowy;
                        Jej jedynym celem jest użycie klasy jako kontrolera strony.
                        Przyjmuje ona teraz dwa opcjonalne argumenty,
                        <code>Zend_Controller_Request_Abstract $request</code>
                        oraz <code>Zend_Controller_Response_Abstract $response</code>.
                    </para></listitem>

                    <listitem><para>
                        Akcja <code>indexAction()</code> nie musi być już
                        zdefiniowana, ale jest zalecana jako domyślna akcja.
                        To pozwala routerowi RewriteRouter oraz kontrolerom akcji
                        na określenie innych domyślnych metod akcji.
                    </para></listitem>

                    <listitem><para>
                        Metoda <code>__call()</code> powinna być nadpisana aby
                        obsłużyć automatycznie niezdefiniowane akcje.
                    </para></listitem>

                    <listitem><para>
                        Metoda <code>_redirect()</code> przyjmuje teraz opcjonalny
                        drugi argument, kod HTTP, który ma być zwrócony z
                        przekierowaniem oraz opcjonalny trzeci argument,
                        <code>$prependBase</code>, który może zdecydować czy
                        bazowy adres URL zarejestrowany w obiekcie żądania ma być
                        dodany do adresu URL.
                    </para></listitem>

                    <listitem>
                        <para>
                            Właściwość <code>_action</code> nie jest już
                            zdefiniowana. Ta właściwość była obiektem
                            <code>Zend_Controller_Dispatcher_Token</code>, który
                            nie istnieje już w aktualnej wersji. Jedynym
                            zastosowaniem tokena było przechowanie informacji o
                            zażądanym kontrolerze, akcji i parametrach URL. Te
                            informacje są teraz dostępne w obiekcie żądania w
                            taki sposób:
                        </para>

                        <programlisting role="php"><![CDATA[
// Pobierz nazwę kontrolera z żądania
// Dotychczas dostęp do niej był za pomocą: $this->_action->getControllerName().
// Poniższy przykład używa metody getRequest(), ale możesz także bezpośrednio
// użyć właściwości $_request; użycie getRequest() jest zalecane ponieważ klasa
// rodzica może nadpisać dostęp do obiektu żądania.
$controller = $this->getRequest()->getControllerName();

// Pobierz nazwę akcji z żądania
// Dotychczas dostęp do niej był za pomocą: $this->_action->getActionName().
$action = $this->getRequest()->getActionName();

// Pobierz parametry z żądania
// To się nie zmieniło; metody _getParams() oraz _getParam() teraz w prosty
// sposób wskazują na obiekt żądania.
$params = $this->_getParams();
$foo = $this->_getParam('foo', 'default'); // pobierz parametr 'foo', używając
                                           // wartości 'default' jako domyślnej]]>
                        </programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            Metoda <code>noRouteAction()</code> została usunięta.
                            Aby w poprawny sposób obsługiwać nieistniejące
                            metody akcji powinieneś przekierować je do domyślnej
                            akcji używając metody <code>__call()</code>:
                        </para>

                        <programlisting role="php"><![CDATA[
public function __call($method, $args)
{
    // Jeśli została zażądania nieistniejąca metoda 'Action', żądanie zostanie
    // przekazane do domyślnej metody akcji:
    if ('Action' == substr($method, -6)) {
        return $this->defaultAction();
    }

    throw new Zend_Controller_Exception('Nieprawdiłowa metoda');
}]]>
                        </programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                Akcja <code>Zend_Controller_RewriteRouter::setRewriteBase()</code>
                została usunięta. W zamian użyj
                <code>Zend_Controller_Front::setBaseUrl()</code>
                (lub Zend_Controller_Request_Http::setBaseUrl(), jeśli używasz
                tej klasy).
            </para></listitem>

            <listitem><para>
                Interfejs <code>Zend_Controller_Plugin_Interface</code> został
                zamieniony na <code>Zend_Controller_Plugin_Abstract</code>.
                Wszystkie metody przyjmują i zwracają obiekt
                <xref linkend="zend.controller.request" />
                zamiast tokena dispatchera.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
