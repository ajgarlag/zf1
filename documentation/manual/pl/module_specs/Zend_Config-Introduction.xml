<sect1 id="zend.config.introduction">
    <title>Wprowadzenie</title>
    <para>
        Klasa <code>Zend_Config</code> została stworzona aby uprościć użycie danych
        konfiguracyjnych w aplikacjach. Dostarcza ona interfejs bazujący na właściwościach
        obiektów służący do odczytywania danych konfiguracyjnych wewnątrz kodu aplikacji.
        Dane konfiguracyjne  mogą pochodzić z różnego rodzaju źródeł, w których dane
        konfiguracyjne są przechowywane hierarchiczne. Obecnie <code>Zend_Config</code> dostarcza
        klasy obsługujące dane konfiguracyjne przechowywane w plikach tekstowych:
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>, oraz
        <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.

    </para>
    <example id="zend.config.introduction.example.using">
        <title>Użycie Zend_Config</title>
        <para>
            Normalnie jest tak, że użytkownicy użyliby jednej z klas adaptera,
            takiej jak <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
            czy <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>,
            ale dane konfiguracyjne mogą być też dostępne w tablicy PHP. Można w prosty
            sposób przekazać tablicę do konstruktora <code>Zend_Config</code> w celu
            uzyskania obiektu zawierającego dane konfiguracyjne:
        </para>
        <programlisting role="php"><![CDATA[<?php
// Tablica danych konfiguracyjnych
$configArray = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Tworzy obiekt konfiguracji na podstawie danych konfiguracyjnych
require_once 'Zend/Config.php';
$config = new Zend_Config($configArray);

// Wyświetlenie wpisu z konfiguracji (wynikiem jest 'www.example.com')
echo $config->webhost;

// Użycie danych konfiguracyjnych w celu połączenia się z bazą danych
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);]]>
        </programlisting>
    </example>
    <para>
        Jak zostało pokazane w powyższym przykładzie, klasa <code>Zend_Config</code>
        zapewnia składnię zagnieżdżonych właściwości obiektów w celu uzyskania
        dostępu do danych konfiguracyjnych przekazanych do konstruktora.
    </para>
    <para>
        Along with the object oriented access to the data values, <code>Zend_Config</code> also has <code>get()</code> which will return
        the supplied default value if the data element doesn't exist. For example:
    </para>
    <programlisting role="php"><![CDATA[<?php
    $host = $config->database->get('host', 'localhost');]]>
    </programlisting>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
