<sect1 id="zend.locale.introduction">

    <title>Introduction</title>

    <para>
        <code>Zend_Locale</code> is the Frameworks answer to the question, "How can the same application be used around
        the whole world?" Most people will say, "That's easy. Let's translate all our output to several languages."
        However, using simple translation tables to map phrases from one language to another is not sufficient.
        Different regions will have different conventions for first names, surnames, salutory titles, formatting of
        numbers, dates, times, currencies, etc.
    </para>

    <para>
        We need
        <ulink url="http://en.wikipedia.org/wiki/L10n">Localization</ulink>
        and complementary
        <ulink url="http://en.wikipedia.org/wiki/L10n">Internationalization</ulink>
        . Both are often abbreviated to <code>L10N</code> and <code>I18N</code>. Internationalization refers more to
        support for use of systems, regardless of special needs unique to groups of users related by language, region,
        number format conventions, financial conventions, time and date conventions, etc. Localization involves adding
        explicit support to systems for special needs of these unique groups, such as language translation, and support
        for local customs or conventions for communicating plurals, dates, times, currencies, names, symbols, sorting
        and ordering, etc. <code>L10N</code> and <code>I18N</code> compliment each other. The Zend Framework provides
        support for these through a combination of components, including Zend_Locale, Zend_Date, Zend_Measure,
        Zend_Translate, Zend_Currency, and Zend_TimeSync.
    </para>

    <sect2 id="zend.locale.whatislocalization">

        <title>What is Localization</title>

        <para>
            Localization means that an application (or homepage) can be used from different users which speak different
            languages. But as you already have expected Localization means more than only translating strings. It
            includes
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <code>Zend_Locale</code> - Backend support of locales available for localization support within
                    other ZF components.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Translate</code> - Translating of strings.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Date</code> - Localization of dates, times.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Calendar</code> - Localization of calendars (support for non-Gregorian calendar systems)
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Currency</code> - Localization of currencies.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Format</code> - Parsing and generating localized numbers.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Data</code> - Retrieve localized standard strings as country names, language names
                    and
                    <ulink url="http://unicode.org/cldr/">more from the CLDR</ulink>
                    .
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>TODO</code> - Localization of collations
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.locale.whatis">

        <title>
            <ulink url="http://unicode.org/reports/tr35/#Locale">What is a Locale?</ulink>
        </title>

        <para>
            Each computer user makes use of Locales, even when they don't know it. Applications lacking localization
            support, normally have implicit support for one particular locale (the locale of the author). When a class
            or function makes use of localization, we say it is <code>locale-aware</code>. How does the code know which
            localization the user is expecting?
        </para>

        <para>
            A locale string or object identifying a supported locale gives <code>Zend_Locale</code> and it's subclasses
            access to information about the language and region expected by the user. Correct formatting, normalization,
            and conversions are made based on this information.
        </para>

    </sect2>

    <sect2 id="zend.locale.representation">

        <title>How are Locales Represented?</title>

        <para>
            Locale identifiers consist of information about the user's language and preferred/primary geographic region
            (e.g. state or province of home or workplace). The locale identifier strings used in the Zend Framework are
            internationally defined standard abbreviations of language and region, written as
            <code>language_REGION</code>. Both the language and region parts are abbreviated to 2 alphabetic, ASCII
            characters.
        </para>

        <para>
            A user from USA would expect the language <code>English</code> and the region <code>USA</code>, yielding the
            locale identifier "en_US". A user in Germany would expect the language <code>German</code> and the region
            <code>Germany</code>, yielding the locale identifier "de_DE". See the
            <ulink url="http://unicode.org/cldr/data/diff/supplemental/languages_and_territories.html">list of pre-defined locale and region combinations</ulink>
            , if you need to select a specific locale within the Zend Framework.
        </para>

        <example>
            <title>Choosing a specific locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend_Locale';
$locale = new Zend_Locale('de_DE'); // German language _ Germany
?>]]></programlisting>
        </example>

        <para>
            A German user in America might expect the language <code>German</code> and the region <code>USA</code>, but
            these non-standard mixes are not supported directly as recognized "locales". Instead, if an invalid
            combination is used, then it will automatically be truncated by dropping the region code. For example,
            "de_IS" would be truncated to "de", and "xh_RU" would be truncated to "xh", because neither of these
            combinations are valid. Additionally, if the base language code is not supported (e.g. "zz_US") or does not
            exist, then a default "root" locale will be used. The "root" locale has default definitions for
            internationally recognized representations of dates, times, numbers, currencies, etc. The truncation process
            depends on the requested information, since some combinations of language and region might be valid for one
            type of data (e.g. dates), but not for another (e.g. currency format).
        </para>

        <para>
            Beware of historical changes, as ZF components do not know about or attempt to track the numerous timezone
            changes made over many years by many regions. For example,
            <ulink url="http://www.statoids.com/tus.html">we can see a historical list</ulink>
            showing dozens of changes made by governments to when and if a particular region observes Daylight Savings
            Time, and even which timezone a particular geographic area belongs. Thus, when performing date math, the
            math performed by ZF components will not adjust for these changes, but instead will give the correct time
            for the timezone using current, modern rules for DST and timezone assignment for geographic regions.
        </para>

    </sect2>

    <sect2 id="zend.locale.selection">

        <title>Selecting the Right Locale</title>

        <para>
            For most situations, <code>new Zend_Locale()</code> will automatically select the correct locale, with
            preference given to information provided by the user's web browser. However, if <code>new
            Zend_Locale(Zend_Locale::ENVIRONMENT)</code> is used, then preference will be given to using the host
            server's environment configuration, as described below.
        </para>

        <example>
            <title>Automatically selecting a locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
$locale  = new Zend_Locale();
$locale1 = new Zend_Locale(Zend_Locale::BROWSER);     // default behavior, same as above
$locale2 = new Zend_Locale(Zend_Locale::ENVIRONMENT); // prefer settings on host server
$locale3 = new Zend_Locale(Zend_Locale::FRAMEWORK);   // perfer framework app default settings
?>]]></programlisting>
        </example>

        <para>
            The seach algorithm used by <code>Zend_Locale</code> for automatic selection of a locale uses three sources
            of information:
            <orderedlist>
                <listitem>
                    <para>
                        const <code>Zend_Locale::BROWSER</code> - The user's Web browser provides information with each
                        request, which is published by PHP in the global variable <code>HTTP_ACCEPT_LANGUAGE</code>. If
                        no matching locale can be found, then preference is given to <code>ENVIRONMENT</code> and lastly
                        <code>FRAMEWORK</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::ENVIRONMENT</code> - PHP publishes the host server's locale via the PHP
                        internal function <code>setlocale()</code>. If no matching locale can be found, then preference
                        is given to FRAMEWORK and lastly BROWSER.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::FRAMEWORK</code> - When the Zend Framework has a standardized way of
                        specifying component defaults (planned, but not yet available), then using this constant during
                        instantiation will give preference to choosing a locale based on these defaults. If no matching
                        locale can be found, then preference is given to <code>ENVIRONMENT</code> and lastly
                        <code>BROWSER</code>.
                    </para>
                </listitem>
            </orderedlist>
        </para>

    </sect2>

    <sect2 id="zend.locale.interoperate">

        <title>ZF Locale-Aware Classes</title>

        <para>
            In the ZF, locale-aware classes rely on <code>Zend_Locale</code> to automatically select a locale, as
            explained above. For example, in a ZF web application, constructing a date using <code>Zend_Date</code>
            without specifying a locale results in an object with a locale based on information provided by the current
            user's web browser.
        </para>

        <example>
            <title>Dates default to correct locale of web users</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
$date = new Zend_Date('2006',Zend_Date::YEAR);
?>]]></programlisting>
        </example>

        <para>
            To override this default behavior, and force locale-aware ZF components to use specific locales, regardless
            of the origin of your website visitors, explicitly specify a locale as the third argument to the
            constructor.
        </para>

        <example>
            <title>Overriding default locale selection</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure/Temperature.php';

$usLocale = new Zend_Locale('en_US');
$date = new Zend_Date('2006', Zend_Date::YEAR, $usLocale);
$temp = new Zend_Measure_Temperature('100,10', Zend_Measure::TEMPERATURE, $usLocale);
?>]]></programlisting>
        </example>

        <para>
            If you know many objects should all use the same default locale, explicitly specify the default locale to
            avoid the overhead of each object determining the default locale.
        </para>

        <example>
            <title>Performance optimization when using a default locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure/Temperature.php';

$locale = new Zend_Locale();
$date = new Zend_Date('2006', Zend_Date::YEAR, $locale);
$temp = new Zend_Measure_Temperature('100,10', Zend_Measure::TEMPERATURE, $locale);
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.formatoptions">

        <title>Zend_Locale_Format::setOptions(array $options)</title>

        <para>
            The 'precision' option of a value is used to truncate or stretch extra digits. A value of '-1' disables
            modification of the number of digits in the fractional part of the value. The 'locale' option helps when
            parsing numbers and dates using separators and month names. The date format 'format_type' option selects between
            CLDR/ISO date format specifier tokens and PHP's date() tokens. The 'fix_date' option enables or disables
            heuristics that attempt to correct invalid dates. The 'number_format' option specifies a default number
            format for use with <code>toNumber()</code> (see
            <xref
                linkend= "zend.locale.number.localize"/>
            ).
        </para>

        <para>
            The 'date_format' option can be used to specify a default date format string, but beware of using getDate(),
            checkdateFormat() and getTime() after using setOptions() with a 'date_format'. To use these four methods
            with the default date format for a locale, use array('date_format' => null, 'locale' => $locale) for their
            options.
        </para>

        <example>
            <title>Dates default to correct locale of web users</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
Zend_Locale_Format::setOptions('locale' => 'en_US', 'fix_date' => true, 'format_type' => 'php');
?>]]></programlisting>
        </example>

        <para>
            For working with the standard definitions of a locale the option Zend_Locale_Format::STANDARD can be used.
            Setting the option Zend_Locale_Format::STANDARD for date_format uses the standard definitions from the actual
            set locale. Setting it for number_format uses the standard number format for this locale.
            And setting it for locale uses the standard locale for this environment or browser.
        </para>

        <example>
            <title>Using STANDARD definitions for setOptions()</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
Zend_Locale_Format::setOptions('locale' => 'en_US', 'date_format' => 'dd.MMMM.YYYY');
// overriding the global set date format
$date = Zend_Locale_Format::getDate('2007-04-20, array('date_format' => Zend_Locale_Format::STANDARD);

// global setting of the standard locale
Zend_Locale_Format::setOptions('locale' => Zend_Locale_Format::STANDARD, 'date_format' => 'dd.MMMM.YYYY');

?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
