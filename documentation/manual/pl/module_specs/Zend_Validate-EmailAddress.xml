<sect1 id="zend.validate.validating_email_addresses">

    <title>Walidacja adresów email</title>

    <para>
        Klasa Zend_Validate_Email pozwala ci na przeprowadzenie walidacji adresu
        email. Walidator wpierw dzieli adres email na część lokalną oraz na
        nazwę serwera, a następnie próbuje sprawdzić je w oparciu o znane
        specyfikacje dla adresów email oraz adresów serwerów.
    </para>

    <para>
        <emphasis role="strong">Podstawowe użycie</emphasis>
    </para>

    <para>
        Poniżej podstawowy przykład użycia:

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Validate/EmailAddress.php';
$validator = new Zend_Validate_EmailAddress();
if ($validator->isValid($email)) {
    // adres email wygląda na prawidłowy
} else {
    // adres email jest nieprawidłowy; wyświetl powody
    foreach ($validator->getMessages() as $message) {
        echo "$message\n";
    }
}

?>]]></programlisting>

        Sprawdzi to adres email <code>$email</code> i w przypadku niepowodzenia
        wypełni <code>$validator->getMessages()</code> użytecznymi informacjami
        informującymi o błędach.
    </para>


    <para>
        <emphasis role="strong">Części adresu email</emphasis>
    </para>

    <para>
        Zend_Validate_Email dopasuje każdy prawidłowy adres email zgodny ze
        specyfikacją RFC2822.
        Na przykład, poprawnymi adresami będą <code>bob@domain.com</code>,
        <code>bob+jones@domain.us</code>, <code>"bob@jones"@domain.com</code>
        oraz <code>"bob jones"@domain.com</code>
    </para>

    <para>
        Niektóre przestarzałe formaty adresów email nie są obecnie walidowane
        (np. zawierające znak powrotu karetki, albo znak "\" w adresie email).
    </para>

    <para>
        <emphasis role="strong">Walidacja dla różnych typów adresów serwerów</emphasis>
    </para>

    <para>
        Część adresu email zawierająca adres serwera jest walidowana za pomocą
        Zend_Validate_Hostname. Domyślnie akceptowane są jedynie adresy DNS w
        stylu <code>domain.com</code>, ale jeśli chcesz, to możesz włączyć
        akceptowanie także adresów IP oraz adresów lokalnych.
    </para>

    <para>
        Aby to zrobić, musisz utworzyć instancję Zend_Validate_EmailAddress
        przekazując parametr określający typ adresów jakie chcesz akceptować.
        Więcej szczegółów znajdziesz w Zend_Validate_Hostname, jednak poniżej
        możesz zobaczyć przykład akceptowania zarówno adresów DNS jak i adresów
        lokalnych:

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Validate/EmailAddress.php';
$validator = new Zend_Validate_EmailAddress(Zend_Validate_Hostname::ALLOW_DNS | Zend_Validate_Hostname::ALLOW_LOCAL);
if ($validator->isValid($email)) {
    // adres email wygląda na prawidłowy
} else {
    // adres email jest nieprawidłowy; wyświetl powody
    foreach ($validator->getMessages() as $message) {
        echo "$message\n";
    }
}

?>]]></programlisting>
    </para>

    <para>
        <emphasis role="strong">Checking if the hostname actually accepts email</emphasis>
    </para>

    <para>
        Just because an email address is in the correct format it doesn't necessarily mean that
        email address actually exists. To help solve this problem, you can use MX validation to
        check whether an MX (email) entry exists in the DNS record for the email's hostname.
        This tells you that the hostname accepts email, but doesn't tell you the exact email
        address itself is valid.
    </para>

    <para>
        MX checking is not enabled by default and at this time is only supported by UNIX platforms.
        To enable MX checking you can pass a second parameter to the Zend_Validate_EmailAddress
        constructor.

        <programlisting role="php"><![CDATA[<?php

$validator = new Zend_Validate_EmailAddress(Zend_Validate_Hostname::ALLOW_DNS, true);

?>]]></programlisting>

        Alternatively you can either pass <code>true</code> or <code>false</code> to
        <code>$validator->setValidateMx()</code> to enable or disable MX validation.
    </para>

    <para>
        By enabling this setting network functions will be used to check for the presence of an
        MX record on the hostname of the email address you wish to validate. Please be aware
        this will likely slow your script down.
    </para>

    <para>
        <emphasis role="strong">Validating International Domains Names</emphasis>
    </para>

    <para>
        Zend_Validate_EmailAddress will also match international characters that exist in some domains.
        This is known as International Domain Name (IDN) support. This is enabled by default, though
        you can disable this by changing the setting via the internal Zend_Validate_Hostname object
        that exists within Zend_Validate_EmailAddress.

    <programlisting role="php"><![CDATA[<?php

$validator->hostnameValidator->setValidateIdn(false);

?>]]></programlisting>

        Więcej informacji na temat użycia metody <code>setValidateIdn()</code>
        znajduje się w dokumentacji Zend_Validate_Hostname.
    </para>

    <para>
        Please note IDNs are only validated if you allow DNS hostnames to be validated.
    </para>

    <para>
        <emphasis role="strong">Validating Top Level Domains</emphasis>
    </para>

    <para>
        By default a hostname will be checked against a list of known TLDs. This is enabled by
        default, though you can disable this by changing the setting via the internal
        Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress.

    <programlisting role="php"><![CDATA[<?php

$validator->hostnameValidator->setValidateTld(false);

?>]]></programlisting>

        Więcej informacji na temat użycia metody <code>setValidateTld()</code>
        znajduje się w dokumentacji Zend_Validate_Hostname.
    </para>

    <para>
        Please note TLDs are only validated if you allow DNS hostnames to be validated.
    </para>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->