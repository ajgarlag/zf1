<sect1 id="zend.session.basicusage">

    <title>Podstawowe użycie</title>

    <para>
        Instancje <code>Zend_Session_Namespace</code> zapewniają główne API do
        manipulowania danymi sesji w Zend Framework. Przestrzenie nazw są
        używane do segregowania wszystkich danych sesji, chociaż dla tych,
        którzy potrzebują tylko jednej przestrzeni nazw dla wszystkich danych
        sesji, istnieje domyślna przestrzeń nazw. <code>Zend_Session</code>
        używa rozszerzenia session i jego specjalnej superglobalnej tablicy
        <code>$_SESSION</code> jako mechanizmu składowania danych stanu sesji.
        Dopóki tablica <code>$_SESSION</code> jest wciąż dostępna w globalnej
        przestrzeni nazw PHP, programiści powinni wystrzegać się uzyskiwania
        bezpośredniego dostępu do niej, więc dlatego <code>Zend_Session</code>
        oraz <code>Zend_Session_Namespace</code> mogą najbardziej efektywnie
        i bezpiecznie zapewniać zbiór funkcjonalności związanych z sesją.
    </para>

    <sect2 id="zend.session.basicexamples">

        <title>Przykłady</title>

        <para>
            Jeśli przestrzeń nazw nie zostanie określona przy tworzeniu
            instancji Zend_Session, wszystkie dane będą przechowywane w
            przestrzeni nazw "<code>Default</code>". Klasa
            <code>Zend_Session</code> nie jest przeznaczona do bezpośredniej
            pracy z zawartością przestrzeni nazw sesji. Zamiast niej używamy
            klasy <code>Zend_Session_Namespace</code>. Poniższy przykład
            demonstruje użycie domyślnej przestrzeni nazw, pokazując jak
            obliczyć ile razy użytkownik oglądał strony w twoim serwisie.
            Aby przetestować ten przykład, dodaj poniższy kod do twojego pliku
            ładującego ZF:
        </para>

        <example>
            <title>Zliczanie odsłon stron</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $defaultNamespace = new Zend_Session_Namespace('Default');

    // używamy magicznej metody __isset() w Zend_Session_Namespace:
    if (isset($defaultNamespace->numberOfPageRequests)) {
        $defaultNamespace->numberOfPageRequests++; // to będzie inkrementowane po każdym przeładowaniu strony
    } else {
        $defaultNamespace->numberOfPageRequests = 1; // pierwsze przeładowanie
    }

    echo "Page requests this session: ", $defaultNamespace->numberOfPageRequests;
?>]]></programlisting>
        </example>

        <para>
            Jedną z wielu zalet klasy Zend_Session_Namespace widać wtedy, gdy
            wiele modułów używa Zend_Session_Namespace i uzyskuje dostęp do
            hermetyzacji danych sesji. Do konstruktora Zend_Session można
            przekazać opcjonalny argument $namespace, który pozwala innym
            komponentom, modułom oraz specyficznemu kodowi programisty na
            uzyskanie gwarancji tego, że ich dane będą zabezpieczone przegrodą
            od obszarów danych używanych przez inne komponenty, moduły oraz
            inny kod programisty. Przestrzenie nazw zapewniają efektywny i
            popularny sposób do zabezpieczenia podzbiorów danych stanu sesji
            przed przypadkowymi zmianami. Nazwy przestrzeni nazw mogą składać
            się tylko z niepustych łańcuchów znaków PHP, ktęre nie zaczynają się
            od znaku podkreślnika ('_'). Jedynie rdzenne komponenty zawarte w
            Zend Framework powinny używać przestrzeni nazw o nazwach
            zaczynających się od 'Zend_'.
        </para>

        <example>
            <title>Nowy sposób: Przestrzenie nazw zapobiegają kolizjom</title>
<programlisting role="php">
<![CDATA[<?php
    // w komponencie Zend_Auth
    require_once 'Zend/Session.php';
    $authNamespace = new Zend_Session_Namespace('Zend_Auth');
    $authNamespace->user = "myusername";

    // w komponencie serwisów web
    $webServiceNamespace = new Zend_Session_Namespace('Some_Web_Service');
    $webServiceNamespace->user = "mywebusername";
?>]]></programlisting>
        </example>

        <para>
            Powyższy przykład daje ten sam efekt jak kod poniżej, z wyjątkiem
            tego, że obiekt sesji utrzymuje hermetyzację danych sesji wewnątrz
            odpowiadającej mu przestrzeni nazw.
        </para>

        <example>
            <title>Stary sposób: Dostęp do sesji PHP</title>
<programlisting role="php">
<![CDATA[<?php
    $_SESSION['Zend_Auth']['user'] = "myusername";
    $_SESSION['Some_Web_Service']['user'] = "mywebusername";
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.iteration">

        <title>Iteracja poprzez przestrzenie nazw sesji</title>

        <para>
            <code>Zend_Session_Namespace</code> zapewnia pełny
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">interfejs IteratorAggregate</ulink>
            , właczając w to obsługę wyrażenia <code>foreach</code>:
        </para>

        <example>
            <title>Iteracja sesji</title>
<programlisting role="php">
<![CDATA[<?php
    // Zend_Session możemy iterować
    require_once 'Zend/Session.php';
    $aNamespace = new Zend_Session_Namespace('some_namespace_with_data_present');
    foreach ($aNamespace as $index => $value) {
        echo "aNamespace->$index = '$value';\n";
    }
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.accessors">

        <title>Metody dostępowe do przestrzeni nazw sesji</title>

        <para>
            Standardowe metody dostępowe są dostępne za pomocą magicznych metod
            __set(), __unset(), __isset(), oraz __get(). Magiczne metody nie
            powinny być używane bezpośrednio, z wyjątkiem wnętrza klasy
            rozszerzającej Zend_Session. Zamiast tego, używaj normalnych
            operatorów aby wywoływać te magiczne metody, na przykład:
        </para>

        <example>
            <title>Uzyskiwanie dostępu do danych sesji</title>
<programlisting role="php">
<![CDATA[<?php
            $object->property = $value; echo
            (isset($object->property) ? 'set' : 'unset');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
